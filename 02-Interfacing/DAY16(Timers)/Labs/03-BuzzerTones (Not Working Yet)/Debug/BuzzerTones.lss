
BuzzerTones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002d52  00002de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080008c  0080008c  00002e12  2**0
                  ALLOC
  3 .stab         000029ac  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016ea  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000700a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007199  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000091de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a2df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_1>
       8:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_2>
       c:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_10>
      2c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 15 	call	0x2bae	; 0x2bae <main>
      8a:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIM0_voidInit>:

ptrFunc_Iv_Ov Global_ISR_TIM0_OVF_ptr = NULL;
ptrFunc_Iv_Ov Global_ISR_TIM0_CM_ptr = NULL;


void TIM0_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	#if TIM0_MODE == TIM0_MODE_NORMAL
		TCCR0 = CLR_BIT(TCCR0, WGM00);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7b       	andi	r24, 0xBF	; 191
     cb2:	8c 93       	st	X, r24
		TCCR0 = CLR_BIT(TCCR0, WGM01);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	87 7f       	andi	r24, 0xF7	; 247
     cc0:	8c 93       	st	X, r24
		TCCR0 = CLR_BIT(TCCR0, WGM01);
	#else
		TCCR0 = SET_BIT(TCCR0, WGM00);
		TCCR0 = SET_BIT(TCCR0, WGM01);
	#endif
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <TIM0_voidSetPreValue>:



void TIM0_voidSetPreValue(u8 Copy_u8CounterStartValue){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	0f 92       	push	r0
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8CounterStartValue;
     cd4:	e2 e5       	ldi	r30, 0x52	; 82
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	80 83       	st	Z, r24
}
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <TIM0_voidTimerStart>:

void TIM0_voidTimerStart(u8 Copy_u8Prescalar){
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	0f 92       	push	r0
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0b11111000;
     cf0:	a3 e5       	ldi	r26, 0x53	; 83
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e3 e5       	ldi	r30, 0x53	; 83
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 7f       	andi	r24, 0xF8	; 248
     cfc:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescalar;
     cfe:	a3 e5       	ldi	r26, 0x53	; 83
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e3 e5       	ldi	r30, 0x53	; 83
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	90 81       	ld	r25, Z
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	89 2b       	or	r24, r25
     d0c:	8c 93       	st	X, r24
}
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIM0_voidOVFINTControl>:

void TIM0_voidOVFINTControl(u8 Copy_u8INTcontrol){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	0f 92       	push	r0
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8INTcontrol == TIM0_INT_ENABLE){
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	41 f4       	brne	.+16     	; 0xd38 <TIM0_voidOVFINTControl+0x22>
		TIMSK = SET_BIT(TIMSK, TOIE0);
     d28:	a9 e5       	ldi	r26, 0x59	; 89
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 e5       	ldi	r30, 0x59	; 89
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	8c 93       	st	X, r24
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <TIM0_voidOVFINTControl+0x30>
	}
	else{
		TIMSK = CLR_BIT(TIMSK, TOIE0);
     d38:	a9 e5       	ldi	r26, 0x59	; 89
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e9 e5       	ldi	r30, 0x59	; 89
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8e 7f       	andi	r24, 0xFE	; 254
     d44:	8c 93       	st	X, r24
	}
}
     d46:	0f 90       	pop	r0
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <TIM0_voidSetCompareMatch>:

void TIM0_voidSetCompareMatch(u8 Copy_u8CompareMatchValue, u8 Copy_u8OC0PinAction){
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <TIM0_voidSetCompareMatch+0x6>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <TIM0_voidSetCompareMatch+0x8>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8OC0PinAction){
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	3c 83       	std	Y+4, r19	; 0x04
     d66:	2b 83       	std	Y+3, r18	; 0x03
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	91 05       	cpc	r25, r1
     d70:	c9 f0       	breq	.+50     	; 0xda4 <TIM0_voidSetCompareMatch+0x56>
     d72:	2b 81       	ldd	r18, Y+3	; 0x03
     d74:	3c 81       	ldd	r19, Y+4	; 0x04
     d76:	23 30       	cpi	r18, 0x03	; 3
     d78:	31 05       	cpc	r19, r1
     d7a:	19 f1       	breq	.+70     	; 0xdc2 <TIM0_voidSetCompareMatch+0x74>
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	91 05       	cpc	r25, r1
     d84:	69 f5       	brne	.+90     	; 0xde0 <TIM0_voidSetCompareMatch+0x92>
		case TIM0_OC0_TGL:
			TCCR0 = SET_BIT(TCCR0, COM00);
     d86:	a3 e5       	ldi	r26, 0x53	; 83
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e3 e5       	ldi	r30, 0x53	; 83
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	8c 93       	st	X, r24
			TCCR0 = CLR_BIT(TCCR0, COM01);
     d94:	a3 e5       	ldi	r26, 0x53	; 83
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e3 e5       	ldi	r30, 0x53	; 83
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 7d       	andi	r24, 0xDF	; 223
     da0:	8c 93       	st	X, r24
     da2:	2c c0       	rjmp	.+88     	; 0xdfc <TIM0_voidSetCompareMatch+0xae>
			break;

		case TIM0_OC0_CLR:
			TCCR0 = CLR_BIT(TCCR0, COM00);
     da4:	a3 e5       	ldi	r26, 0x53	; 83
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e3 e5       	ldi	r30, 0x53	; 83
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8f 7e       	andi	r24, 0xEF	; 239
     db0:	8c 93       	st	X, r24
			TCCR0 = SET_BIT(TCCR0, COM01);
     db2:	a3 e5       	ldi	r26, 0x53	; 83
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e3 e5       	ldi	r30, 0x53	; 83
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 62       	ori	r24, 0x20	; 32
     dbe:	8c 93       	st	X, r24
     dc0:	1d c0       	rjmp	.+58     	; 0xdfc <TIM0_voidSetCompareMatch+0xae>
			break;

		case TIM0_OC0_SET:
			TCCR0 = SET_BIT(TCCR0, COM00);
     dc2:	a3 e5       	ldi	r26, 0x53	; 83
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e3 e5       	ldi	r30, 0x53	; 83
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 61       	ori	r24, 0x10	; 16
     dce:	8c 93       	st	X, r24
			TCCR0 = SET_BIT(TCCR0, COM01);
     dd0:	a3 e5       	ldi	r26, 0x53	; 83
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e3 e5       	ldi	r30, 0x53	; 83
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 62       	ori	r24, 0x20	; 32
     ddc:	8c 93       	st	X, r24
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <TIM0_voidSetCompareMatch+0xae>
			break;

		default:
			TCCR0 = CLR_BIT(TCCR0, COM00);
     de0:	a3 e5       	ldi	r26, 0x53	; 83
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e3 e5       	ldi	r30, 0x53	; 83
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	8c 93       	st	X, r24
			TCCR0 = CLR_BIT(TCCR0, COM01);
     dee:	a3 e5       	ldi	r26, 0x53	; 83
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e3 e5       	ldi	r30, 0x53	; 83
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	8c 93       	st	X, r24
			break;
	}
	OCR0 = Copy_u8CompareMatchValue;
     dfc:	ec e5       	ldi	r30, 0x5C	; 92
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	80 83       	st	Z, r24
}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <TIM0_voidSetCompareMatchValue>:

void TIM0_voidSetCompareMatchValue(u8 Copy_u8CompareMatchValue){
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	0f 92       	push	r0
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompareMatchValue;
     e1e:	ec e5       	ldi	r30, 0x5C	; 92
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	80 83       	st	Z, r24
}
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <TIM0_voidSetCompareMatchINTControl>:


void TIM0_voidSetCompareMatchINTControl(u8 Copy_u8INTControl){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8INTControl == TIM0_INT_ENABLE){
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	41 f4       	brne	.+16     	; 0xe50 <TIM0_voidSetCompareMatchINTControl+0x22>
		TIMSK = SET_BIT(TIMSK, OCIE0);
     e40:	a9 e5       	ldi	r26, 0x59	; 89
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e9 e5       	ldi	r30, 0x59	; 89
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	82 60       	ori	r24, 0x02	; 2
     e4c:	8c 93       	st	X, r24
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <TIM0_voidSetCompareMatchINTControl+0x30>
	}
	else{
		TIMSK = CLR_BIT(TIMSK, OCIE0);
     e50:	a9 e5       	ldi	r26, 0x59	; 89
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e9 e5       	ldi	r30, 0x59	; 89
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8d 7f       	andi	r24, 0xFD	; 253
     e5c:	8c 93       	st	X, r24
	}
}
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <TIM0_voidTimerStop>:

void TIM0_voidTimerStop (void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	8c 93       	st	X, r24

}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <TIM0_voidOVFCallback>:

void TIM0_voidOVFCallback(ptrFunc_Iv_Ov Copy_pfTIM0OVF){
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <TIM0_voidOVFCallback+0x6>
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
	Global_ISR_TIM0_OVF_ptr = Copy_pfTIM0OVF;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	90 93 8d 00 	sts	0x008D, r25
     e98:	80 93 8c 00 	sts	0x008C, r24
}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <TIM0_voidCompareMatchCallback>:
void TIM0_voidCompareMatchCallback(ptrFunc_Iv_Ov Copy_pfTIM0CompareMatch){
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <TIM0_voidCompareMatchCallback+0x6>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
	Global_ISR_TIM0_CM_ptr = Copy_pfTIM0CompareMatch;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	90 93 8f 00 	sts	0x008F, r25
     ebc:	80 93 8e 00 	sts	0x008E, r24

}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <TIM0_voidPWMGenerator>:

void TIM0_voidPWMGenerator(u8 Copy_u8DutyCycle, u8 Copy_u8C0PinAction){
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <TIM0_voidPWMGenerator+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	6a 83       	std	Y+2, r22	; 0x02
			OCR0 = (Copy_u8DutyCycle * 510)/100/2;

		}

	#endif
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_11>:




ISR(TIMER0_OVF_vect){
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_TIM0_OVF_ptr != NULL){
     f0c:	80 91 8c 00 	lds	r24, 0x008C
     f10:	90 91 8d 00 	lds	r25, 0x008D
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	29 f0       	breq	.+10     	; 0xf22 <__vector_11+0x40>
		Global_ISR_TIM0_OVF_ptr();
     f18:	e0 91 8c 00 	lds	r30, 0x008C
     f1c:	f0 91 8d 00 	lds	r31, 0x008D
     f20:	09 95       	icall
	}
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_10>:

ISR(TIMER0_COMP_vect){
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_TIM0_CM_ptr != NULL){
     f72:	80 91 8e 00 	lds	r24, 0x008E
     f76:	90 91 8f 00 	lds	r25, 0x008F
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	29 f0       	breq	.+10     	; 0xf88 <__vector_10+0x40>
		Global_ISR_TIM0_CM_ptr();
     f7e:	e0 91 8e 00 	lds	r30, 0x008E
     f82:	f0 91 8f 00 	lds	r31, 0x008F
     f86:	09 95       	icall
	}
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <INT_voidEnable>:

ptrFunc_Iv_Ov Global_ISR_INT0_ptr = NULL;
ptrFunc_Iv_Ov Global_ISR_INT1_ptr = NULL;
ptrFunc_Iv_Ov Global_ISR_INT2_ptr = NULL;

void INT_voidEnable(u8 Copy_u8INTIndex, u8 Copy_u8INTSense){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2a 97       	sbiw	r28, 0x0a	; 10
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex) {
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3a 87       	std	Y+10, r19	; 0x0a
     fce:	29 87       	std	Y+9, r18	; 0x09
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <INT_voidEnable+0x2e>
     fda:	6d c0       	rjmp	.+218    	; 0x10b6 <INT_voidEnable+0x108>
     fdc:	29 85       	ldd	r18, Y+9	; 0x09
     fde:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <INT_voidEnable+0x3a>
     fe6:	c9 c0       	rjmp	.+402    	; 0x117a <INT_voidEnable+0x1cc>
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	09 f0       	breq	.+2      	; 0xff2 <INT_voidEnable+0x44>
     ff0:	e9 c0       	rjmp	.+466    	; 0x11c4 <INT_voidEnable+0x216>
		case INT_INT0:
			switch (Copy_u8INTSense) {
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	38 87       	std	Y+8, r19	; 0x08
     ffa:	2f 83       	std	Y+7, r18	; 0x07
     ffc:	8f 81       	ldd	r24, Y+7	; 0x07
     ffe:	98 85       	ldd	r25, Y+8	; 0x08
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	21 f1       	breq	.+72     	; 0x104e <INT_voidEnable+0xa0>
    1006:	2f 81       	ldd	r18, Y+7	; 0x07
    1008:	38 85       	ldd	r19, Y+8	; 0x08
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	2c f4       	brge	.+10     	; 0x101a <INT_voidEnable+0x6c>
    1010:	8f 81       	ldd	r24, Y+7	; 0x07
    1012:	98 85       	ldd	r25, Y+8	; 0x08
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	61 f0       	breq	.+24     	; 0x1030 <INT_voidEnable+0x82>
    1018:	46 c0       	rjmp	.+140    	; 0x10a6 <INT_voidEnable+0xf8>
    101a:	2f 81       	ldd	r18, Y+7	; 0x07
    101c:	38 85       	ldd	r19, Y+8	; 0x08
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	21 f1       	breq	.+72     	; 0x106c <INT_voidEnable+0xbe>
    1024:	8f 81       	ldd	r24, Y+7	; 0x07
    1026:	98 85       	ldd	r25, Y+8	; 0x08
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	71 f1       	breq	.+92     	; 0x108a <INT_voidEnable+0xdc>
    102e:	3b c0       	rjmp	.+118    	; 0x10a6 <INT_voidEnable+0xf8>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC00);
    1030:	a5 e5       	ldi	r26, 0x55	; 85
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e5       	ldi	r30, 0x55	; 85
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8e 7f       	andi	r24, 0xFE	; 254
    103c:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	8c 93       	st	X, r24
    104c:	2c c0       	rjmp	.+88     	; 0x10a6 <INT_voidEnable+0xf8>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
    104e:	a5 e5       	ldi	r26, 0x55	; 85
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e5       	ldi	r30, 0x55	; 85
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
    105c:	a5 e5       	ldi	r26, 0x55	; 85
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e5       	ldi	r30, 0x55	; 85
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	8c 93       	st	X, r24
    106a:	1d c0       	rjmp	.+58     	; 0x10a6 <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
    106c:	a5 e5       	ldi	r26, 0x55	; 85
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e5       	ldi	r30, 0x55	; 85
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
    107a:	a5 e5       	ldi	r26, 0x55	; 85
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e5 e5       	ldi	r30, 0x55	; 85
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8d 7f       	andi	r24, 0xFD	; 253
    1086:	8c 93       	st	X, r24
    1088:	0e c0       	rjmp	.+28     	; 0x10a6 <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC00);
    108a:	a5 e5       	ldi	r26, 0x55	; 85
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e5       	ldi	r30, 0x55	; 85
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8e 7f       	andi	r24, 0xFE	; 254
    1096:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
    1098:	a5 e5       	ldi	r26, 0x55	; 85
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e5 e5       	ldi	r30, 0x55	; 85
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT0);
    10a6:	ab e5       	ldi	r26, 0x5B	; 91
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	eb e5       	ldi	r30, 0x5B	; 91
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	8c 93       	st	X, r24
    10b4:	87 c0       	rjmp	.+270    	; 0x11c4 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			switch (Copy_u8INTSense) {
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3e 83       	std	Y+6, r19	; 0x06
    10be:	2d 83       	std	Y+5, r18	; 0x05
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	21 f1       	breq	.+72     	; 0x1112 <INT_voidEnable+0x164>
    10ca:	2d 81       	ldd	r18, Y+5	; 0x05
    10cc:	3e 81       	ldd	r19, Y+6	; 0x06
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <INT_voidEnable+0x130>
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <INT_voidEnable+0x146>
    10dc:	46 c0       	rjmp	.+140    	; 0x116a <INT_voidEnable+0x1bc>
    10de:	2d 81       	ldd	r18, Y+5	; 0x05
    10e0:	3e 81       	ldd	r19, Y+6	; 0x06
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	21 f1       	breq	.+72     	; 0x1130 <INT_voidEnable+0x182>
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	71 f1       	breq	.+92     	; 0x114e <INT_voidEnable+0x1a0>
    10f2:	3b c0       	rjmp	.+118    	; 0x116a <INT_voidEnable+0x1bc>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC10);
    10f4:	a5 e5       	ldi	r26, 0x55	; 85
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e5       	ldi	r30, 0x55	; 85
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
    1102:	a5 e5       	ldi	r26, 0x55	; 85
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e5       	ldi	r30, 0x55	; 85
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 60       	ori	r24, 0x08	; 8
    110e:	8c 93       	st	X, r24
    1110:	2c c0       	rjmp	.+88     	; 0x116a <INT_voidEnable+0x1bc>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
    1112:	a5 e5       	ldi	r26, 0x55	; 85
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e5       	ldi	r30, 0x55	; 85
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	84 60       	ori	r24, 0x04	; 4
    111e:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
    1120:	a5 e5       	ldi	r26, 0x55	; 85
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e5       	ldi	r30, 0x55	; 85
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	88 60       	ori	r24, 0x08	; 8
    112c:	8c 93       	st	X, r24
    112e:	1d c0       	rjmp	.+58     	; 0x116a <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
    1130:	a5 e5       	ldi	r26, 0x55	; 85
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e5       	ldi	r30, 0x55	; 85
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	84 60       	ori	r24, 0x04	; 4
    113c:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
    113e:	a5 e5       	ldi	r26, 0x55	; 85
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 e5       	ldi	r30, 0x55	; 85
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	87 7f       	andi	r24, 0xF7	; 247
    114a:	8c 93       	st	X, r24
    114c:	0e c0       	rjmp	.+28     	; 0x116a <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC10);
    114e:	a5 e5       	ldi	r26, 0x55	; 85
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e5       	ldi	r30, 0x55	; 85
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8b 7f       	andi	r24, 0xFB	; 251
    115a:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
    115c:	a5 e5       	ldi	r26, 0x55	; 85
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e5 e5       	ldi	r30, 0x55	; 85
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	87 7f       	andi	r24, 0xF7	; 247
    1168:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT1);
    116a:	ab e5       	ldi	r26, 0x5B	; 91
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e5       	ldi	r30, 0x5B	; 91
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 68       	ori	r24, 0x80	; 128
    1176:	8c 93       	st	X, r24
    1178:	25 c0       	rjmp	.+74     	; 0x11c4 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			switch (Copy_u8INTSense) {
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3c 83       	std	Y+4, r19	; 0x04
    1182:	2b 83       	std	Y+3, r18	; 0x03
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	31 f0       	breq	.+12     	; 0x1198 <INT_voidEnable+0x1ea>
    118c:	2b 81       	ldd	r18, Y+3	; 0x03
    118e:	3c 81       	ldd	r19, Y+4	; 0x04
    1190:	21 30       	cpi	r18, 0x01	; 1
    1192:	31 05       	cpc	r19, r1
    1194:	49 f0       	breq	.+18     	; 0x11a8 <INT_voidEnable+0x1fa>
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <INT_voidEnable+0x208>
				case INT_SENSE_FALLING_EDGE:
					MCUCSR = CLR_BIT(MCUCSR, ISC2);
    1198:	a4 e5       	ldi	r26, 0x54	; 84
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e4 e5       	ldi	r30, 0x54	; 84
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8f 7b       	andi	r24, 0xBF	; 191
    11a4:	8c 93       	st	X, r24
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <INT_voidEnable+0x208>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCSR = SET_BIT(MCUCSR, ISC2);
    11a8:	a4 e5       	ldi	r26, 0x54	; 84
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e4 e5       	ldi	r30, 0x54	; 84
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 64       	ori	r24, 0x40	; 64
    11b4:	8c 93       	st	X, r24
					break;

			}
			GICR = SET_BIT(GICR, INT2);
    11b6:	ab e5       	ldi	r26, 0x5B	; 91
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	eb e5       	ldi	r30, 0x5B	; 91
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	80 62       	ori	r24, 0x20	; 32
    11c2:	8c 93       	st	X, r24
			break;
	}
}
    11c4:	2a 96       	adiw	r28, 0x0a	; 10
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <INT_voidDisable>:
void INT_voidDisable(u8 Copy_u8INTIndex){
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <INT_voidDisable+0x6>
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex) {
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3b 83       	std	Y+3, r19	; 0x03
    11ec:	2a 83       	std	Y+2, r18	; 0x02
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	91 05       	cpc	r25, r1
    11f6:	89 f0       	breq	.+34     	; 0x121a <INT_voidDisable+0x44>
    11f8:	2a 81       	ldd	r18, Y+2	; 0x02
    11fa:	3b 81       	ldd	r19, Y+3	; 0x03
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	a1 f0       	breq	.+40     	; 0x122a <INT_voidDisable+0x54>
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	9b 81       	ldd	r25, Y+3	; 0x03
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	b9 f4       	brne	.+46     	; 0x1238 <INT_voidDisable+0x62>
		case INT_INT0:
			GICR = CLR_BIT(GICR, INT0);
    120a:	ab e5       	ldi	r26, 0x5B	; 91
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e5       	ldi	r30, 0x5B	; 91
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	8f 7b       	andi	r24, 0xBF	; 191
    1216:	8c 93       	st	X, r24
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <INT_voidDisable+0x62>
			break;

		case INT_INT1:
			GICR = CLR_BIT(GICR, INT1);
    121a:	ab e5       	ldi	r26, 0x5B	; 91
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	eb e5       	ldi	r30, 0x5B	; 91
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8f 77       	andi	r24, 0x7F	; 127
    1226:	8c 93       	st	X, r24
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <INT_voidDisable+0x62>
			break;

		case INT_INT2:
			GICR = CLR_BIT(GICR, INT2);
    122a:	ab e5       	ldi	r26, 0x5B	; 91
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	eb e5       	ldi	r30, 0x5B	; 91
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 7d       	andi	r24, 0xDF	; 223
    1236:	8c 93       	st	X, r24
			break;
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <INT_voidSetCallback>:

void INT_voidSetCallback(u8 Copy_u8INTIndex, ptrFunc_Iv_Ov ptr){
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <INT_voidSetCallback+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <INT_voidSetCallback+0x8>
    124c:	0f 92       	push	r0
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	7b 83       	std	Y+3, r23	; 0x03
    1256:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex) {
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3d 83       	std	Y+5, r19	; 0x05
    1260:	2c 83       	std	Y+4, r18	; 0x04
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	81 f0       	breq	.+32     	; 0x128c <INT_voidSetCallback+0x48>
    126c:	2c 81       	ldd	r18, Y+4	; 0x04
    126e:	3d 81       	ldd	r19, Y+5	; 0x05
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	91 f0       	breq	.+36     	; 0x129a <INT_voidSetCallback+0x56>
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	a1 f4       	brne	.+40     	; 0x12a6 <INT_voidSetCallback+0x62>
		case INT_INT0:
			Global_ISR_INT0_ptr = ptr;
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	90 93 91 00 	sts	0x0091, r25
    1286:	80 93 90 00 	sts	0x0090, r24
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <INT_voidSetCallback+0x62>
			break;

		case INT_INT1:
			Global_ISR_INT1_ptr = ptr;
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	90 93 93 00 	sts	0x0093, r25
    1294:	80 93 92 00 	sts	0x0092, r24
    1298:	06 c0       	rjmp	.+12     	; 0x12a6 <INT_voidSetCallback+0x62>
			break;

		case INT_INT2:
			Global_ISR_INT2_ptr = ptr;
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	90 93 95 00 	sts	0x0095, r25
    12a2:	80 93 94 00 	sts	0x0094, r24
			break;
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <__vector_1>:

ISR(INT0_vect){
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_INT0_ptr != NULL){
    12e0:	80 91 90 00 	lds	r24, 0x0090
    12e4:	90 91 91 00 	lds	r25, 0x0091
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	29 f0       	breq	.+10     	; 0x12f6 <__vector_1+0x40>
		Global_ISR_INT0_ptr();
    12ec:	e0 91 90 00 	lds	r30, 0x0090
    12f0:	f0 91 91 00 	lds	r31, 0x0091
    12f4:	09 95       	icall
	}
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	ff 91       	pop	r31
    12fc:	ef 91       	pop	r30
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	7f 91       	pop	r23
    1308:	6f 91       	pop	r22
    130a:	5f 91       	pop	r21
    130c:	4f 91       	pop	r20
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <__vector_2>:

ISR(INT1_vect){
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	0f 92       	push	r0
    1324:	11 24       	eor	r1, r1
    1326:	2f 93       	push	r18
    1328:	3f 93       	push	r19
    132a:	4f 93       	push	r20
    132c:	5f 93       	push	r21
    132e:	6f 93       	push	r22
    1330:	7f 93       	push	r23
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_INT1_ptr != NULL){
    1346:	80 91 92 00 	lds	r24, 0x0092
    134a:	90 91 93 00 	lds	r25, 0x0093
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	29 f0       	breq	.+10     	; 0x135c <__vector_2+0x40>
		Global_ISR_INT1_ptr();
    1352:	e0 91 92 00 	lds	r30, 0x0092
    1356:	f0 91 93 00 	lds	r31, 0x0093
    135a:	09 95       	icall
	}
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <__vector_3>:

ISR(INT2_vect){
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_INT2_ptr != NULL){
    13ac:	80 91 94 00 	lds	r24, 0x0094
    13b0:	90 91 95 00 	lds	r25, 0x0095
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	29 f0       	breq	.+10     	; 0x13c2 <__vector_3+0x40>
		Global_ISR_INT2_ptr();
    13b8:	e0 91 94 00 	lds	r30, 0x0094
    13bc:	f0 91 95 00 	lds	r31, 0x0095
    13c0:	09 95       	icall
	}
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	ff 91       	pop	r31
    13c8:	ef 91       	pop	r30
    13ca:	bf 91       	pop	r27
    13cc:	af 91       	pop	r26
    13ce:	9f 91       	pop	r25
    13d0:	8f 91       	pop	r24
    13d2:	7f 91       	pop	r23
    13d4:	6f 91       	pop	r22
    13d6:	5f 91       	pop	r21
    13d8:	4f 91       	pop	r20
    13da:	3f 91       	pop	r19
    13dc:	2f 91       	pop	r18
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <DIO_voidSetPinDirection>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	29 97       	sbiw	r28, 0x09	; 9
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	6a 83       	std	Y+2, r22	; 0x02
    1400:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	88 30       	cpi	r24, 0x08	; 8
    1406:	08 f0       	brcs	.+2      	; 0x140a <DIO_voidSetPinDirection+0x22>
    1408:	ac c1       	rjmp	.+856    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
		if (Copy_u8Direction == DIO_PIN_OUTPUT){
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	09 f0       	breq	.+2      	; 0x1412 <DIO_voidSetPinDirection+0x2a>
    1410:	6f c0       	rjmp	.+222    	; 0x14f0 <DIO_voidSetPinDirection+0x108>
			switch(Copy_u8Port){
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	39 87       	std	Y+9, r19	; 0x09
    141a:	28 87       	std	Y+8, r18	; 0x08
    141c:	88 85       	ldd	r24, Y+8	; 0x08
    141e:	99 85       	ldd	r25, Y+9	; 0x09
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	49 f1       	breq	.+82     	; 0x1478 <DIO_voidSetPinDirection+0x90>
    1426:	28 85       	ldd	r18, Y+8	; 0x08
    1428:	39 85       	ldd	r19, Y+9	; 0x09
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	2c f4       	brge	.+10     	; 0x143a <DIO_voidSetPinDirection+0x52>
    1430:	88 85       	ldd	r24, Y+8	; 0x08
    1432:	99 85       	ldd	r25, Y+9	; 0x09
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	61 f0       	breq	.+24     	; 0x1450 <DIO_voidSetPinDirection+0x68>
    1438:	94 c1       	rjmp	.+808    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
    143a:	28 85       	ldd	r18, Y+8	; 0x08
    143c:	39 85       	ldd	r19, Y+9	; 0x09
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	71 f1       	breq	.+92     	; 0x14a0 <DIO_voidSetPinDirection+0xb8>
    1444:	88 85       	ldd	r24, Y+8	; 0x08
    1446:	99 85       	ldd	r25, Y+9	; 0x09
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	e9 f1       	breq	.+122    	; 0x14c8 <DIO_voidSetPinDirection+0xe0>
    144e:	89 c1       	rjmp	.+786    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = SET_BIT(DDRA,Copy_u8Pin); break;
    1450:	aa e3       	ldi	r26, 0x3A	; 58
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ea e3       	ldi	r30, 0x3A	; 58
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_voidSetPinDirection+0x86>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_voidSetPinDirection+0x82>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	75 c1       	rjmp	.+746    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = SET_BIT(DDRB,Copy_u8Pin); break;
    1478:	a7 e3       	ldi	r26, 0x37	; 55
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e7 e3       	ldi	r30, 0x37	; 55
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_voidSetPinDirection+0xae>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_voidSetPinDirection+0xaa>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	61 c1       	rjmp	.+706    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = SET_BIT(DDRC,Copy_u8Pin); break;
    14a0:	a4 e3       	ldi	r26, 0x34	; 52
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e4 e3       	ldi	r30, 0x34	; 52
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_voidSetPinDirection+0xd6>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DIO_voidSetPinDirection+0xd2>
    14c2:	84 2b       	or	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	4d c1       	rjmp	.+666    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = SET_BIT(DDRD,Copy_u8Pin); break;
    14c8:	a1 e3       	ldi	r26, 0x31	; 49
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e1 e3       	ldi	r30, 0x31	; 49
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_voidSetPinDirection+0xfe>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_voidSetPinDirection+0xfa>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	39 c1       	rjmp	.+626    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT){
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 23       	and	r24, r24
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <DIO_voidSetPinDirection+0x110>
    14f6:	74 c0       	rjmp	.+232    	; 0x15e0 <DIO_voidSetPinDirection+0x1f8>
			switch(Copy_u8Port){
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3f 83       	std	Y+7, r19	; 0x07
    1500:	2e 83       	std	Y+6, r18	; 0x06
    1502:	8e 81       	ldd	r24, Y+6	; 0x06
    1504:	9f 81       	ldd	r25, Y+7	; 0x07
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	59 f1       	breq	.+86     	; 0x1562 <DIO_voidSetPinDirection+0x17a>
    150c:	2e 81       	ldd	r18, Y+6	; 0x06
    150e:	3f 81       	ldd	r19, Y+7	; 0x07
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <DIO_voidSetPinDirection+0x138>
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	9f 81       	ldd	r25, Y+7	; 0x07
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	69 f0       	breq	.+26     	; 0x1538 <DIO_voidSetPinDirection+0x150>
    151e:	21 c1       	rjmp	.+578    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
    1520:	2e 81       	ldd	r18, Y+6	; 0x06
    1522:	3f 81       	ldd	r19, Y+7	; 0x07
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	89 f1       	breq	.+98     	; 0x158c <DIO_voidSetPinDirection+0x1a4>
    152a:	8e 81       	ldd	r24, Y+6	; 0x06
    152c:	9f 81       	ldd	r25, Y+7	; 0x07
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <DIO_voidSetPinDirection+0x14e>
    1534:	40 c0       	rjmp	.+128    	; 0x15b6 <DIO_voidSetPinDirection+0x1ce>
    1536:	15 c1       	rjmp	.+554    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); break;
    1538:	aa e3       	ldi	r26, 0x3A	; 58
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	ea e3       	ldi	r30, 0x3A	; 58
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_voidSetPinDirection+0x16e>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_voidSetPinDirection+0x16a>
    155a:	80 95       	com	r24
    155c:	84 23       	and	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	00 c1       	rjmp	.+512    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); break;
    1562:	a7 e3       	ldi	r26, 0x37	; 55
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e7 e3       	ldi	r30, 0x37	; 55
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_voidSetPinDirection+0x198>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_voidSetPinDirection+0x194>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	eb c0       	rjmp	.+470    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); break;
    158c:	a4 e3       	ldi	r26, 0x34	; 52
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_voidSetPinDirection+0x1c2>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_voidSetPinDirection+0x1be>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	d6 c0       	rjmp	.+428    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); break;
    15b6:	a1 e3       	ldi	r26, 0x31	; 49
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e1 e3       	ldi	r30, 0x31	; 49
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidSetPinDirection+0x1ec>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidSetPinDirection+0x1e8>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	c1 c0       	rjmp	.+386    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				default:	return;	/*do nothing*/
			}			
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT_PULLUP){
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <DIO_voidSetPinDirection+0x200>
    15e6:	bd c0       	rjmp	.+378    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
			switch(Copy_u8Port){
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3d 83       	std	Y+5, r19	; 0x05
    15f0:	2c 83       	std	Y+4, r18	; 0x04
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <DIO_voidSetPinDirection+0x216>
    15fc:	3e c0       	rjmp	.+124    	; 0x167a <DIO_voidSetPinDirection+0x292>
    15fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1600:	3d 81       	ldd	r19, Y+5	; 0x05
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	2c f4       	brge	.+10     	; 0x1612 <DIO_voidSetPinDirection+0x22a>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	71 f0       	breq	.+28     	; 0x162c <DIO_voidSetPinDirection+0x244>
    1610:	a8 c0       	rjmp	.+336    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
    1612:	2c 81       	ldd	r18, Y+4	; 0x04
    1614:	3d 81       	ldd	r19, Y+5	; 0x05
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <DIO_voidSetPinDirection+0x236>
    161c:	55 c0       	rjmp	.+170    	; 0x16c8 <DIO_voidSetPinDirection+0x2e0>
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <DIO_voidSetPinDirection+0x242>
    1628:	76 c0       	rjmp	.+236    	; 0x1716 <DIO_voidSetPinDirection+0x32e>
    162a:	9b c0       	rjmp	.+310    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); PORTA = SET_BIT(PORTA,Copy_u8Pin);break;
    162c:	aa e3       	ldi	r26, 0x3A	; 58
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ea e3       	ldi	r30, 0x3A	; 58
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_voidSetPinDirection+0x260>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	2a 95       	dec	r18
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_voidSetPinDirection+0x25c>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	ab e3       	ldi	r26, 0x3B	; 59
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_voidSetPinDirection+0x288>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_voidSetPinDirection+0x284>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	74 c0       	rjmp	.+232    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); PORTB = SET_BIT(PORTB,Copy_u8Pin);break;
    167a:	a7 e3       	ldi	r26, 0x37	; 55
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e7 e3       	ldi	r30, 0x37	; 55
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_voidSetPinDirection+0x2ae>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	2a 95       	dec	r18
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <DIO_voidSetPinDirection+0x2aa>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	a8 e3       	ldi	r26, 0x38	; 56
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e8 e3       	ldi	r30, 0x38	; 56
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_voidSetPinDirection+0x2d6>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_voidSetPinDirection+0x2d2>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	4d c0       	rjmp	.+154    	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); PORTC = SET_BIT(PORTC,Copy_u8Pin);break;
    16c8:	a4 e3       	ldi	r26, 0x34	; 52
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e4 e3       	ldi	r30, 0x34	; 52
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_voidSetPinDirection+0x2fc>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_voidSetPinDirection+0x2f8>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	a5 e3       	ldi	r26, 0x35	; 53
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e5 e3       	ldi	r30, 0x35	; 53
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_voidSetPinDirection+0x324>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_voidSetPinDirection+0x320>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	26 c0       	rjmp	.+76     	; 0x1762 <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); PORTD = SET_BIT(PORTD,Copy_u8Pin);break;
    1716:	a1 e3       	ldi	r26, 0x31	; 49
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e1 e3       	ldi	r30, 0x31	; 49
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_voidSetPinDirection+0x34a>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	2a 95       	dec	r18
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_voidSetPinDirection+0x346>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	a2 e3       	ldi	r26, 0x32	; 50
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e2 e3       	ldi	r30, 0x32	; 50
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_voidSetPinDirection+0x372>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_voidSetPinDirection+0x36e>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
		
	}
	else{
		/*do nothing*/
	}
}
    1762:	29 96       	adiw	r28, 0x09	; 9
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	27 97       	sbiw	r28, 0x07	; 7
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	6a 83       	std	Y+2, r22	; 0x02
    178c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 30       	cpi	r24, 0x08	; 8
    1792:	08 f0       	brcs	.+2      	; 0x1796 <DIO_voidSetPinValue+0x22>
    1794:	ea c0       	rjmp	.+468    	; 0x196a <DIO_voidSetPinValue+0x1f6>
		if (Copy_u8Value == DIO_HIGH){
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	09 f0       	breq	.+2      	; 0x179e <DIO_voidSetPinValue+0x2a>
    179c:	6f c0       	rjmp	.+222    	; 0x187c <DIO_voidSetPinValue+0x108>
			switch(Copy_u8Port){
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3f 83       	std	Y+7, r19	; 0x07
    17a6:	2e 83       	std	Y+6, r18	; 0x06
    17a8:	8e 81       	ldd	r24, Y+6	; 0x06
    17aa:	9f 81       	ldd	r25, Y+7	; 0x07
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	91 05       	cpc	r25, r1
    17b0:	49 f1       	breq	.+82     	; 0x1804 <DIO_voidSetPinValue+0x90>
    17b2:	2e 81       	ldd	r18, Y+6	; 0x06
    17b4:	3f 81       	ldd	r19, Y+7	; 0x07
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <DIO_voidSetPinValue+0x52>
    17bc:	8e 81       	ldd	r24, Y+6	; 0x06
    17be:	9f 81       	ldd	r25, Y+7	; 0x07
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	61 f0       	breq	.+24     	; 0x17dc <DIO_voidSetPinValue+0x68>
    17c4:	d2 c0       	rjmp	.+420    	; 0x196a <DIO_voidSetPinValue+0x1f6>
    17c6:	2e 81       	ldd	r18, Y+6	; 0x06
    17c8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	71 f1       	breq	.+92     	; 0x182c <DIO_voidSetPinValue+0xb8>
    17d0:	8e 81       	ldd	r24, Y+6	; 0x06
    17d2:	9f 81       	ldd	r25, Y+7	; 0x07
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	91 05       	cpc	r25, r1
    17d8:	e9 f1       	breq	.+122    	; 0x1854 <DIO_voidSetPinValue+0xe0>
    17da:	c7 c0       	rjmp	.+398    	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = SET_BIT(PORTA,Copy_u8Pin); break;
    17dc:	ab e3       	ldi	r26, 0x3B	; 59
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_voidSetPinValue+0x86>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_voidSetPinValue+0x82>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	b3 c0       	rjmp	.+358    	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = SET_BIT(PORTB,Copy_u8Pin); break;
    1804:	a8 e3       	ldi	r26, 0x38	; 56
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e8 e3       	ldi	r30, 0x38	; 56
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_voidSetPinValue+0xae>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_voidSetPinValue+0xaa>
    1826:	84 2b       	or	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	9f c0       	rjmp	.+318    	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = SET_BIT(PORTC,Copy_u8Pin); break;
    182c:	a5 e3       	ldi	r26, 0x35	; 53
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e3       	ldi	r30, 0x35	; 53
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <DIO_voidSetPinValue+0xd6>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <DIO_voidSetPinValue+0xd2>
    184e:	84 2b       	or	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	8b c0       	rjmp	.+278    	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = SET_BIT(PORTD,Copy_u8Pin); break;
    1854:	a2 e3       	ldi	r26, 0x32	; 50
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e2 e3       	ldi	r30, 0x32	; 50
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_voidSetPinValue+0xfe>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_voidSetPinValue+0xfa>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	77 c0       	rjmp	.+238    	; 0x196a <DIO_voidSetPinValue+0x1f6>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Value == DIO_LOW){
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	88 23       	and	r24, r24
    1880:	09 f0       	breq	.+2      	; 0x1884 <DIO_voidSetPinValue+0x110>
    1882:	73 c0       	rjmp	.+230    	; 0x196a <DIO_voidSetPinValue+0x1f6>
			switch(Copy_u8Port){
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3d 83       	std	Y+5, r19	; 0x05
    188c:	2c 83       	std	Y+4, r18	; 0x04
    188e:	8c 81       	ldd	r24, Y+4	; 0x04
    1890:	9d 81       	ldd	r25, Y+5	; 0x05
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	59 f1       	breq	.+86     	; 0x18ee <DIO_voidSetPinValue+0x17a>
    1898:	2c 81       	ldd	r18, Y+4	; 0x04
    189a:	3d 81       	ldd	r19, Y+5	; 0x05
    189c:	22 30       	cpi	r18, 0x02	; 2
    189e:	31 05       	cpc	r19, r1
    18a0:	2c f4       	brge	.+10     	; 0x18ac <DIO_voidSetPinValue+0x138>
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f0       	breq	.+26     	; 0x18c4 <DIO_voidSetPinValue+0x150>
    18aa:	5f c0       	rjmp	.+190    	; 0x196a <DIO_voidSetPinValue+0x1f6>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	89 f1       	breq	.+98     	; 0x1918 <DIO_voidSetPinValue+0x1a4>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <DIO_voidSetPinValue+0x14e>
    18c0:	40 c0       	rjmp	.+128    	; 0x1942 <DIO_voidSetPinValue+0x1ce>
    18c2:	53 c0       	rjmp	.+166    	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = CLR_BIT(PORTA,Copy_u8Pin); break;
    18c4:	ab e3       	ldi	r26, 0x3B	; 59
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	eb e3       	ldi	r30, 0x3B	; 59
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_voidSetPinValue+0x16e>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_voidSetPinValue+0x16a>
    18e6:	80 95       	com	r24
    18e8:	84 23       	and	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	3e c0       	rjmp	.+124    	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = CLR_BIT(PORTB,Copy_u8Pin); break;
    18ee:	a8 e3       	ldi	r26, 0x38	; 56
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e8 e3       	ldi	r30, 0x38	; 56
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_voidSetPinValue+0x198>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_voidSetPinValue+0x194>
    1910:	80 95       	com	r24
    1912:	84 23       	and	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	29 c0       	rjmp	.+82     	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = CLR_BIT(PORTC,Copy_u8Pin); break;
    1918:	a5 e3       	ldi	r26, 0x35	; 53
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e5 e3       	ldi	r30, 0x35	; 53
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_voidSetPinValue+0x1c2>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_voidSetPinValue+0x1be>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	14 c0       	rjmp	.+40     	; 0x196a <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = CLR_BIT(PORTD,Copy_u8Pin); break;
    1942:	a2 e3       	ldi	r26, 0x32	; 50
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e2 e3       	ldi	r30, 0x32	; 50
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_voidSetPinValue+0x1ec>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_voidSetPinValue+0x1e8>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}	
}
    196a:	27 96       	adiw	r28, 0x07	; 7
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_voidTogglePinValue+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <DIO_voidTogglePinValue+0x8>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	08 f0       	brcs	.+2      	; 0x1994 <DIO_voidTogglePinValue+0x18>
    1992:	6e c0       	rjmp	.+220    	; 0x1a70 <DIO_voidTogglePinValue+0xf4>
			switch(Copy_u8Port){
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3c 83       	std	Y+4, r19	; 0x04
    199c:	2b 83       	std	Y+3, r18	; 0x03
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	91 05       	cpc	r25, r1
    19a6:	49 f1       	breq	.+82     	; 0x19fa <DIO_voidTogglePinValue+0x7e>
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	2c f4       	brge	.+10     	; 0x19bc <DIO_voidTogglePinValue+0x40>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	61 f0       	breq	.+24     	; 0x19d2 <DIO_voidTogglePinValue+0x56>
    19ba:	5a c0       	rjmp	.+180    	; 0x1a70 <DIO_voidTogglePinValue+0xf4>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	71 f1       	breq	.+92     	; 0x1a22 <DIO_voidTogglePinValue+0xa6>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	83 30       	cpi	r24, 0x03	; 3
    19cc:	91 05       	cpc	r25, r1
    19ce:	e9 f1       	breq	.+122    	; 0x1a4a <DIO_voidTogglePinValue+0xce>
    19d0:	4f c0       	rjmp	.+158    	; 0x1a70 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTA: PORTA = TGL_BIT(PORTA,Copy_u8Pin); break;
    19d2:	ab e3       	ldi	r26, 0x3B	; 59
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e3       	ldi	r30, 0x3B	; 59
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_voidTogglePinValue+0x74>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_voidTogglePinValue+0x70>
    19f4:	84 27       	eor	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	3b c0       	rjmp	.+118    	; 0x1a70 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTB: PORTB = TGL_BIT(PORTB,Copy_u8Pin); break;
    19fa:	a8 e3       	ldi	r26, 0x38	; 56
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e8 e3       	ldi	r30, 0x38	; 56
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_voidTogglePinValue+0x9c>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_voidTogglePinValue+0x98>
    1a1c:	84 27       	eor	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	27 c0       	rjmp	.+78     	; 0x1a70 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTC: PORTC = TGL_BIT(PORTC,Copy_u8Pin); break;
    1a22:	a5 e3       	ldi	r26, 0x35	; 53
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e3       	ldi	r30, 0x35	; 53
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <DIO_voidTogglePinValue+0xc4>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <DIO_voidTogglePinValue+0xc0>
    1a44:	84 27       	eor	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	13 c0       	rjmp	.+38     	; 0x1a70 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTD: PORTD = TGL_BIT(PORTD,Copy_u8Pin); break;
    1a4a:	a2 e3       	ldi	r26, 0x32	; 50
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e2 e3       	ldi	r30, 0x32	; 50
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <DIO_voidTogglePinValue+0xec>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <DIO_voidTogglePinValue+0xe8>
    1a6c:	84 27       	eor	r24, r20
    1a6e:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}
}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <DIO_u8GetPinValue+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <DIO_u8GetPinValue+0x8>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <DIO_u8GetPinValue+0xa>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	88 30       	cpi	r24, 0x08	; 8
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <DIO_u8GetPinValue+0x1a>
    1a96:	6f c0       	rjmp	.+222    	; 0x1b76 <DIO_u8GetPinValue+0xf8>
		switch(Copy_u8Port){
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3d 83       	std	Y+5, r19	; 0x05
    1aa0:	2c 83       	std	Y+4, r18	; 0x04
    1aa2:	4c 81       	ldd	r20, Y+4	; 0x04
    1aa4:	5d 81       	ldd	r21, Y+5	; 0x05
    1aa6:	41 30       	cpi	r20, 0x01	; 1
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	49 f1       	breq	.+82     	; 0x1afe <DIO_u8GetPinValue+0x80>
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	34 f4       	brge	.+12     	; 0x1ac2 <DIO_u8GetPinValue+0x44>
    1ab6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aba:	21 15       	cp	r18, r1
    1abc:	31 05       	cpc	r19, r1
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <DIO_u8GetPinValue+0x5a>
    1ac0:	57 c0       	rjmp	.+174    	; 0x1b70 <DIO_u8GetPinValue+0xf2>
    1ac2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ac4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ac6:	42 30       	cpi	r20, 0x02	; 2
    1ac8:	51 05       	cpc	r21, r1
    1aca:	61 f1       	breq	.+88     	; 0x1b24 <DIO_u8GetPinValue+0xa6>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	d1 f1       	breq	.+116    	; 0x1b4a <DIO_u8GetPinValue+0xcc>
    1ad6:	4c c0       	rjmp	.+152    	; 0x1b70 <DIO_u8GetPinValue+0xf2>
			case DIO_PORTA: return GET_BIT(PINA,Copy_u8Pin); 
    1ad8:	e9 e3       	ldi	r30, 0x39	; 57
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_u8GetPinValue+0x72>
    1aec:	55 95       	asr	r21
    1aee:	47 95       	ror	r20
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_u8GetPinValue+0x6e>
    1af4:	ca 01       	movw	r24, r20
    1af6:	58 2f       	mov	r21, r24
    1af8:	51 70       	andi	r21, 0x01	; 1
    1afa:	5b 83       	std	Y+3, r21	; 0x03
    1afc:	3d c0       	rjmp	.+122    	; 0x1b78 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTB: return GET_BIT(PINB,Copy_u8Pin);
    1afe:	e6 e3       	ldi	r30, 0x36	; 54
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a9 01       	movw	r20, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_u8GetPinValue+0x98>
    1b12:	55 95       	asr	r21
    1b14:	47 95       	ror	r20
    1b16:	8a 95       	dec	r24
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_u8GetPinValue+0x94>
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	58 2f       	mov	r21, r24
    1b1e:	51 70       	andi	r21, 0x01	; 1
    1b20:	5b 83       	std	Y+3, r21	; 0x03
    1b22:	2a c0       	rjmp	.+84     	; 0x1b78 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTC: return GET_BIT(PINC,Copy_u8Pin); 
    1b24:	e3 e3       	ldi	r30, 0x33	; 51
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a9 01       	movw	r20, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_u8GetPinValue+0xbe>
    1b38:	55 95       	asr	r21
    1b3a:	47 95       	ror	r20
    1b3c:	8a 95       	dec	r24
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_u8GetPinValue+0xba>
    1b40:	ca 01       	movw	r24, r20
    1b42:	58 2f       	mov	r21, r24
    1b44:	51 70       	andi	r21, 0x01	; 1
    1b46:	5b 83       	std	Y+3, r21	; 0x03
    1b48:	17 c0       	rjmp	.+46     	; 0x1b78 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTD: return GET_BIT(PIND,Copy_u8Pin); 
    1b4a:	e0 e3       	ldi	r30, 0x30	; 48
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_u8GetPinValue+0xe4>
    1b5e:	55 95       	asr	r21
    1b60:	47 95       	ror	r20
    1b62:	8a 95       	dec	r24
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_u8GetPinValue+0xe0>
    1b66:	ca 01       	movw	r24, r20
    1b68:	58 2f       	mov	r21, r24
    1b6a:	51 70       	andi	r21, 0x01	; 1
    1b6c:	5b 83       	std	Y+3, r21	; 0x03
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <DIO_u8GetPinValue+0xfa>
			default       :	return 0xff;              /*as a wrong entry*/						
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	8b 83       	std	Y+3, r24	; 0x03
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <DIO_u8GetPinValue+0xfa>
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_u8GetPinValue+0xfe>
		}
	}
	else{
		/*do nothing*/
	}	
}
    1b78:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7e:	26 96       	adiw	r28, 0x06	; 6
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port, u8 Copy_u8DirValue){
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_voidSetPortDirection+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <DIO_voidSetPortDirection+0x8>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3c 83       	std	Y+4, r19	; 0x04
    1ba8:	2b 83       	std	Y+3, r18	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	d1 f0       	breq	.+52     	; 0x1be8 <DIO_voidSetPortDirection+0x58>
    1bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <DIO_voidSetPortDirection+0x38>
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	61 f0       	breq	.+24     	; 0x1bde <DIO_voidSetPortDirection+0x4e>
    1bc6:	1e c0       	rjmp	.+60     	; 0x1c04 <DIO_voidSetPortDirection+0x74>
    1bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bca:	3c 81       	ldd	r19, Y+4	; 0x04
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	81 f0       	breq	.+32     	; 0x1bf2 <DIO_voidSetPortDirection+0x62>
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	83 30       	cpi	r24, 0x03	; 3
    1bd8:	91 05       	cpc	r25, r1
    1bda:	81 f0       	breq	.+32     	; 0x1bfc <DIO_voidSetPortDirection+0x6c>
    1bdc:	13 c0       	rjmp	.+38     	; 0x1c04 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTA: DDRA = Copy_u8DirValue; break;
    1bde:	ea e3       	ldi	r30, 0x3A	; 58
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 83       	st	Z, r24
    1be6:	0e c0       	rjmp	.+28     	; 0x1c04 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB: DDRB = Copy_u8DirValue; break;
    1be8:	e7 e3       	ldi	r30, 0x37	; 55
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC: DDRC = Copy_u8DirValue; break;
    1bf2:	e4 e3       	ldi	r30, 0x34	; 52
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	80 83       	st	Z, r24
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD: DDRD = Copy_u8DirValue; break;
    1bfc:	e1 e3       	ldi	r30, 0x31	; 49
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <DIO_voidSetPortValue+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <DIO_voidSetPortValue+0x8>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	d1 f0       	breq	.+52     	; 0x1c6a <DIO_voidSetPortValue+0x58>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <DIO_voidSetPortValue+0x38>
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	61 f0       	breq	.+24     	; 0x1c60 <DIO_voidSetPortValue+0x4e>
    1c48:	1e c0       	rjmp	.+60     	; 0x1c86 <DIO_voidSetPortValue+0x74>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <DIO_voidSetPortValue+0x62>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	81 f0       	breq	.+32     	; 0x1c7e <DIO_voidSetPortValue+0x6c>
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <DIO_voidSetPortValue+0x74>
		case DIO_PORTA: PORTA = Copy_u8Value; break;
    1c60:	eb e3       	ldi	r30, 0x3B	; 59
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB: PORTB = Copy_u8Value; break;
    1c6a:	e8 e3       	ldi	r30, 0x38	; 56
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	80 83       	st	Z, r24
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC: PORTC = Copy_u8Value; break;
    1c74:	e5 e3       	ldi	r30, 0x35	; 53
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 83       	st	Z, r24
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD: PORTD = Copy_u8Value; break;
    1c7e:	e2 e3       	ldi	r30, 0x32	; 50
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
		
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <ADC_voidInit>:
#define ADC_REF_AREF	1
#define ADC_REF_INTERNAL_2V56	2

#include "ADC.h"

void ADC_voidInit(u8 Copy_u8Prescaler){
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	/*Enable ADC*/
	ADCSRA = SET_BIT(ADCSRA, ADEN);
    1ca0:	a6 e2       	ldi	r26, 0x26	; 38
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e6 e2       	ldi	r30, 0x26	; 38
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 68       	ori	r24, 0x80	; 128
    1cac:	8c 93       	st	X, r24
	ADCSRA &= (0b11111000 | Copy_u8Prescaler);
    1cae:	a6 e2       	ldi	r26, 0x26	; 38
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e6 e2       	ldi	r30, 0x26	; 38
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	90 81       	ld	r25, Z
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	88 6f       	ori	r24, 0xF8	; 248
    1cbc:	89 23       	and	r24, r25
    1cbe:	8c 93       	st	X, r24
//	ADCSRA |= Copy_u8Prescaler;

	/*Select VREF*/
	/*ADMUX REFS1,REFS0*/
	#if ADC_REF_VOLTEAGE == ADC_REF_AVCC
		ADMUX = SET_BIT(ADMUX, REFS0);
    1cc0:	a7 e2       	ldi	r26, 0x27	; 39
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e7 e2       	ldi	r30, 0x27	; 39
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 64       	ori	r24, 0x40	; 64
    1ccc:	8c 93       	st	X, r24
		ADMUX = CLR_BIT(ADMUX, REFS1);
    1cce:	a7 e2       	ldi	r26, 0x27	; 39
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e7 e2       	ldi	r30, 0x27	; 39
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 77       	andi	r24, 0x7F	; 127
    1cda:	8c 93       	st	X, r24
		ADMUX = SET_BIT(ADMUX, REFS0);
		ADMUX = SET_BIT(ADMUX, REFS1);
	#endif

	/*select right adjust*/
	ADMUX = CLR_BIT(ADMUX, ADLAR);
    1cdc:	a7 e2       	ldi	r26, 0x27	; 39
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e7 e2       	ldi	r30, 0x27	; 39
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 7d       	andi	r24, 0xDF	; 223
    1ce8:	8c 93       	st	X, r24



}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <ADC_u16GetDigitalValue>:

u16 ADC_u16GetDigitalValue (u8 Copy_u8Channel){
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <ADC_u16GetDigitalValue+0x6>
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	ADMUX &= 0b11100000;
    1cfe:	a7 e2       	ldi	r26, 0x27	; 39
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e7 e2       	ldi	r30, 0x27	; 39
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	80 7e       	andi	r24, 0xE0	; 224
    1d0a:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
    1d0c:	a7 e2       	ldi	r26, 0x27	; 39
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e7 e2       	ldi	r30, 0x27	; 39
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	90 81       	ld	r25, Z
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	89 2b       	or	r24, r25
    1d1a:	8c 93       	st	X, r24

	/*Start Conversion*/
	ADCSRA = SET_BIT(ADCSRA, ADSC);
    1d1c:	a6 e2       	ldi	r26, 0x26	; 38
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e6 e2       	ldi	r30, 0x26	; 38
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	80 64       	ori	r24, 0x40	; 64
    1d28:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA, ADIF) == 0); // Wait
    1d2a:	e6 e2       	ldi	r30, 0x26	; 38
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z

	ADCSRA = CLR_BIT(ADCSRA,ADIF);
    1d30:	a6 e2       	ldi	r26, 0x26	; 38
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e6 e2       	ldi	r30, 0x26	; 38
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7e       	andi	r24, 0xEF	; 239
    1d3c:	8c 93       	st	X, r24

	return ADC;
    1d3e:	e4 e2       	ldi	r30, 0x24	; 36
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <ADC_voidDisable>:

void ADC_voidDisable (void){
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = CLR_BIT(ADCSRA, ADEN);
    1d58:	a6 e2       	ldi	r26, 0x26	; 38
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e6 e2       	ldi	r30, 0x26	; 38
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 77       	andi	r24, 0x7F	; 127
    1d64:	8c 93       	st	X, r24

}
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <SSD_voidInitSingleDigit>:
#include "../../MCAL/DIO/DIO.h"
#include "../../HAL/SSD/SSD.h"

u8 SSD_mappingArray[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void SSD_voidInitSingleDigit(u8 Copy_u8Port){
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	0f 92       	push	r0
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection (Copy_u8Port, DIO_PORT_OUTPUT);
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	6f ef       	ldi	r22, 0xFF	; 255
    1d7c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPortDirection>
}
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <SSD_voidInitDoubleDigit>:

void SSD_voidInitDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU){
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <SSD_voidInitDoubleDigit+0x6>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortDirection (Copy_u8PortL, DIO_PORT_OUTPUT);
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	6f ef       	ldi	r22, 0xFF	; 255
    1d9a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection (Copy_u8PortU, DIO_PORT_OUTPUT);
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	6f ef       	ldi	r22, 0xFF	; 255
    1da2:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPortDirection>
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <SSD_voidWriteSingleDigit>:

void SSD_voidWriteSingleDigit(u8 Copy_u8Port, u8 Copy_u8Value){
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <SSD_voidWriteSingleDigit+0x6>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue (Copy_u8Port, SSD_mappingArray[Copy_u8Value]);
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e8 59       	subi	r30, 0x98	; 152
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	90 81       	ld	r25, Z
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	69 2f       	mov	r22, r25
    1dd0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPortValue>
//	DIO_voidSetPortValue (Copy_u8Port, 0xff);
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <SSD_voidWriteDoubleDigit>:

void SSD_voidWriteDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU, u8 Copy_u8Value){
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <SSD_voidWriteDoubleDigit+0x6>
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	6a 83       	std	Y+2, r22	; 0x02
    1dee:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPortValue (Copy_u8PortL, SSD_mappingArray[Copy_u8Value%10]);
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9a e0       	ldi	r25, 0x0A	; 10
    1df4:	69 2f       	mov	r22, r25
    1df6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__udivmodqi4>
    1dfa:	89 2f       	mov	r24, r25
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	fc 01       	movw	r30, r24
    1e02:	e8 59       	subi	r30, 0x98	; 152
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	90 81       	ld	r25, Z
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	69 2f       	mov	r22, r25
    1e0c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPortValue>
	DIO_voidSetPortValue (Copy_u8PortU, SSD_mappingArray[Copy_u8Value/10]);
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9a e0       	ldi	r25, 0x0A	; 10
    1e14:	69 2f       	mov	r22, r25
    1e16:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__udivmodqi4>
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e8 59       	subi	r30, 0x98	; 152
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	90 81       	ld	r25, Z
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	69 2f       	mov	r22, r25
    1e2a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPortValue>
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <LCD_voidInit>:
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"
#include <util/delay.h>

void LCD_voidInit (void){
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	cc 54       	subi	r28, 0x4C	; 76
    1e48:	d0 40       	sbci	r29, 0x00	; 0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection (LCD_DATA_PORT, DIO_PORT_OUTPUT);
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_PIN_OUTPUT);
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	67 e0       	ldi	r22, 0x07	; 7
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_PIN_OUTPUT);
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	66 e0       	ldi	r22, 0x06	; 6
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_PIN_OUTPUT);
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	65 e0       	ldi	r22, 0x05	; 5
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_voidSetPinDirection>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e7 5b       	subi	r30, 0xB7	; 183
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	ac e0       	ldi	r26, 0x0C	; 12
    1e86:	b2 e4       	ldi	r27, 0x42	; 66
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	8e 01       	movw	r16, r28
    1e92:	0b 5b       	subi	r16, 0xBB	; 187
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e7 5b       	subi	r30, 0xB7	; 183
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a ef       	ldi	r20, 0xFA	; 250
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	eb 5b       	subi	r30, 0xBB	; 187
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	44 f4       	brge	.+16     	; 0x1eec <LCD_voidInit+0xb2>
		__ticks = 1;
    1edc:	fe 01       	movw	r30, r28
    1ede:	ed 5b       	subi	r30, 0xBD	; 189
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	64 c0       	rjmp	.+200    	; 0x1fb4 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1eec:	fe 01       	movw	r30, r28
    1eee:	eb 5b       	subi	r30, 0xBB	; 187
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	60 81       	ld	r22, Z
    1ef4:	71 81       	ldd	r23, Z+1	; 0x01
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <LCD_voidInit+0xd2>
    1f0a:	43 c0       	rjmp	.+134    	; 0x1f92 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e7 5b       	subi	r30, 0xB7	; 183
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	0d 5b       	subi	r16, 0xBD	; 189
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	1f c0       	rjmp	.+62     	; 0x1f82 <LCD_voidInit+0x148>
    1f44:	fe 01       	movw	r30, r28
    1f46:	ef 5b       	subi	r30, 0xBF	; 191
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	88 ec       	ldi	r24, 0xC8	; 200
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f52:	fe 01       	movw	r30, r28
    1f54:	ef 5b       	subi	r30, 0xBF	; 191
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_voidInit+0x122>
    1f60:	fe 01       	movw	r30, r28
    1f62:	ef 5b       	subi	r30, 0xBF	; 191
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	de 01       	movw	r26, r28
    1f6c:	ad 5b       	subi	r26, 0xBD	; 189
    1f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f70:	fe 01       	movw	r30, r28
    1f72:	ed 5b       	subi	r30, 0xBD	; 189
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	11 96       	adiw	r26, 0x01	; 1
    1f7e:	9c 93       	st	X, r25
    1f80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	fe 01       	movw	r30, r28
    1f84:	ed 5b       	subi	r30, 0xBD	; 189
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	d1 f6       	brne	.-76     	; 0x1f44 <LCD_voidInit+0x10a>
    1f90:	24 c0       	rjmp	.+72     	; 0x1fda <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f92:	8e 01       	movw	r16, r28
    1f94:	0d 5b       	subi	r16, 0xBD	; 189
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	eb 5b       	subi	r30, 0xBB	; 187
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	f8 01       	movw	r30, r16
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ed 5b       	subi	r30, 0xBD	; 189
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	ff 96       	adiw	r30, 0x3f	; 63
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ff 96       	adiw	r30, 0x3f	; 63
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_voidInit+0x194>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ff 96       	adiw	r30, 0x3f	; 63
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24

	_delay_ms(35);

	LCD_voidSendCommand (LCD_CONTROL_FUNCTION_SET);
    1fda:	88 e3       	ldi	r24, 0x38	; 56
    1fdc:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <LCD_voidSendCommand>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a8 e4       	ldi	r26, 0x48	; 72
    1fe6:	b2 e4       	ldi	r27, 0x42	; 66
    1fe8:	8b af       	std	Y+59, r24	; 0x3b
    1fea:	9c af       	std	Y+60, r25	; 0x3c
    1fec:	ad af       	std	Y+61, r26	; 0x3d
    1fee:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ff0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ff2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ff4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ff6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff8:	2b ea       	ldi	r18, 0xAB	; 171
    1ffa:	3a ea       	ldi	r19, 0xAA	; 170
    1ffc:	4a e2       	ldi	r20, 0x2A	; 42
    1ffe:	50 e4       	ldi	r21, 0x40	; 64
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	8f ab       	std	Y+55, r24	; 0x37
    200a:	98 af       	std	Y+56, r25	; 0x38
    200c:	a9 af       	std	Y+57, r26	; 0x39
    200e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2010:	6f a9       	ldd	r22, Y+55	; 0x37
    2012:	78 ad       	ldd	r23, Y+56	; 0x38
    2014:	89 ad       	ldd	r24, Y+57	; 0x39
    2016:	9a ad       	ldd	r25, Y+58	; 0x3a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	1c f4       	brge	.+6      	; 0x202e <LCD_voidInit+0x1f4>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	8e ab       	std	Y+54, r24	; 0x36
    202c:	91 c0       	rjmp	.+290    	; 0x2150 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    202e:	6f a9       	ldd	r22, Y+55	; 0x37
    2030:	78 ad       	ldd	r23, Y+56	; 0x38
    2032:	89 ad       	ldd	r24, Y+57	; 0x39
    2034:	9a ad       	ldd	r25, Y+58	; 0x3a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	53 e4       	ldi	r21, 0x43	; 67
    203e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	0c f0       	brlt	.+2      	; 0x2048 <LCD_voidInit+0x20e>
    2046:	7b c0       	rjmp	.+246    	; 0x213e <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    2048:	6b ad       	ldd	r22, Y+59	; 0x3b
    204a:	7c ad       	ldd	r23, Y+60	; 0x3c
    204c:	8d ad       	ldd	r24, Y+61	; 0x3d
    204e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e7       	ldi	r20, 0x7A	; 122
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8a ab       	std	Y+50, r24	; 0x32
    2062:	9b ab       	std	Y+51, r25	; 0x33
    2064:	ac ab       	std	Y+52, r26	; 0x34
    2066:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6a a9       	ldd	r22, Y+50	; 0x32
    206a:	7b a9       	ldd	r23, Y+51	; 0x33
    206c:	8c a9       	ldd	r24, Y+52	; 0x34
    206e:	9d a9       	ldd	r25, Y+53	; 0x35
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8e a7       	std	Y+46, r24	; 0x2e
    2082:	9f a7       	std	Y+47, r25	; 0x2f
    2084:	a8 ab       	std	Y+48, r26	; 0x30
    2086:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2088:	6e a5       	ldd	r22, Y+46	; 0x2e
    208a:	7f a5       	ldd	r23, Y+47	; 0x2f
    208c:	88 a9       	ldd	r24, Y+48	; 0x30
    208e:	99 a9       	ldd	r25, Y+49	; 0x31
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <LCD_voidInit+0x270>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9d a7       	std	Y+45, r25	; 0x2d
    20a6:	8c a7       	std	Y+44, r24	; 0x2c
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    20aa:	6e a5       	ldd	r22, Y+46	; 0x2e
    20ac:	7f a5       	ldd	r23, Y+47	; 0x2f
    20ae:	88 a9       	ldd	r24, Y+48	; 0x30
    20b0:	99 a9       	ldd	r25, Y+49	; 0x31
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6a a9       	ldd	r22, Y+50	; 0x32
    20c4:	7b a9       	ldd	r23, Y+51	; 0x33
    20c6:	8c a9       	ldd	r24, Y+52	; 0x34
    20c8:	9d a9       	ldd	r25, Y+53	; 0x35
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9d a7       	std	Y+45, r25	; 0x2d
    20e8:	8c a7       	std	Y+44, r24	; 0x2c
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_voidInit+0x2d0>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9b a7       	std	Y+43, r25	; 0x2b
    20f2:	8a a7       	std	Y+42, r24	; 0x2a
    20f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    20f6:	9b a5       	ldd	r25, Y+43	; 0x2b
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_voidInit+0x2be>
    20fc:	9b a7       	std	Y+43, r25	; 0x2b
    20fe:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8c a5       	ldd	r24, Y+44	; 0x2c
    2102:	9d a5       	ldd	r25, Y+45	; 0x2d
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9d a7       	std	Y+45, r25	; 0x2d
    2108:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8c a5       	ldd	r24, Y+44	; 0x2c
    210c:	9d a5       	ldd	r25, Y+45	; 0x2d
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <LCD_voidInit+0x2b2>
    2112:	24 c0       	rjmp	.+72     	; 0x215c <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6e a5       	ldd	r22, Y+46	; 0x2e
    2116:	7f a5       	ldd	r23, Y+47	; 0x2f
    2118:	88 a9       	ldd	r24, Y+48	; 0x30
    211a:	99 a9       	ldd	r25, Y+49	; 0x31
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9d a7       	std	Y+45, r25	; 0x2d
    2126:	8c a7       	std	Y+44, r24	; 0x2c
    2128:	8c a5       	ldd	r24, Y+44	; 0x2c
    212a:	9d a5       	ldd	r25, Y+45	; 0x2d
    212c:	99 a7       	std	Y+41, r25	; 0x29
    212e:	88 a7       	std	Y+40, r24	; 0x28
    2130:	88 a5       	ldd	r24, Y+40	; 0x28
    2132:	99 a5       	ldd	r25, Y+41	; 0x29
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_voidInit+0x2fa>
    2138:	99 a7       	std	Y+41, r25	; 0x29
    213a:	88 a7       	std	Y+40, r24	; 0x28
    213c:	0f c0       	rjmp	.+30     	; 0x215c <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    213e:	6f a9       	ldd	r22, Y+55	; 0x37
    2140:	78 ad       	ldd	r23, Y+56	; 0x38
    2142:	89 ad       	ldd	r24, Y+57	; 0x39
    2144:	9a ad       	ldd	r25, Y+58	; 0x3a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8e ab       	std	Y+54, r24	; 0x36
    2150:	8e a9       	ldd	r24, Y+54	; 0x36
    2152:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2154:	8f a1       	ldd	r24, Y+39	; 0x27
    2156:	8a 95       	dec	r24
    2158:	f1 f7       	brne	.-4      	; 0x2156 <LCD_voidInit+0x31c>
    215a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_DISPLAY_ONOFF);
    215c:	8f e0       	ldi	r24, 0x0F	; 15
    215e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <LCD_voidSendCommand>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a8 e4       	ldi	r26, 0x48	; 72
    2168:	b2 e4       	ldi	r27, 0x42	; 66
    216a:	8b a3       	std	Y+35, r24	; 0x23
    216c:	9c a3       	std	Y+36, r25	; 0x24
    216e:	ad a3       	std	Y+37, r26	; 0x25
    2170:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2172:	6b a1       	ldd	r22, Y+35	; 0x23
    2174:	7c a1       	ldd	r23, Y+36	; 0x24
    2176:	8d a1       	ldd	r24, Y+37	; 0x25
    2178:	9e a1       	ldd	r25, Y+38	; 0x26
    217a:	2b ea       	ldi	r18, 0xAB	; 171
    217c:	3a ea       	ldi	r19, 0xAA	; 170
    217e:	4a e2       	ldi	r20, 0x2A	; 42
    2180:	50 e4       	ldi	r21, 0x40	; 64
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8f 8f       	std	Y+31, r24	; 0x1f
    218c:	98 a3       	std	Y+32, r25	; 0x20
    218e:	a9 a3       	std	Y+33, r26	; 0x21
    2190:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2192:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2194:	78 a1       	ldd	r23, Y+32	; 0x20
    2196:	89 a1       	ldd	r24, Y+33	; 0x21
    2198:	9a a1       	ldd	r25, Y+34	; 0x22
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	1c f4       	brge	.+6      	; 0x21b0 <LCD_voidInit+0x376>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	8e 8f       	std	Y+30, r24	; 0x1e
    21ae:	91 c0       	rjmp	.+290    	; 0x22d2 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    21b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21b2:	78 a1       	ldd	r23, Y+32	; 0x20
    21b4:	89 a1       	ldd	r24, Y+33	; 0x21
    21b6:	9a a1       	ldd	r25, Y+34	; 0x22
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	53 e4       	ldi	r21, 0x43	; 67
    21c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	0c f0       	brlt	.+2      	; 0x21ca <LCD_voidInit+0x390>
    21c8:	7b c0       	rjmp	.+246    	; 0x22c0 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    21ca:	6b a1       	ldd	r22, Y+35	; 0x23
    21cc:	7c a1       	ldd	r23, Y+36	; 0x24
    21ce:	8d a1       	ldd	r24, Y+37	; 0x25
    21d0:	9e a1       	ldd	r25, Y+38	; 0x26
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8a 8f       	std	Y+26, r24	; 0x1a
    21e4:	9b 8f       	std	Y+27, r25	; 0x1b
    21e6:	ac 8f       	std	Y+28, r26	; 0x1c
    21e8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21ec:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a ef       	ldi	r20, 0xFA	; 250
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8e 8b       	std	Y+22, r24	; 0x16
    2204:	9f 8b       	std	Y+23, r25	; 0x17
    2206:	a8 8f       	std	Y+24, r26	; 0x18
    2208:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    220a:	6e 89       	ldd	r22, Y+22	; 0x16
    220c:	7f 89       	ldd	r23, Y+23	; 0x17
    220e:	88 8d       	ldd	r24, Y+24	; 0x18
    2210:	99 8d       	ldd	r25, Y+25	; 0x19
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_voidInit+0x3f2>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9d 8b       	std	Y+21, r25	; 0x15
    2228:	8c 8b       	std	Y+20, r24	; 0x14
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    222c:	6e 89       	ldd	r22, Y+22	; 0x16
    222e:	7f 89       	ldd	r23, Y+23	; 0x17
    2230:	88 8d       	ldd	r24, Y+24	; 0x18
    2232:	99 8d       	ldd	r25, Y+25	; 0x19
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2246:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2248:	8c 8d       	ldd	r24, Y+28	; 0x1c
    224a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9d 8b       	std	Y+21, r25	; 0x15
    226a:	8c 8b       	std	Y+20, r24	; 0x14
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_voidInit+0x452>
    226e:	88 ec       	ldi	r24, 0xC8	; 200
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9b 8b       	std	Y+19, r25	; 0x13
    2274:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2276:	8a 89       	ldd	r24, Y+18	; 0x12
    2278:	9b 89       	ldd	r25, Y+19	; 0x13
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_voidInit+0x440>
    227e:	9b 8b       	std	Y+19, r25	; 0x13
    2280:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8c 89       	ldd	r24, Y+20	; 0x14
    2284:	9d 89       	ldd	r25, Y+21	; 0x15
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9d 8b       	std	Y+21, r25	; 0x15
    228a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8c 89       	ldd	r24, Y+20	; 0x14
    228e:	9d 89       	ldd	r25, Y+21	; 0x15
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_voidInit+0x434>
    2294:	24 c0       	rjmp	.+72     	; 0x22de <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6e 89       	ldd	r22, Y+22	; 0x16
    2298:	7f 89       	ldd	r23, Y+23	; 0x17
    229a:	88 8d       	ldd	r24, Y+24	; 0x18
    229c:	99 8d       	ldd	r25, Y+25	; 0x19
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9d 8b       	std	Y+21, r25	; 0x15
    22a8:	8c 8b       	std	Y+20, r24	; 0x14
    22aa:	8c 89       	ldd	r24, Y+20	; 0x14
    22ac:	9d 89       	ldd	r25, Y+21	; 0x15
    22ae:	99 8b       	std	Y+17, r25	; 0x11
    22b0:	88 8b       	std	Y+16, r24	; 0x10
    22b2:	88 89       	ldd	r24, Y+16	; 0x10
    22b4:	99 89       	ldd	r25, Y+17	; 0x11
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_voidInit+0x47c>
    22ba:	99 8b       	std	Y+17, r25	; 0x11
    22bc:	88 8b       	std	Y+16, r24	; 0x10
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22c2:	78 a1       	ldd	r23, Y+32	; 0x20
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8e 8f       	std	Y+30, r24	; 0x1e
    22d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	8a 95       	dec	r24
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_voidInit+0x49e>
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_CLEAR);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <LCD_voidSendCommand>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e4       	ldi	r27, 0x40	; 64
    22ec:	8b 87       	std	Y+11, r24	; 0x0b
    22ee:	9c 87       	std	Y+12, r25	; 0x0c
    22f0:	ad 87       	std	Y+13, r26	; 0x0d
    22f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8f 83       	std	Y+7, r24	; 0x07
    230e:	98 87       	std	Y+8, r25	; 0x08
    2310:	a9 87       	std	Y+9, r26	; 0x09
    2312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <LCD_voidInit+0x4fc>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <LCD_voidInit+0x55c>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_voidInit+0x54a>
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <LCD_voidInit+0x53e>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_voidInit+0x586>
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    23c8:	c4 5b       	subi	r28, 0xB4	; 180
    23ca:	df 4f       	sbci	r29, 0xFF	; 255
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Copy_u8Command){
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	69 97       	sbiw	r28, 0x19	; 25
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_LOW);
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	67 e0       	ldi	r22, 0x07	; 7
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    2400:	83 e0       	ldi	r24, 0x03	; 3
    2402:	66 e0       	ldi	r22, 0x06	; 6
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Command);
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	69 8d       	ldd	r22, Y+25	; 0x19
    240e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	65 e0       	ldi	r22, 0x05	; 5
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a0 e8       	ldi	r26, 0x80	; 128
    2422:	bf e3       	ldi	r27, 0x3F	; 63
    2424:	8d 8b       	std	Y+21, r24	; 0x15
    2426:	9e 8b       	std	Y+22, r25	; 0x16
    2428:	af 8b       	std	Y+23, r26	; 0x17
    242a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    242c:	6d 89       	ldd	r22, Y+21	; 0x15
    242e:	7e 89       	ldd	r23, Y+22	; 0x16
    2430:	8f 89       	ldd	r24, Y+23	; 0x17
    2432:	98 8d       	ldd	r25, Y+24	; 0x18
    2434:	2b ea       	ldi	r18, 0xAB	; 171
    2436:	3a ea       	ldi	r19, 0xAA	; 170
    2438:	4a e2       	ldi	r20, 0x2A	; 42
    243a:	50 e4       	ldi	r21, 0x40	; 64
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	89 8b       	std	Y+17, r24	; 0x11
    2446:	9a 8b       	std	Y+18, r25	; 0x12
    2448:	ab 8b       	std	Y+19, r26	; 0x13
    244a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    244c:	69 89       	ldd	r22, Y+17	; 0x11
    244e:	7a 89       	ldd	r23, Y+18	; 0x12
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	1c f4       	brge	.+6      	; 0x246a <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	88 8b       	std	Y+16, r24	; 0x10
    2468:	91 c0       	rjmp	.+290    	; 0x258c <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    246a:	69 89       	ldd	r22, Y+17	; 0x11
    246c:	7a 89       	ldd	r23, Y+18	; 0x12
    246e:	8b 89       	ldd	r24, Y+19	; 0x13
    2470:	9c 89       	ldd	r25, Y+20	; 0x14
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	53 e4       	ldi	r21, 0x43	; 67
    247a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	0c f0       	brlt	.+2      	; 0x2484 <LCD_voidSendCommand+0xa4>
    2482:	7b c0       	rjmp	.+246    	; 0x257a <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2484:	6d 89       	ldd	r22, Y+21	; 0x15
    2486:	7e 89       	ldd	r23, Y+22	; 0x16
    2488:	8f 89       	ldd	r24, Y+23	; 0x17
    248a:	98 8d       	ldd	r25, Y+24	; 0x18
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a e7       	ldi	r20, 0x7A	; 122
    2492:	54 e4       	ldi	r21, 0x44	; 68
    2494:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8c 87       	std	Y+12, r24	; 0x0c
    249e:	9d 87       	std	Y+13, r25	; 0x0d
    24a0:	ae 87       	std	Y+14, r26	; 0x0e
    24a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    24a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    24aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a ef       	ldi	r20, 0xFA	; 250
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	88 87       	std	Y+8, r24	; 0x08
    24be:	99 87       	std	Y+9, r25	; 0x09
    24c0:	aa 87       	std	Y+10, r26	; 0x0a
    24c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24c4:	68 85       	ldd	r22, Y+8	; 0x08
    24c6:	79 85       	ldd	r23, Y+9	; 0x09
    24c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9f 83       	std	Y+7, r25	; 0x07
    24e2:	8e 83       	std	Y+6, r24	; 0x06
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    24e6:	68 85       	ldd	r22, Y+8	; 0x08
    24e8:	79 85       	ldd	r23, Y+9	; 0x09
    24ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	4c f5       	brge	.+82     	; 0x2550 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2500:	7d 85       	ldd	r23, Y+13	; 0x0d
    2502:	8e 85       	ldd	r24, Y+14	; 0x0e
    2504:	9f 85       	ldd	r25, Y+15	; 0x0f
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9f 83       	std	Y+7, r25	; 0x07
    2524:	8e 83       	std	Y+6, r24	; 0x06
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_voidSendCommand+0x166>
    2528:	88 ec       	ldi	r24, 0xC8	; 200
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9d 83       	std	Y+5, r25	; 0x05
    252e:	8c 83       	std	Y+4, r24	; 0x04
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	9d 81       	ldd	r25, Y+5	; 0x05
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_voidSendCommand+0x154>
    2538:	9d 83       	std	Y+5, r25	; 0x05
    253a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253c:	8e 81       	ldd	r24, Y+6	; 0x06
    253e:	9f 81       	ldd	r25, Y+7	; 0x07
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	9f 83       	std	Y+7, r25	; 0x07
    2544:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	8e 81       	ldd	r24, Y+6	; 0x06
    2548:	9f 81       	ldd	r25, Y+7	; 0x07
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	69 f7       	brne	.-38     	; 0x2528 <LCD_voidSendCommand+0x148>
    254e:	24 c0       	rjmp	.+72     	; 0x2598 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	68 85       	ldd	r22, Y+8	; 0x08
    2552:	79 85       	ldd	r23, Y+9	; 0x09
    2554:	8a 85       	ldd	r24, Y+10	; 0x0a
    2556:	9b 85       	ldd	r25, Y+11	; 0x0b
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9f 83       	std	Y+7, r25	; 0x07
    2562:	8e 83       	std	Y+6, r24	; 0x06
    2564:	8e 81       	ldd	r24, Y+6	; 0x06
    2566:	9f 81       	ldd	r25, Y+7	; 0x07
    2568:	9b 83       	std	Y+3, r25	; 0x03
    256a:	8a 83       	std	Y+2, r24	; 0x02
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	9b 81       	ldd	r25, Y+3	; 0x03
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_voidSendCommand+0x190>
    2574:	9b 83       	std	Y+3, r25	; 0x03
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	0f c0       	rjmp	.+30     	; 0x2598 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    257a:	69 89       	ldd	r22, Y+17	; 0x11
    257c:	7a 89       	ldd	r23, Y+18	; 0x12
    257e:	8b 89       	ldd	r24, Y+19	; 0x13
    2580:	9c 89       	ldd	r25, Y+20	; 0x14
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	88 8b       	std	Y+16, r24	; 0x10
    258c:	88 89       	ldd	r24, Y+16	; 0x10
    258e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	8a 95       	dec	r24
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_voidSendCommand+0x1b2>
    2596:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	65 e0       	ldi	r22, 0x05	; 5
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>

}
    25a2:	69 96       	adiw	r28, 0x19	; 25
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_u8Char){
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	69 97       	sbiw	r28, 0x19	; 25
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_HIGH);
    25ca:	83 e0       	ldi	r24, 0x03	; 3
    25cc:	67 e0       	ldi	r22, 0x07	; 7
    25ce:	41 e0       	ldi	r20, 0x01	; 1
    25d0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	66 e0       	ldi	r22, 0x06	; 6
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Char);
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	69 8d       	ldd	r22, Y+25	; 0x19
    25e2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	65 e0       	ldi	r22, 0x05	; 5
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e8       	ldi	r26, 0x80	; 128
    25f6:	bf e3       	ldi	r27, 0x3F	; 63
    25f8:	8d 8b       	std	Y+21, r24	; 0x15
    25fa:	9e 8b       	std	Y+22, r25	; 0x16
    25fc:	af 8b       	std	Y+23, r26	; 0x17
    25fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2600:	6d 89       	ldd	r22, Y+21	; 0x15
    2602:	7e 89       	ldd	r23, Y+22	; 0x16
    2604:	8f 89       	ldd	r24, Y+23	; 0x17
    2606:	98 8d       	ldd	r25, Y+24	; 0x18
    2608:	2b ea       	ldi	r18, 0xAB	; 171
    260a:	3a ea       	ldi	r19, 0xAA	; 170
    260c:	4a e2       	ldi	r20, 0x2A	; 42
    260e:	50 e4       	ldi	r21, 0x40	; 64
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	89 8b       	std	Y+17, r24	; 0x11
    261a:	9a 8b       	std	Y+18, r25	; 0x12
    261c:	ab 8b       	std	Y+19, r26	; 0x13
    261e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2620:	69 89       	ldd	r22, Y+17	; 0x11
    2622:	7a 89       	ldd	r23, Y+18	; 0x12
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	1c f4       	brge	.+6      	; 0x263e <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	88 8b       	std	Y+16, r24	; 0x10
    263c:	91 c0       	rjmp	.+290    	; 0x2760 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    263e:	69 89       	ldd	r22, Y+17	; 0x11
    2640:	7a 89       	ldd	r23, Y+18	; 0x12
    2642:	8b 89       	ldd	r24, Y+19	; 0x13
    2644:	9c 89       	ldd	r25, Y+20	; 0x14
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	53 e4       	ldi	r21, 0x43	; 67
    264e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	0c f0       	brlt	.+2      	; 0x2658 <LCD_voidSendChar+0xa4>
    2656:	7b c0       	rjmp	.+246    	; 0x274e <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2658:	6d 89       	ldd	r22, Y+21	; 0x15
    265a:	7e 89       	ldd	r23, Y+22	; 0x16
    265c:	8f 89       	ldd	r24, Y+23	; 0x17
    265e:	98 8d       	ldd	r25, Y+24	; 0x18
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8c 87       	std	Y+12, r24	; 0x0c
    2672:	9d 87       	std	Y+13, r25	; 0x0d
    2674:	ae 87       	std	Y+14, r26	; 0x0e
    2676:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2678:	6c 85       	ldd	r22, Y+12	; 0x0c
    267a:	7d 85       	ldd	r23, Y+13	; 0x0d
    267c:	8e 85       	ldd	r24, Y+14	; 0x0e
    267e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a ef       	ldi	r20, 0xFA	; 250
    2686:	54 e4       	ldi	r21, 0x44	; 68
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	88 87       	std	Y+8, r24	; 0x08
    2692:	99 87       	std	Y+9, r25	; 0x09
    2694:	aa 87       	std	Y+10, r26	; 0x0a
    2696:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2698:	68 85       	ldd	r22, Y+8	; 0x08
    269a:	79 85       	ldd	r23, Y+9	; 0x09
    269c:	8a 85       	ldd	r24, Y+10	; 0x0a
    269e:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e8       	ldi	r20, 0x80	; 128
    26a6:	5f e3       	ldi	r21, 0x3F	; 63
    26a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	2c f4       	brge	.+10     	; 0x26ba <LCD_voidSendChar+0x106>
		__ticks = 1;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9f 83       	std	Y+7, r25	; 0x07
    26b6:	8e 83       	std	Y+6, r24	; 0x06
    26b8:	3f c0       	rjmp	.+126    	; 0x2738 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    26ba:	68 85       	ldd	r22, Y+8	; 0x08
    26bc:	79 85       	ldd	r23, Y+9	; 0x09
    26be:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	3f ef       	ldi	r19, 0xFF	; 255
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	57 e4       	ldi	r21, 0x47	; 71
    26ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	4c f5       	brge	.+82     	; 0x2724 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9f 83       	std	Y+7, r25	; 0x07
    26f8:	8e 83       	std	Y+6, r24	; 0x06
    26fa:	0f c0       	rjmp	.+30     	; 0x271a <LCD_voidSendChar+0x166>
    26fc:	88 ec       	ldi	r24, 0xC8	; 200
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9d 83       	std	Y+5, r25	; 0x05
    2702:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	9d 81       	ldd	r25, Y+5	; 0x05
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_voidSendChar+0x154>
    270c:	9d 83       	std	Y+5, r25	; 0x05
    270e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2710:	8e 81       	ldd	r24, Y+6	; 0x06
    2712:	9f 81       	ldd	r25, Y+7	; 0x07
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	9f 83       	std	Y+7, r25	; 0x07
    2718:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271a:	8e 81       	ldd	r24, Y+6	; 0x06
    271c:	9f 81       	ldd	r25, Y+7	; 0x07
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	69 f7       	brne	.-38     	; 0x26fc <LCD_voidSendChar+0x148>
    2722:	24 c0       	rjmp	.+72     	; 0x276c <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2724:	68 85       	ldd	r22, Y+8	; 0x08
    2726:	79 85       	ldd	r23, Y+9	; 0x09
    2728:	8a 85       	ldd	r24, Y+10	; 0x0a
    272a:	9b 85       	ldd	r25, Y+11	; 0x0b
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9f 83       	std	Y+7, r25	; 0x07
    2736:	8e 83       	std	Y+6, r24	; 0x06
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	9f 81       	ldd	r25, Y+7	; 0x07
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_voidSendChar+0x190>
    2748:	9b 83       	std	Y+3, r25	; 0x03
    274a:	8a 83       	std	Y+2, r24	; 0x02
    274c:	0f c0       	rjmp	.+30     	; 0x276c <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    274e:	69 89       	ldd	r22, Y+17	; 0x11
    2750:	7a 89       	ldd	r23, Y+18	; 0x12
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	88 8b       	std	Y+16, r24	; 0x10
    2760:	88 89       	ldd	r24, Y+16	; 0x10
    2762:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	8a 95       	dec	r24
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_voidSendChar+0x1b2>
    276a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	65 e0       	ldi	r22, 0x05	; 5
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>
}
    2776:	69 96       	adiw	r28, 0x19	; 25
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_u8String){
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <LCD_voidSendString+0x6>
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	0a c0       	rjmp	.+20     	; 0x27ac <LCD_voidSendString+0x24>
	while(*Copy_u8String != '\0'){
		LCD_voidSendChar (*Copy_u8String);
    2798:	e9 81       	ldd	r30, Y+1	; 0x01
    279a:	fa 81       	ldd	r31, Y+2	; 0x02
    279c:	80 81       	ld	r24, Z
    279e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_voidSendChar>
		Copy_u8String ++;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
}

void LCD_voidSendString (u8 *Copy_u8String){
	while(*Copy_u8String != '\0'){
    27ac:	e9 81       	ldd	r30, Y+1	; 0x01
    27ae:	fa 81       	ldd	r31, Y+2	; 0x02
    27b0:	80 81       	ld	r24, Z
    27b2:	88 23       	and	r24, r24
    27b4:	89 f7       	brne	.-30     	; 0x2798 <LCD_voidSendString+0x10>
		LCD_voidSendChar (*Copy_u8String);
		Copy_u8String ++;
	}
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <LCD_voidSendNumber>:

void LCD_voidSendNumber (u32 Copy_u8Num){
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	65 97       	sbiw	r28, 0x15	; 21
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	6a 8b       	std	Y+18, r22	; 0x12
    27d6:	7b 8b       	std	Y+19, r23	; 0x13
    27d8:	8c 8b       	std	Y+20, r24	; 0x14
    27da:	9d 8b       	std	Y+21, r25	; 0x15
	u8 str[10];
    u8 i, rem, len = 0;
    27dc:	1d 82       	std	Y+5, r1	; 0x05

    u32 n = Copy_u8Num;
    27de:	8a 89       	ldd	r24, Y+18	; 0x12
    27e0:	9b 89       	ldd	r25, Y+19	; 0x13
    27e2:	ac 89       	ldd	r26, Y+20	; 0x14
    27e4:	bd 89       	ldd	r27, Y+21	; 0x15
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	ab 83       	std	Y+3, r26	; 0x03
    27ec:	bc 83       	std	Y+4, r27	; 0x04
    27ee:	15 c0       	rjmp	.+42     	; 0x281a <LCD_voidSendNumber+0x5a>
    while (n != 0)
    {
        len++;
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	8d 83       	std	Y+5, r24	; 0x05
        n /= 10;
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	9a 81       	ldd	r25, Y+2	; 0x02
    27fa:	ab 81       	ldd	r26, Y+3	; 0x03
    27fc:	bc 81       	ldd	r27, Y+4	; 0x04
    27fe:	2a e0       	ldi	r18, 0x0A	; 10
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__udivmodsi4>
    280e:	da 01       	movw	r26, r20
    2810:	c9 01       	movw	r24, r18
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	ab 83       	std	Y+3, r26	; 0x03
    2818:	bc 83       	std	Y+4, r27	; 0x04
void LCD_voidSendNumber (u32 Copy_u8Num){
	u8 str[10];
    u8 i, rem, len = 0;

    u32 n = Copy_u8Num;
    while (n != 0)
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	ab 81       	ldd	r26, Y+3	; 0x03
    2820:	bc 81       	ldd	r27, Y+4	; 0x04
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	a1 05       	cpc	r26, r1
    2826:	b1 05       	cpc	r27, r1
    2828:	19 f7       	brne	.-58     	; 0x27f0 <LCD_voidSendNumber+0x30>
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    282a:	1f 82       	std	Y+7, r1	; 0x07
    282c:	37 c0       	rjmp	.+110    	; 0x289c <LCD_voidSendNumber+0xdc>
    {
        rem = Copy_u8Num % 10;
    282e:	8a 89       	ldd	r24, Y+18	; 0x12
    2830:	9b 89       	ldd	r25, Y+19	; 0x13
    2832:	ac 89       	ldd	r26, Y+20	; 0x14
    2834:	bd 89       	ldd	r27, Y+21	; 0x15
    2836:	2a e0       	ldi	r18, 0x0A	; 10
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__udivmodsi4>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8e 83       	std	Y+6, r24	; 0x06
        Copy_u8Num = Copy_u8Num / 10;
    284c:	8a 89       	ldd	r24, Y+18	; 0x12
    284e:	9b 89       	ldd	r25, Y+19	; 0x13
    2850:	ac 89       	ldd	r26, Y+20	; 0x14
    2852:	bd 89       	ldd	r27, Y+21	; 0x15
    2854:	2a e0       	ldi	r18, 0x0A	; 10
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__udivmodsi4>
    2864:	da 01       	movw	r26, r20
    2866:	c9 01       	movw	r24, r18
    2868:	8a 8b       	std	Y+18, r24	; 0x12
    286a:	9b 8b       	std	Y+19, r25	; 0x13
    286c:	ac 8b       	std	Y+20, r26	; 0x14
    286e:	bd 8b       	std	Y+21, r27	; 0x15
        str[len - (i + 1)] = rem + '0';
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	8f 81       	ldd	r24, Y+7	; 0x07
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	80 95       	com	r24
    287e:	90 95       	com	r25
    2880:	28 0f       	add	r18, r24
    2882:	39 1f       	adc	r19, r25
    2884:	8e 81       	ldd	r24, Y+6	; 0x06
    2886:	48 2f       	mov	r20, r24
    2888:	40 5d       	subi	r20, 0xD0	; 208
    288a:	ce 01       	movw	r24, r28
    288c:	08 96       	adiw	r24, 0x08	; 8
    288e:	fc 01       	movw	r30, r24
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
    2894:	40 83       	st	Z, r20
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    2896:	8f 81       	ldd	r24, Y+7	; 0x07
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	8f 83       	std	Y+7, r24	; 0x07
    289c:	9f 81       	ldd	r25, Y+7	; 0x07
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	98 17       	cp	r25, r24
    28a2:	28 f2       	brcs	.-118    	; 0x282e <LCD_voidSendNumber+0x6e>
    {
        rem = Copy_u8Num % 10;
        Copy_u8Num = Copy_u8Num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	ce 01       	movw	r24, r28
    28ac:	08 96       	adiw	r24, 0x08	; 8
    28ae:	fc 01       	movw	r30, r24
    28b0:	e2 0f       	add	r30, r18
    28b2:	f3 1f       	adc	r31, r19
    28b4:	10 82       	st	Z, r1

    LCD_voidSendString (str);
    28b6:	ce 01       	movw	r24, r28
    28b8:	08 96       	adiw	r24, 0x08	; 8
    28ba:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidSendString>
}
    28be:	65 96       	adiw	r28, 0x15	; 21
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <LCD_voidSetLocation>:

void LCD_voidSetLocation (u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <LCD_voidSetLocation+0x6>
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <LCD_voidSetLocation+0x8>
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8LineNum){
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	3c 83       	std	Y+4, r19	; 0x04
    28e8:	2b 83       	std	Y+3, r18	; 0x03
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	9c 81       	ldd	r25, Y+4	; 0x04
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	91 05       	cpc	r25, r1
    28f2:	31 f0       	breq	.+12     	; 0x2900 <LCD_voidSetLocation+0x30>
    28f4:	2b 81       	ldd	r18, Y+3	; 0x03
    28f6:	3c 81       	ldd	r19, Y+4	; 0x04
    28f8:	22 30       	cpi	r18, 0x02	; 2
    28fa:	31 05       	cpc	r19, r1
    28fc:	31 f0       	breq	.+12     	; 0x290a <LCD_voidSetLocation+0x3a>
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <LCD_voidSetLocation+0x42>
		case LCD_LINE_1: LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	80 58       	subi	r24, 0x80	; 128
    2904:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <LCD_voidSendCommand>
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <LCD_voidSetLocation+0x42>

		case LCD_LINE_2: LCD_voidSendCommand(0xc0 + Copy_u8CharNum); break;
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	80 54       	subi	r24, 0x40	; 64
    290e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <LCD_voidSendCommand>

		default: return;
	}
}
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <LCD_voidDrawSpecialChar>:

void LCD_voidDrawSpecialChar (u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	00 d0       	rcall	.+0      	; 0x2926 <LCD_voidDrawSpecialChar+0x6>
    2926:	00 d0       	rcall	.+0      	; 0x2928 <LCD_voidDrawSpecialChar+0x8>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	8a 83       	std	Y+2, r24	; 0x02
    292e:	7c 83       	std	Y+4, r23	; 0x04
    2930:	6b 83       	std	Y+3, r22	; 0x03
	u8 i;

	if(Copy_u8CharIndex < 8){
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	88 30       	cpi	r24, 0x08	; 8
    2936:	f8 f4       	brcc	.+62     	; 0x2976 <LCD_voidDrawSpecialChar+0x56>
		LCD_voidSendCommand (0x40 + (Copy_u8CharIndex*8));
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	08 96       	adiw	r24, 0x08	; 8
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <LCD_voidSendCommand>
		for(i=0;i<8;i++) LCD_voidSendChar(*(Copy_u8SpecialChar+i));
    2950:	19 82       	std	Y+1, r1	; 0x01
    2952:	0e c0       	rjmp	.+28     	; 0x2970 <LCD_voidDrawSpecialChar+0x50>
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	fc 01       	movw	r30, r24
    2960:	e2 0f       	add	r30, r18
    2962:	f3 1f       	adc	r31, r19
    2964:	80 81       	ld	r24, Z
    2966:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_voidSendChar>
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	8f 5f       	subi	r24, 0xFF	; 255
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	88 30       	cpi	r24, 0x08	; 8
    2974:	78 f3       	brcs	.-34     	; 0x2954 <LCD_voidDrawSpecialChar+0x34>
	}
}
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar (u8 Copy_u8CharIndex){
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendChar (Copy_u8CharIndex);
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_voidSendChar>
}
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <KPD_voidInit>:

u8 KPD_Au8Keys[4][4] = KPD_KEYS;
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	0f 92       	push	r0
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    29a8:	19 82       	std	Y+1, r1	; 0x01
    29aa:	1b c0       	rjmp	.+54     	; 0x29e2 <KPD_voidInit+0x44>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	fc 01       	movw	r30, r24
    29b4:	ee 57       	subi	r30, 0x7E	; 126
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	90 81       	ld	r25, Z
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	69 2f       	mov	r22, r25
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	fc 01       	movw	r30, r24
    29cc:	ea 57       	subi	r30, 0x7A	; 122
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	90 81       	ld	r25, Z
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	69 2f       	mov	r22, r25
    29d6:	42 e0       	ldi	r20, 0x02	; 2
    29d8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_voidSetPinDirection>
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	84 30       	cpi	r24, 0x04	; 4
    29e6:	10 f3       	brcs	.-60     	; 0x29ac <KPD_voidInit+0xe>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
	}
}
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	61 97       	sbiw	r28, 0x11	; 17
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;
    2a04:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    2a06:	19 8a       	std	Y+17, r1	; 0x11
    2a08:	c4 c0       	rjmp	.+392    	; 0x2b92 <KPD_u8GetPressedKey+0x1a2>
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    2a0a:	89 89       	ldd	r24, Y+17	; 0x11
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	fc 01       	movw	r30, r24
    2a12:	ee 57       	subi	r30, 0x7E	; 126
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	90 81       	ld	r25, Z
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	69 2f       	mov	r22, r25
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    2a22:	18 8a       	std	Y+16, r1	; 0x10
    2a24:	a3 c0       	rjmp	.+326    	; 0x2b6c <KPD_u8GetPressedKey+0x17c>

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    2a26:	88 89       	ldd	r24, Y+16	; 0x10
    2a28:	88 2f       	mov	r24, r24
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	ea 57       	subi	r30, 0x7A	; 122
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	90 81       	ld	r25, Z
    2a34:	82 e0       	ldi	r24, 0x02	; 2
    2a36:	69 2f       	mov	r22, r25
    2a38:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8GetPinValue>
    2a3c:	88 23       	and	r24, r24
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <KPD_u8GetPressedKey+0x52>
    2a40:	92 c0       	rjmp	.+292    	; 0x2b66 <KPD_u8GetPressedKey+0x176>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a8 ec       	ldi	r26, 0xC8	; 200
    2a48:	b1 e4       	ldi	r27, 0x41	; 65
    2a4a:	8b 87       	std	Y+11, r24	; 0x0b
    2a4c:	9c 87       	std	Y+12, r25	; 0x0c
    2a4e:	ad 87       	std	Y+13, r26	; 0x0d
    2a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a ef       	ldi	r20, 0xFA	; 250
    2a60:	54 e4       	ldi	r21, 0x44	; 68
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8f 83       	std	Y+7, r24	; 0x07
    2a6c:	98 87       	std	Y+8, r25	; 0x08
    2a6e:	a9 87       	std	Y+9, r26	; 0x09
    2a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <KPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <KPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    2a94:	6f 81       	ldd	r22, Y+7	; 0x07
    2a96:	78 85       	ldd	r23, Y+8	; 0x08
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	4c f5       	brge	.+82     	; 0x2afe <KPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9e 83       	std	Y+6, r25	; 0x06
    2ad2:	8d 83       	std	Y+5, r24	; 0x05
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <KPD_u8GetPressedKey+0x104>
    2ad6:	88 ec       	ldi	r24, 0xC8	; 200
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <KPD_u8GetPressedKey+0xf2>
    2ae6:	9c 83       	std	Y+4, r25	; 0x04
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <KPD_u8GetPressedKey+0xe6>
    2afc:	27 c0       	rjmp	.+78     	; 0x2b4c <KPD_u8GetPressedKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	8d 83       	std	Y+5, r24	; 0x05
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	9e 81       	ldd	r25, Y+6	; 0x06
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <KPD_u8GetPressedKey+0x12e>
    2b22:	9a 83       	std	Y+2, r25	; 0x02
    2b24:	89 83       	std	Y+1, r24	; 0x01
    2b26:	12 c0       	rjmp	.+36     	; 0x2b4c <KPD_u8GetPressedKey+0x15c>
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
    2b28:	89 89       	ldd	r24, Y+17	; 0x11
    2b2a:	48 2f       	mov	r20, r24
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	88 89       	ldd	r24, Y+16	; 0x10
    2b30:	28 2f       	mov	r18, r24
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	ca 01       	movw	r24, r20
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	88 0f       	add	r24, r24
    2b3c:	99 1f       	adc	r25, r25
    2b3e:	82 0f       	add	r24, r18
    2b40:	93 1f       	adc	r25, r19
    2b42:	fc 01       	movw	r30, r24
    2b44:	ee 58       	subi	r30, 0x8E	; 142
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	8f 87       	std	Y+15, r24	; 0x0f

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    2b4c:	88 89       	ldd	r24, Y+16	; 0x10
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	fc 01       	movw	r30, r24
    2b54:	ea 57       	subi	r30, 0x7A	; 122
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	90 81       	ld	r25, Z
    2b5a:	82 e0       	ldi	r24, 0x02	; 2
    2b5c:	69 2f       	mov	r22, r25
    2b5e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8GetPinValue>
    2b62:	88 23       	and	r24, r24
    2b64:	09 f3       	breq	.-62     	; 0x2b28 <KPD_u8GetPressedKey+0x138>
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    2b66:	88 89       	ldd	r24, Y+16	; 0x10
    2b68:	8f 5f       	subi	r24, 0xFF	; 255
    2b6a:	88 8b       	std	Y+16, r24	; 0x10
    2b6c:	88 89       	ldd	r24, Y+16	; 0x10
    2b6e:	84 30       	cpi	r24, 0x04	; 4
    2b70:	08 f4       	brcc	.+2      	; 0x2b74 <KPD_u8GetPressedKey+0x184>
    2b72:	59 cf       	rjmp	.-334    	; 0x2a26 <KPD_u8GetPressedKey+0x36>
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
				}
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    2b74:	89 89       	ldd	r24, Y+17	; 0x11
    2b76:	88 2f       	mov	r24, r24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	ee 57       	subi	r30, 0x7E	; 126
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	90 81       	ld	r25, Z
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	69 2f       	mov	r22, r25
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinValue>
}

u8 KPD_u8GetPressedKey(void){
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    2b8c:	89 89       	ldd	r24, Y+17	; 0x11
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	89 8b       	std	Y+17, r24	; 0x11
    2b92:	89 89       	ldd	r24, Y+17	; 0x11
    2b94:	84 30       	cpi	r24, 0x04	; 4
    2b96:	08 f4       	brcc	.+2      	; 0x2b9a <KPD_u8GetPressedKey+0x1aa>
    2b98:	38 cf       	rjmp	.-400    	; 0x2a0a <KPD_u8GetPressedKey+0x1a>
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
	}
	return Local_u8ReturnValue;
    2b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2b9c:	61 96       	adiw	r28, 0x11	; 17
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <main>:
u16	Global_u16Frequency = 1;
u16	Global_u16Periodms;

void CallbackFunc(void);

int main(){
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <main+0x6>
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN2, DIO_PIN_INPUT);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	62 e0       	ldi	r22, 0x02	; 2
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_DIV_64);
    2bc2:	86 e0       	ldi	r24, 0x06	; 6
    2bc4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <ADC_voidInit>
	u16 Local_u16DigitalValue;

	DIO_voidSetPortDirection(DIO_PORTB, DIO_PORT_OUTPUT);
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	6f ef       	ldi	r22, 0xFF	; 255
    2bcc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPortDirection>

	TIM0_voidOVFCallback(&CallbackFunc);
    2bd0:	88 e0       	ldi	r24, 0x08	; 8
    2bd2:	96 e1       	ldi	r25, 0x16	; 22
    2bd4:	0e 94 41 07 	call	0xe82	; 0xe82 <TIM0_voidOVFCallback>

	TIM0_voidInit();
    2bd8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIM0_voidInit>
	TIM0_voidSetPreValue(232);
    2bdc:	88 ee       	ldi	r24, 0xE8	; 232
    2bde:	0e 94 64 06 	call	0xcc8	; 0xcc8 <TIM0_voidSetPreValue>
	TIM0_voidTimerStart(TIM0_PRE_DIV_8);
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	0e 94 72 06 	call	0xce4	; 0xce4 <TIM0_voidTimerStart>

	sei();
    2be8:	78 94       	sei
	TIM0_voidOVFINTControl(TIM0_INT_ENABLE);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	0e 94 8b 06 	call	0xd16	; 0xd16 <TIM0_voidOVFINTControl>

	while(1){
		Local_u16DigitalValue = ADC_u16GetDigitalValue(ADC_CHANNEL_2);
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
    2bf2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <ADC_u16GetDigitalValue>
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
		Global_u16Periodms = (Local_u16DigitalValue )/1024;
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	89 2f       	mov	r24, r25
    2c00:	99 27       	eor	r25, r25
    2c02:	86 95       	lsr	r24
    2c04:	86 95       	lsr	r24
    2c06:	90 93 9b 00 	sts	0x009B, r25
    2c0a:	80 93 9a 00 	sts	0x009A, r24
    2c0e:	f0 cf       	rjmp	.-32     	; 0x2bf0 <main+0x42>

00002c10 <CallbackFunc>:
	}
}



void CallbackFunc(void){
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Count =0;
	if(Local_u16Count == 30){
    2c18:	80 91 98 00 	lds	r24, 0x0098
    2c1c:	90 91 99 00 	lds	r25, 0x0099
    2c20:	8e 31       	cpi	r24, 0x1E	; 30
    2c22:	91 05       	cpc	r25, r1
    2c24:	19 f5       	brne	.+70     	; 0x2c6c <CallbackFunc+0x5c>
		static u16 Local_u16Count_1 =0;
		if(Local_u16Count_1 == Global_u16Periodms){
    2c26:	20 91 96 00 	lds	r18, 0x0096
    2c2a:	30 91 97 00 	lds	r19, 0x0097
    2c2e:	80 91 9a 00 	lds	r24, 0x009A
    2c32:	90 91 9b 00 	lds	r25, 0x009B
    2c36:	28 17       	cp	r18, r24
    2c38:	39 07       	cpc	r19, r25
    2c3a:	41 f4       	brne	.+16     	; 0x2c4c <CallbackFunc+0x3c>
			DIO_voidTogglePinValue(DIO_PORTB,DIO_PIN7);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	67 e0       	ldi	r22, 0x07	; 7
    2c40:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_voidTogglePinValue>
			Local_u16Count_1 =0;
    2c44:	10 92 97 00 	sts	0x0097, r1
    2c48:	10 92 96 00 	sts	0x0096, r1
		}
		Local_u16Count_1++;
    2c4c:	80 91 96 00 	lds	r24, 0x0096
    2c50:	90 91 97 00 	lds	r25, 0x0097
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	90 93 97 00 	sts	0x0097, r25
    2c5a:	80 93 96 00 	sts	0x0096, r24
		Local_u16Count =0;
    2c5e:	10 92 99 00 	sts	0x0099, r1
    2c62:	10 92 98 00 	sts	0x0098, r1
		TIM0_voidSetPreValue(232);
    2c66:	88 ee       	ldi	r24, 0xE8	; 232
    2c68:	0e 94 64 06 	call	0xcc8	; 0xcc8 <TIM0_voidSetPreValue>
	}

	Local_u16Count++;
    2c6c:	80 91 98 00 	lds	r24, 0x0098
    2c70:	90 91 99 00 	lds	r25, 0x0099
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	90 93 99 00 	sts	0x0099, r25
    2c7a:	80 93 98 00 	sts	0x0098, r24
}
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <__udivmodqi4>:
    2c84:	99 1b       	sub	r25, r25
    2c86:	79 e0       	ldi	r23, 0x09	; 9
    2c88:	04 c0       	rjmp	.+8      	; 0x2c92 <__udivmodqi4_ep>

00002c8a <__udivmodqi4_loop>:
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	96 17       	cp	r25, r22
    2c8e:	08 f0       	brcs	.+2      	; 0x2c92 <__udivmodqi4_ep>
    2c90:	96 1b       	sub	r25, r22

00002c92 <__udivmodqi4_ep>:
    2c92:	88 1f       	adc	r24, r24
    2c94:	7a 95       	dec	r23
    2c96:	c9 f7       	brne	.-14     	; 0x2c8a <__udivmodqi4_loop>
    2c98:	80 95       	com	r24
    2c9a:	08 95       	ret

00002c9c <__udivmodsi4>:
    2c9c:	a1 e2       	ldi	r26, 0x21	; 33
    2c9e:	1a 2e       	mov	r1, r26
    2ca0:	aa 1b       	sub	r26, r26
    2ca2:	bb 1b       	sub	r27, r27
    2ca4:	fd 01       	movw	r30, r26
    2ca6:	0d c0       	rjmp	.+26     	; 0x2cc2 <__udivmodsi4_ep>

00002ca8 <__udivmodsi4_loop>:
    2ca8:	aa 1f       	adc	r26, r26
    2caa:	bb 1f       	adc	r27, r27
    2cac:	ee 1f       	adc	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	a2 17       	cp	r26, r18
    2cb2:	b3 07       	cpc	r27, r19
    2cb4:	e4 07       	cpc	r30, r20
    2cb6:	f5 07       	cpc	r31, r21
    2cb8:	20 f0       	brcs	.+8      	; 0x2cc2 <__udivmodsi4_ep>
    2cba:	a2 1b       	sub	r26, r18
    2cbc:	b3 0b       	sbc	r27, r19
    2cbe:	e4 0b       	sbc	r30, r20
    2cc0:	f5 0b       	sbc	r31, r21

00002cc2 <__udivmodsi4_ep>:
    2cc2:	66 1f       	adc	r22, r22
    2cc4:	77 1f       	adc	r23, r23
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	1a 94       	dec	r1
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <__udivmodsi4_loop>
    2cce:	60 95       	com	r22
    2cd0:	70 95       	com	r23
    2cd2:	80 95       	com	r24
    2cd4:	90 95       	com	r25
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	bd 01       	movw	r22, r26
    2cdc:	cf 01       	movw	r24, r30
    2cde:	08 95       	ret

00002ce0 <__prologue_saves__>:
    2ce0:	2f 92       	push	r2
    2ce2:	3f 92       	push	r3
    2ce4:	4f 92       	push	r4
    2ce6:	5f 92       	push	r5
    2ce8:	6f 92       	push	r6
    2cea:	7f 92       	push	r7
    2cec:	8f 92       	push	r8
    2cee:	9f 92       	push	r9
    2cf0:	af 92       	push	r10
    2cf2:	bf 92       	push	r11
    2cf4:	cf 92       	push	r12
    2cf6:	df 92       	push	r13
    2cf8:	ef 92       	push	r14
    2cfa:	ff 92       	push	r15
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	ca 1b       	sub	r28, r26
    2d0a:	db 0b       	sbc	r29, r27
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	09 94       	ijmp

00002d18 <__epilogue_restores__>:
    2d18:	2a 88       	ldd	r2, Y+18	; 0x12
    2d1a:	39 88       	ldd	r3, Y+17	; 0x11
    2d1c:	48 88       	ldd	r4, Y+16	; 0x10
    2d1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d20:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d22:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d24:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d26:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d28:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d2a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d2c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d2e:	df 80       	ldd	r13, Y+7	; 0x07
    2d30:	ee 80       	ldd	r14, Y+6	; 0x06
    2d32:	fd 80       	ldd	r15, Y+5	; 0x05
    2d34:	0c 81       	ldd	r16, Y+4	; 0x04
    2d36:	1b 81       	ldd	r17, Y+3	; 0x03
    2d38:	aa 81       	ldd	r26, Y+2	; 0x02
    2d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d3c:	ce 0f       	add	r28, r30
    2d3e:	d1 1d       	adc	r29, r1
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	ed 01       	movw	r28, r26
    2d4c:	08 95       	ret

00002d4e <_exit>:
    2d4e:	f8 94       	cli

00002d50 <__stop_program>:
    2d50:	ff cf       	rjmp	.-2      	; 0x2d50 <__stop_program>
