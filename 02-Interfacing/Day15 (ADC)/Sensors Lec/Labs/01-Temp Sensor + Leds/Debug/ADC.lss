
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000295e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000295e  000029d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002214  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001298  00000000  00000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006197  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000092dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000af30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 75 13 	call	0x26ea	; 0x26ea <main>
      7a:	0c 94 ad 14 	jmp	0x295a	; 0x295a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 86 14 	jmp	0x290c	; 0x290c <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <INT_voidEnable>:
#include <avr/interrupt.h>
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "INT.h"

void INT_voidEnable(u8 Copy_u8INTIndex, u8 Copy_u8INTSense){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	2a 97       	sbiw	r28, 0x0a	; 10
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex) {
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	3a 87       	std	Y+10, r19	; 0x0a
     cae:	29 87       	std	Y+9, r18	; 0x09
     cb0:	89 85       	ldd	r24, Y+9	; 0x09
     cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	91 05       	cpc	r25, r1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <INT_voidEnable+0x2e>
     cba:	6d c0       	rjmp	.+218    	; 0xd96 <INT_voidEnable+0x108>
     cbc:	29 85       	ldd	r18, Y+9	; 0x09
     cbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     cc0:	22 30       	cpi	r18, 0x02	; 2
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <INT_voidEnable+0x3a>
     cc6:	c9 c0       	rjmp	.+402    	; 0xe5a <INT_voidEnable+0x1cc>
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	09 f0       	breq	.+2      	; 0xcd2 <INT_voidEnable+0x44>
     cd0:	e9 c0       	rjmp	.+466    	; 0xea4 <INT_voidEnable+0x216>
		case INT_INT0:
			switch (Copy_u8INTSense) {
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	38 87       	std	Y+8, r19	; 0x08
     cda:	2f 83       	std	Y+7, r18	; 0x07
     cdc:	8f 81       	ldd	r24, Y+7	; 0x07
     cde:	98 85       	ldd	r25, Y+8	; 0x08
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	91 05       	cpc	r25, r1
     ce4:	21 f1       	breq	.+72     	; 0xd2e <INT_voidEnable+0xa0>
     ce6:	2f 81       	ldd	r18, Y+7	; 0x07
     ce8:	38 85       	ldd	r19, Y+8	; 0x08
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	31 05       	cpc	r19, r1
     cee:	2c f4       	brge	.+10     	; 0xcfa <INT_voidEnable+0x6c>
     cf0:	8f 81       	ldd	r24, Y+7	; 0x07
     cf2:	98 85       	ldd	r25, Y+8	; 0x08
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	61 f0       	breq	.+24     	; 0xd10 <INT_voidEnable+0x82>
     cf8:	46 c0       	rjmp	.+140    	; 0xd86 <INT_voidEnable+0xf8>
     cfa:	2f 81       	ldd	r18, Y+7	; 0x07
     cfc:	38 85       	ldd	r19, Y+8	; 0x08
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	21 f1       	breq	.+72     	; 0xd4c <INT_voidEnable+0xbe>
     d04:	8f 81       	ldd	r24, Y+7	; 0x07
     d06:	98 85       	ldd	r25, Y+8	; 0x08
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	91 05       	cpc	r25, r1
     d0c:	71 f1       	breq	.+92     	; 0xd6a <INT_voidEnable+0xdc>
     d0e:	3b c0       	rjmp	.+118    	; 0xd86 <INT_voidEnable+0xf8>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC00);
     d10:	a5 e5       	ldi	r26, 0x55	; 85
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e5       	ldi	r30, 0x55	; 85
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
     d1e:	a5 e5       	ldi	r26, 0x55	; 85
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e5       	ldi	r30, 0x55	; 85
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	82 60       	ori	r24, 0x02	; 2
     d2a:	8c 93       	st	X, r24
     d2c:	2c c0       	rjmp	.+88     	; 0xd86 <INT_voidEnable+0xf8>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
     d2e:	a5 e5       	ldi	r26, 0x55	; 85
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e5       	ldi	r30, 0x55	; 85
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
     d3c:	a5 e5       	ldi	r26, 0x55	; 85
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e5 e5       	ldi	r30, 0x55	; 85
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	8c 93       	st	X, r24
     d4a:	1d c0       	rjmp	.+58     	; 0xd86 <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
     d4c:	a5 e5       	ldi	r26, 0x55	; 85
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e5       	ldi	r30, 0x55	; 85
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	81 60       	ori	r24, 0x01	; 1
     d58:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
     d5a:	a5 e5       	ldi	r26, 0x55	; 85
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e5 e5       	ldi	r30, 0x55	; 85
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	8c 93       	st	X, r24
     d68:	0e c0       	rjmp	.+28     	; 0xd86 <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC00);
     d6a:	a5 e5       	ldi	r26, 0x55	; 85
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e5       	ldi	r30, 0x55	; 85
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8e 7f       	andi	r24, 0xFE	; 254
     d76:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
     d78:	a5 e5       	ldi	r26, 0x55	; 85
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e5 e5       	ldi	r30, 0x55	; 85
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8d 7f       	andi	r24, 0xFD	; 253
     d84:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT0);
     d86:	ab e5       	ldi	r26, 0x5B	; 91
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	eb e5       	ldi	r30, 0x5B	; 91
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 64       	ori	r24, 0x40	; 64
     d92:	8c 93       	st	X, r24
     d94:	87 c0       	rjmp	.+270    	; 0xea4 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			switch (Copy_u8INTSense) {
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3e 83       	std	Y+6, r19	; 0x06
     d9e:	2d 83       	std	Y+5, r18	; 0x05
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	9e 81       	ldd	r25, Y+6	; 0x06
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	21 f1       	breq	.+72     	; 0xdf2 <INT_voidEnable+0x164>
     daa:	2d 81       	ldd	r18, Y+5	; 0x05
     dac:	3e 81       	ldd	r19, Y+6	; 0x06
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <INT_voidEnable+0x130>
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	61 f0       	breq	.+24     	; 0xdd4 <INT_voidEnable+0x146>
     dbc:	46 c0       	rjmp	.+140    	; 0xe4a <INT_voidEnable+0x1bc>
     dbe:	2d 81       	ldd	r18, Y+5	; 0x05
     dc0:	3e 81       	ldd	r19, Y+6	; 0x06
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	21 f1       	breq	.+72     	; 0xe10 <INT_voidEnable+0x182>
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	71 f1       	breq	.+92     	; 0xe2e <INT_voidEnable+0x1a0>
     dd2:	3b c0       	rjmp	.+118    	; 0xe4a <INT_voidEnable+0x1bc>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC10);
     dd4:	a5 e5       	ldi	r26, 0x55	; 85
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e5 e5       	ldi	r30, 0x55	; 85
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8b 7f       	andi	r24, 0xFB	; 251
     de0:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
     de2:	a5 e5       	ldi	r26, 0x55	; 85
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e5       	ldi	r30, 0x55	; 85
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	8c 93       	st	X, r24
     df0:	2c c0       	rjmp	.+88     	; 0xe4a <INT_voidEnable+0x1bc>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
     df2:	a5 e5       	ldi	r26, 0x55	; 85
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e5 e5       	ldi	r30, 0x55	; 85
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
     e00:	a5 e5       	ldi	r26, 0x55	; 85
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e5 e5       	ldi	r30, 0x55	; 85
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 60       	ori	r24, 0x08	; 8
     e0c:	8c 93       	st	X, r24
     e0e:	1d c0       	rjmp	.+58     	; 0xe4a <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
     e10:	a5 e5       	ldi	r26, 0x55	; 85
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e5 e5       	ldi	r30, 0x55	; 85
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	84 60       	ori	r24, 0x04	; 4
     e1c:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
     e1e:	a5 e5       	ldi	r26, 0x55	; 85
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e5       	ldi	r30, 0x55	; 85
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	87 7f       	andi	r24, 0xF7	; 247
     e2a:	8c 93       	st	X, r24
     e2c:	0e c0       	rjmp	.+28     	; 0xe4a <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC10);
     e2e:	a5 e5       	ldi	r26, 0x55	; 85
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e5 e5       	ldi	r30, 0x55	; 85
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8b 7f       	andi	r24, 0xFB	; 251
     e3a:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
     e3c:	a5 e5       	ldi	r26, 0x55	; 85
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e5       	ldi	r30, 0x55	; 85
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	87 7f       	andi	r24, 0xF7	; 247
     e48:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT1);
     e4a:	ab e5       	ldi	r26, 0x5B	; 91
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e5       	ldi	r30, 0x5B	; 91
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	8c 93       	st	X, r24
     e58:	25 c0       	rjmp	.+74     	; 0xea4 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			switch (Copy_u8INTSense) {
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	3c 83       	std	Y+4, r19	; 0x04
     e62:	2b 83       	std	Y+3, r18	; 0x03
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	31 f0       	breq	.+12     	; 0xe78 <INT_voidEnable+0x1ea>
     e6c:	2b 81       	ldd	r18, Y+3	; 0x03
     e6e:	3c 81       	ldd	r19, Y+4	; 0x04
     e70:	21 30       	cpi	r18, 0x01	; 1
     e72:	31 05       	cpc	r19, r1
     e74:	49 f0       	breq	.+18     	; 0xe88 <INT_voidEnable+0x1fa>
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <INT_voidEnable+0x208>
				case INT_SENSE_FALLING_EDGE:
					MCUCSR = CLR_BIT(MCUCSR, ISC2);
     e78:	a4 e5       	ldi	r26, 0x54	; 84
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e5       	ldi	r30, 0x54	; 84
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 7b       	andi	r24, 0xBF	; 191
     e84:	8c 93       	st	X, r24
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <INT_voidEnable+0x208>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCSR = SET_BIT(MCUCSR, ISC2);
     e88:	a4 e5       	ldi	r26, 0x54	; 84
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e4 e5       	ldi	r30, 0x54	; 84
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
					break;

			}
			GICR = SET_BIT(GICR, INT2);
     e96:	ab e5       	ldi	r26, 0x5B	; 91
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	eb e5       	ldi	r30, 0x5B	; 91
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 62       	ori	r24, 0x20	; 32
     ea2:	8c 93       	st	X, r24
			break;
	}
}
     ea4:	2a 96       	adiw	r28, 0x0a	; 10
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <INT_voidDisable>:
void INT_voidDisable(u8 Copy_u8INTIndex){
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <INT_voidDisable+0x6>
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex) {
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3b 83       	std	Y+3, r19	; 0x03
     ecc:	2a 83       	std	Y+2, r18	; 0x02
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	89 f0       	breq	.+34     	; 0xefa <INT_voidDisable+0x44>
     ed8:	2a 81       	ldd	r18, Y+2	; 0x02
     eda:	3b 81       	ldd	r19, Y+3	; 0x03
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	a1 f0       	breq	.+40     	; 0xf0a <INT_voidDisable+0x54>
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	b9 f4       	brne	.+46     	; 0xf18 <INT_voidDisable+0x62>
		case INT_INT0:
			GICR = CLR_BIT(GICR, INT0);
     eea:	ab e5       	ldi	r26, 0x5B	; 91
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	eb e5       	ldi	r30, 0x5B	; 91
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 7b       	andi	r24, 0xBF	; 191
     ef6:	8c 93       	st	X, r24
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <INT_voidDisable+0x62>
			break;

		case INT_INT1:
			GICR = CLR_BIT(GICR, INT1);
     efa:	ab e5       	ldi	r26, 0x5B	; 91
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e5       	ldi	r30, 0x5B	; 91
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 77       	andi	r24, 0x7F	; 127
     f06:	8c 93       	st	X, r24
     f08:	07 c0       	rjmp	.+14     	; 0xf18 <INT_voidDisable+0x62>
			break;

		case INT_INT2:
			GICR = CLR_BIT(GICR, INT2);
     f0a:	ab e5       	ldi	r26, 0x5B	; 91
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e5       	ldi	r30, 0x5B	; 91
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8f 7d       	andi	r24, 0xDF	; 223
     f16:	8c 93       	st	X, r24
			break;
	}
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DIO_voidSetPinDirection>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	29 97       	sbiw	r28, 0x09	; 9
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	6a 83       	std	Y+2, r22	; 0x02
     f3c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	08 f0       	brcs	.+2      	; 0xf46 <DIO_voidSetPinDirection+0x22>
     f44:	ac c1       	rjmp	.+856    	; 0x129e <DIO_voidSetPinDirection+0x37a>
		if (Copy_u8Direction == DIO_PIN_OUTPUT){
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	09 f0       	breq	.+2      	; 0xf4e <DIO_voidSetPinDirection+0x2a>
     f4c:	6f c0       	rjmp	.+222    	; 0x102c <DIO_voidSetPinDirection+0x108>
			switch(Copy_u8Port){
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	39 87       	std	Y+9, r19	; 0x09
     f56:	28 87       	std	Y+8, r18	; 0x08
     f58:	88 85       	ldd	r24, Y+8	; 0x08
     f5a:	99 85       	ldd	r25, Y+9	; 0x09
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	49 f1       	breq	.+82     	; 0xfb4 <DIO_voidSetPinDirection+0x90>
     f62:	28 85       	ldd	r18, Y+8	; 0x08
     f64:	39 85       	ldd	r19, Y+9	; 0x09
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	2c f4       	brge	.+10     	; 0xf76 <DIO_voidSetPinDirection+0x52>
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	99 85       	ldd	r25, Y+9	; 0x09
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	61 f0       	breq	.+24     	; 0xf8c <DIO_voidSetPinDirection+0x68>
     f74:	94 c1       	rjmp	.+808    	; 0x129e <DIO_voidSetPinDirection+0x37a>
     f76:	28 85       	ldd	r18, Y+8	; 0x08
     f78:	39 85       	ldd	r19, Y+9	; 0x09
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	71 f1       	breq	.+92     	; 0xfdc <DIO_voidSetPinDirection+0xb8>
     f80:	88 85       	ldd	r24, Y+8	; 0x08
     f82:	99 85       	ldd	r25, Y+9	; 0x09
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	91 05       	cpc	r25, r1
     f88:	e9 f1       	breq	.+122    	; 0x1004 <DIO_voidSetPinDirection+0xe0>
     f8a:	89 c1       	rjmp	.+786    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = SET_BIT(DDRA,Copy_u8Pin); break;
     f8c:	aa e3       	ldi	r26, 0x3A	; 58
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ea e3       	ldi	r30, 0x3A	; 58
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_voidSetPinDirection+0x86>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_voidSetPinDirection+0x82>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	75 c1       	rjmp	.+746    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = SET_BIT(DDRB,Copy_u8Pin); break;
     fb4:	a7 e3       	ldi	r26, 0x37	; 55
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e3       	ldi	r30, 0x37	; 55
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_voidSetPinDirection+0xae>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_voidSetPinDirection+0xaa>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	61 c1       	rjmp	.+706    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = SET_BIT(DDRC,Copy_u8Pin); break;
     fdc:	a4 e3       	ldi	r26, 0x34	; 52
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 e3       	ldi	r30, 0x34	; 52
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_voidSetPinDirection+0xd6>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_voidSetPinDirection+0xd2>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	4d c1       	rjmp	.+666    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = SET_BIT(DDRD,Copy_u8Pin); break;
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_voidSetPinDirection+0xfe>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_voidSetPinDirection+0xfa>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	39 c1       	rjmp	.+626    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT){
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	88 23       	and	r24, r24
    1030:	09 f0       	breq	.+2      	; 0x1034 <DIO_voidSetPinDirection+0x110>
    1032:	74 c0       	rjmp	.+232    	; 0x111c <DIO_voidSetPinDirection+0x1f8>
			switch(Copy_u8Port){
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3f 83       	std	Y+7, r19	; 0x07
    103c:	2e 83       	std	Y+6, r18	; 0x06
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	9f 81       	ldd	r25, Y+7	; 0x07
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	59 f1       	breq	.+86     	; 0x109e <DIO_voidSetPinDirection+0x17a>
    1048:	2e 81       	ldd	r18, Y+6	; 0x06
    104a:	3f 81       	ldd	r19, Y+7	; 0x07
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <DIO_voidSetPinDirection+0x138>
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	69 f0       	breq	.+26     	; 0x1074 <DIO_voidSetPinDirection+0x150>
    105a:	21 c1       	rjmp	.+578    	; 0x129e <DIO_voidSetPinDirection+0x37a>
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	3f 81       	ldd	r19, Y+7	; 0x07
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	89 f1       	breq	.+98     	; 0x10c8 <DIO_voidSetPinDirection+0x1a4>
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
    1068:	9f 81       	ldd	r25, Y+7	; 0x07
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <DIO_voidSetPinDirection+0x14e>
    1070:	40 c0       	rjmp	.+128    	; 0x10f2 <DIO_voidSetPinDirection+0x1ce>
    1072:	15 c1       	rjmp	.+554    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); break;
    1074:	aa e3       	ldi	r26, 0x3A	; 58
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ea e3       	ldi	r30, 0x3A	; 58
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_voidSetPinDirection+0x16e>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_voidSetPinDirection+0x16a>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	00 c1       	rjmp	.+512    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); break;
    109e:	a7 e3       	ldi	r26, 0x37	; 55
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidSetPinDirection+0x198>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidSetPinDirection+0x194>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	eb c0       	rjmp	.+470    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); break;
    10c8:	a4 e3       	ldi	r26, 0x34	; 52
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e4 e3       	ldi	r30, 0x34	; 52
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_voidSetPinDirection+0x1c2>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_voidSetPinDirection+0x1be>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	d6 c0       	rjmp	.+428    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); break;
    10f2:	a1 e3       	ldi	r26, 0x31	; 49
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e1 e3       	ldi	r30, 0x31	; 49
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_voidSetPinDirection+0x1ec>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_voidSetPinDirection+0x1e8>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	c1 c0       	rjmp	.+386    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				default:	return;	/*do nothing*/
			}			
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT_PULLUP){
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	09 f0       	breq	.+2      	; 0x1124 <DIO_voidSetPinDirection+0x200>
    1122:	bd c0       	rjmp	.+378    	; 0x129e <DIO_voidSetPinDirection+0x37a>
			switch(Copy_u8Port){
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3d 83       	std	Y+5, r19	; 0x05
    112c:	2c 83       	std	Y+4, r18	; 0x04
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <DIO_voidSetPinDirection+0x216>
    1138:	3e c0       	rjmp	.+124    	; 0x11b6 <DIO_voidSetPinDirection+0x292>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	2c f4       	brge	.+10     	; 0x114e <DIO_voidSetPinDirection+0x22a>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	71 f0       	breq	.+28     	; 0x1168 <DIO_voidSetPinDirection+0x244>
    114c:	a8 c0       	rjmp	.+336    	; 0x129e <DIO_voidSetPinDirection+0x37a>
    114e:	2c 81       	ldd	r18, Y+4	; 0x04
    1150:	3d 81       	ldd	r19, Y+5	; 0x05
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <DIO_voidSetPinDirection+0x236>
    1158:	55 c0       	rjmp	.+170    	; 0x1204 <DIO_voidSetPinDirection+0x2e0>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	09 f4       	brne	.+2      	; 0x1166 <DIO_voidSetPinDirection+0x242>
    1164:	76 c0       	rjmp	.+236    	; 0x1252 <DIO_voidSetPinDirection+0x32e>
    1166:	9b c0       	rjmp	.+310    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); PORTA = SET_BIT(PORTA,Copy_u8Pin);break;
    1168:	aa e3       	ldi	r26, 0x3A	; 58
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ea e3       	ldi	r30, 0x3A	; 58
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_voidSetPinDirection+0x260>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	2a 95       	dec	r18
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_voidSetPinDirection+0x25c>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_voidSetPinDirection+0x288>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_voidSetPinDirection+0x284>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	74 c0       	rjmp	.+232    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); PORTB = SET_BIT(PORTB,Copy_u8Pin);break;
    11b6:	a7 e3       	ldi	r26, 0x37	; 55
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e7 e3       	ldi	r30, 0x37	; 55
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_voidSetPinDirection+0x2ae>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	2a 95       	dec	r18
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_voidSetPinDirection+0x2aa>
    11d6:	80 95       	com	r24
    11d8:	84 23       	and	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	a8 e3       	ldi	r26, 0x38	; 56
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e8 e3       	ldi	r30, 0x38	; 56
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_voidSetPinDirection+0x2d6>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_voidSetPinDirection+0x2d2>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	4d c0       	rjmp	.+154    	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); PORTC = SET_BIT(PORTC,Copy_u8Pin);break;
    1204:	a4 e3       	ldi	r26, 0x34	; 52
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e4 e3       	ldi	r30, 0x34	; 52
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_voidSetPinDirection+0x2fc>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	2a 95       	dec	r18
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_voidSetPinDirection+0x2f8>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	a5 e3       	ldi	r26, 0x35	; 53
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_voidSetPinDirection+0x324>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_voidSetPinDirection+0x320>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	26 c0       	rjmp	.+76     	; 0x129e <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); PORTD = SET_BIT(PORTD,Copy_u8Pin);break;
    1252:	a1 e3       	ldi	r26, 0x31	; 49
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e1 e3       	ldi	r30, 0x31	; 49
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_voidSetPinDirection+0x34a>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	2a 95       	dec	r18
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_voidSetPinDirection+0x346>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	a2 e3       	ldi	r26, 0x32	; 50
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_voidSetPinDirection+0x372>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_voidSetPinDirection+0x36e>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
		
	}
	else{
		/*do nothing*/
	}
}
    129e:	29 96       	adiw	r28, 0x09	; 9
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	27 97       	sbiw	r28, 0x07	; 7
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6a 83       	std	Y+2, r22	; 0x02
    12c8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	88 30       	cpi	r24, 0x08	; 8
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <DIO_voidSetPinValue+0x22>
    12d0:	ea c0       	rjmp	.+468    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
		if (Copy_u8Value == DIO_HIGH){
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	09 f0       	breq	.+2      	; 0x12da <DIO_voidSetPinValue+0x2a>
    12d8:	6f c0       	rjmp	.+222    	; 0x13b8 <DIO_voidSetPinValue+0x108>
			switch(Copy_u8Port){
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3f 83       	std	Y+7, r19	; 0x07
    12e2:	2e 83       	std	Y+6, r18	; 0x06
    12e4:	8e 81       	ldd	r24, Y+6	; 0x06
    12e6:	9f 81       	ldd	r25, Y+7	; 0x07
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	49 f1       	breq	.+82     	; 0x1340 <DIO_voidSetPinValue+0x90>
    12ee:	2e 81       	ldd	r18, Y+6	; 0x06
    12f0:	3f 81       	ldd	r19, Y+7	; 0x07
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	2c f4       	brge	.+10     	; 0x1302 <DIO_voidSetPinValue+0x52>
    12f8:	8e 81       	ldd	r24, Y+6	; 0x06
    12fa:	9f 81       	ldd	r25, Y+7	; 0x07
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	61 f0       	breq	.+24     	; 0x1318 <DIO_voidSetPinValue+0x68>
    1300:	d2 c0       	rjmp	.+420    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
    1302:	2e 81       	ldd	r18, Y+6	; 0x06
    1304:	3f 81       	ldd	r19, Y+7	; 0x07
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	71 f1       	breq	.+92     	; 0x1368 <DIO_voidSetPinValue+0xb8>
    130c:	8e 81       	ldd	r24, Y+6	; 0x06
    130e:	9f 81       	ldd	r25, Y+7	; 0x07
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	e9 f1       	breq	.+122    	; 0x1390 <DIO_voidSetPinValue+0xe0>
    1316:	c7 c0       	rjmp	.+398    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = SET_BIT(PORTA,Copy_u8Pin); break;
    1318:	ab e3       	ldi	r26, 0x3B	; 59
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_voidSetPinValue+0x86>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_voidSetPinValue+0x82>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	b3 c0       	rjmp	.+358    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = SET_BIT(PORTB,Copy_u8Pin); break;
    1340:	a8 e3       	ldi	r26, 0x38	; 56
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e8 e3       	ldi	r30, 0x38	; 56
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_voidSetPinValue+0xae>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_voidSetPinValue+0xaa>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	9f c0       	rjmp	.+318    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = SET_BIT(PORTC,Copy_u8Pin); break;
    1368:	a5 e3       	ldi	r26, 0x35	; 53
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e3       	ldi	r30, 0x35	; 53
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_voidSetPinValue+0xd6>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_voidSetPinValue+0xd2>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	8b c0       	rjmp	.+278    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = SET_BIT(PORTD,Copy_u8Pin); break;
    1390:	a2 e3       	ldi	r26, 0x32	; 50
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e2 e3       	ldi	r30, 0x32	; 50
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_voidSetPinValue+0xfe>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_voidSetPinValue+0xfa>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	77 c0       	rjmp	.+238    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Value == DIO_LOW){
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 23       	and	r24, r24
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <DIO_voidSetPinValue+0x110>
    13be:	73 c0       	rjmp	.+230    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
			switch(Copy_u8Port){
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3d 83       	std	Y+5, r19	; 0x05
    13c8:	2c 83       	std	Y+4, r18	; 0x04
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	59 f1       	breq	.+86     	; 0x142a <DIO_voidSetPinValue+0x17a>
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	3d 81       	ldd	r19, Y+5	; 0x05
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <DIO_voidSetPinValue+0x138>
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	69 f0       	breq	.+26     	; 0x1400 <DIO_voidSetPinValue+0x150>
    13e6:	5f c0       	rjmp	.+190    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
    13e8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ea:	3d 81       	ldd	r19, Y+5	; 0x05
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	89 f1       	breq	.+98     	; 0x1454 <DIO_voidSetPinValue+0x1a4>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_voidSetPinValue+0x14e>
    13fc:	40 c0       	rjmp	.+128    	; 0x147e <DIO_voidSetPinValue+0x1ce>
    13fe:	53 c0       	rjmp	.+166    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = CLR_BIT(PORTA,Copy_u8Pin); break;
    1400:	ab e3       	ldi	r26, 0x3B	; 59
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e3       	ldi	r30, 0x3B	; 59
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_voidSetPinValue+0x16e>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_voidSetPinValue+0x16a>
    1422:	80 95       	com	r24
    1424:	84 23       	and	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	3e c0       	rjmp	.+124    	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = CLR_BIT(PORTB,Copy_u8Pin); break;
    142a:	a8 e3       	ldi	r26, 0x38	; 56
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_voidSetPinValue+0x198>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_voidSetPinValue+0x194>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	29 c0       	rjmp	.+82     	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = CLR_BIT(PORTC,Copy_u8Pin); break;
    1454:	a5 e3       	ldi	r26, 0x35	; 53
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e5 e3       	ldi	r30, 0x35	; 53
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_voidSetPinValue+0x1c2>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_voidSetPinValue+0x1be>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = CLR_BIT(PORTD,Copy_u8Pin); break;
    147e:	a2 e3       	ldi	r26, 0x32	; 50
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e2 e3       	ldi	r30, 0x32	; 50
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_voidSetPinValue+0x1ec>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_voidSetPinValue+0x1e8>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}	
}
    14a6:	27 96       	adiw	r28, 0x07	; 7
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_voidTogglePinValue+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_voidTogglePinValue+0x8>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	88 30       	cpi	r24, 0x08	; 8
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <DIO_voidTogglePinValue+0x18>
    14ce:	6e c0       	rjmp	.+220    	; 0x15ac <DIO_voidTogglePinValue+0xf4>
			switch(Copy_u8Port){
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3c 83       	std	Y+4, r19	; 0x04
    14d8:	2b 83       	std	Y+3, r18	; 0x03
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	91 05       	cpc	r25, r1
    14e2:	49 f1       	breq	.+82     	; 0x1536 <DIO_voidTogglePinValue+0x7e>
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	2c f4       	brge	.+10     	; 0x14f8 <DIO_voidTogglePinValue+0x40>
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	61 f0       	breq	.+24     	; 0x150e <DIO_voidTogglePinValue+0x56>
    14f6:	5a c0       	rjmp	.+180    	; 0x15ac <DIO_voidTogglePinValue+0xf4>
    14f8:	2b 81       	ldd	r18, Y+3	; 0x03
    14fa:	3c 81       	ldd	r19, Y+4	; 0x04
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	71 f1       	breq	.+92     	; 0x155e <DIO_voidTogglePinValue+0xa6>
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	91 05       	cpc	r25, r1
    150a:	e9 f1       	breq	.+122    	; 0x1586 <DIO_voidTogglePinValue+0xce>
    150c:	4f c0       	rjmp	.+158    	; 0x15ac <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTA: PORTA = TGL_BIT(PORTA,Copy_u8Pin); break;
    150e:	ab e3       	ldi	r26, 0x3B	; 59
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	eb e3       	ldi	r30, 0x3B	; 59
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_voidTogglePinValue+0x74>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_voidTogglePinValue+0x70>
    1530:	84 27       	eor	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	3b c0       	rjmp	.+118    	; 0x15ac <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTB: PORTB = TGL_BIT(PORTB,Copy_u8Pin); break;
    1536:	a8 e3       	ldi	r26, 0x38	; 56
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e8 e3       	ldi	r30, 0x38	; 56
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_voidTogglePinValue+0x9c>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_voidTogglePinValue+0x98>
    1558:	84 27       	eor	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	27 c0       	rjmp	.+78     	; 0x15ac <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTC: PORTC = TGL_BIT(PORTC,Copy_u8Pin); break;
    155e:	a5 e3       	ldi	r26, 0x35	; 53
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 e3       	ldi	r30, 0x35	; 53
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_voidTogglePinValue+0xc4>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_voidTogglePinValue+0xc0>
    1580:	84 27       	eor	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	13 c0       	rjmp	.+38     	; 0x15ac <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTD: PORTD = TGL_BIT(PORTD,Copy_u8Pin); break;
    1586:	a2 e3       	ldi	r26, 0x32	; 50
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_voidTogglePinValue+0xec>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_voidTogglePinValue+0xe8>
    15a8:	84 27       	eor	r24, r20
    15aa:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <DIO_u8GetPinValue+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_u8GetPinValue+0x8>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_u8GetPinValue+0xa>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	88 30       	cpi	r24, 0x08	; 8
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <DIO_u8GetPinValue+0x1a>
    15d2:	6f c0       	rjmp	.+222    	; 0x16b2 <DIO_u8GetPinValue+0xf8>
		switch(Copy_u8Port){
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3d 83       	std	Y+5, r19	; 0x05
    15dc:	2c 83       	std	Y+4, r18	; 0x04
    15de:	4c 81       	ldd	r20, Y+4	; 0x04
    15e0:	5d 81       	ldd	r21, Y+5	; 0x05
    15e2:	41 30       	cpi	r20, 0x01	; 1
    15e4:	51 05       	cpc	r21, r1
    15e6:	49 f1       	breq	.+82     	; 0x163a <DIO_u8GetPinValue+0x80>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	91 05       	cpc	r25, r1
    15f0:	34 f4       	brge	.+12     	; 0x15fe <DIO_u8GetPinValue+0x44>
    15f2:	2c 81       	ldd	r18, Y+4	; 0x04
    15f4:	3d 81       	ldd	r19, Y+5	; 0x05
    15f6:	21 15       	cp	r18, r1
    15f8:	31 05       	cpc	r19, r1
    15fa:	61 f0       	breq	.+24     	; 0x1614 <DIO_u8GetPinValue+0x5a>
    15fc:	57 c0       	rjmp	.+174    	; 0x16ac <DIO_u8GetPinValue+0xf2>
    15fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1600:	5d 81       	ldd	r21, Y+5	; 0x05
    1602:	42 30       	cpi	r20, 0x02	; 2
    1604:	51 05       	cpc	r21, r1
    1606:	61 f1       	breq	.+88     	; 0x1660 <DIO_u8GetPinValue+0xa6>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	d1 f1       	breq	.+116    	; 0x1686 <DIO_u8GetPinValue+0xcc>
    1612:	4c c0       	rjmp	.+152    	; 0x16ac <DIO_u8GetPinValue+0xf2>
			case DIO_PORTA: return GET_BIT(PINA,Copy_u8Pin); 
    1614:	e9 e3       	ldi	r30, 0x39	; 57
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_u8GetPinValue+0x72>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_u8GetPinValue+0x6e>
    1630:	ca 01       	movw	r24, r20
    1632:	58 2f       	mov	r21, r24
    1634:	51 70       	andi	r21, 0x01	; 1
    1636:	5b 83       	std	Y+3, r21	; 0x03
    1638:	3d c0       	rjmp	.+122    	; 0x16b4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTB: return GET_BIT(PINB,Copy_u8Pin);
    163a:	e6 e3       	ldi	r30, 0x36	; 54
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_u8GetPinValue+0x98>
    164e:	55 95       	asr	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_u8GetPinValue+0x94>
    1656:	ca 01       	movw	r24, r20
    1658:	58 2f       	mov	r21, r24
    165a:	51 70       	andi	r21, 0x01	; 1
    165c:	5b 83       	std	Y+3, r21	; 0x03
    165e:	2a c0       	rjmp	.+84     	; 0x16b4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTC: return GET_BIT(PINC,Copy_u8Pin); 
    1660:	e3 e3       	ldi	r30, 0x33	; 51
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a9 01       	movw	r20, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8GetPinValue+0xbe>
    1674:	55 95       	asr	r21
    1676:	47 95       	ror	r20
    1678:	8a 95       	dec	r24
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_u8GetPinValue+0xba>
    167c:	ca 01       	movw	r24, r20
    167e:	58 2f       	mov	r21, r24
    1680:	51 70       	andi	r21, 0x01	; 1
    1682:	5b 83       	std	Y+3, r21	; 0x03
    1684:	17 c0       	rjmp	.+46     	; 0x16b4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTD: return GET_BIT(PIND,Copy_u8Pin); 
    1686:	e0 e3       	ldi	r30, 0x30	; 48
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_u8GetPinValue+0xe4>
    169a:	55 95       	asr	r21
    169c:	47 95       	ror	r20
    169e:	8a 95       	dec	r24
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_u8GetPinValue+0xe0>
    16a2:	ca 01       	movw	r24, r20
    16a4:	58 2f       	mov	r21, r24
    16a6:	51 70       	andi	r21, 0x01	; 1
    16a8:	5b 83       	std	Y+3, r21	; 0x03
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <DIO_u8GetPinValue+0xfa>
			default       :	return 0xff;              /*as a wrong entry*/						
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	8b 83       	std	Y+3, r24	; 0x03
    16b0:	01 c0       	rjmp	.+2      	; 0x16b4 <DIO_u8GetPinValue+0xfa>
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_u8GetPinValue+0xfe>
		}
	}
	else{
		/*do nothing*/
	}	
}
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	26 96       	adiw	r28, 0x06	; 6
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port, u8 Copy_u8DirValue){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DIO_voidSetPortDirection+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <DIO_voidSetPortDirection+0x8>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3c 83       	std	Y+4, r19	; 0x04
    16e4:	2b 83       	std	Y+3, r18	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	d1 f0       	breq	.+52     	; 0x1724 <DIO_voidSetPortDirection+0x58>
    16f0:	2b 81       	ldd	r18, Y+3	; 0x03
    16f2:	3c 81       	ldd	r19, Y+4	; 0x04
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	2c f4       	brge	.+10     	; 0x1704 <DIO_voidSetPortDirection+0x38>
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	61 f0       	breq	.+24     	; 0x171a <DIO_voidSetPortDirection+0x4e>
    1702:	1e c0       	rjmp	.+60     	; 0x1740 <DIO_voidSetPortDirection+0x74>
    1704:	2b 81       	ldd	r18, Y+3	; 0x03
    1706:	3c 81       	ldd	r19, Y+4	; 0x04
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	81 f0       	breq	.+32     	; 0x172e <DIO_voidSetPortDirection+0x62>
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	91 05       	cpc	r25, r1
    1716:	81 f0       	breq	.+32     	; 0x1738 <DIO_voidSetPortDirection+0x6c>
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTA: DDRA = Copy_u8DirValue; break;
    171a:	ea e3       	ldi	r30, 0x3A	; 58
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	80 83       	st	Z, r24
    1722:	0e c0       	rjmp	.+28     	; 0x1740 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB: DDRB = Copy_u8DirValue; break;
    1724:	e7 e3       	ldi	r30, 0x37	; 55
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	80 83       	st	Z, r24
    172c:	09 c0       	rjmp	.+18     	; 0x1740 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC: DDRC = Copy_u8DirValue; break;
    172e:	e4 e3       	ldi	r30, 0x34	; 52
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 83       	st	Z, r24
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD: DDRD = Copy_u8DirValue; break;
    1738:	e1 e3       	ldi	r30, 0x31	; 49
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_voidSetPortValue+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <DIO_voidSetPortValue+0x8>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3c 83       	std	Y+4, r19	; 0x04
    1766:	2b 83       	std	Y+3, r18	; 0x03
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	d1 f0       	breq	.+52     	; 0x17a6 <DIO_voidSetPortValue+0x58>
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	2c f4       	brge	.+10     	; 0x1786 <DIO_voidSetPortValue+0x38>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	61 f0       	breq	.+24     	; 0x179c <DIO_voidSetPortValue+0x4e>
    1784:	1e c0       	rjmp	.+60     	; 0x17c2 <DIO_voidSetPortValue+0x74>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	81 f0       	breq	.+32     	; 0x17b0 <DIO_voidSetPortValue+0x62>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	91 05       	cpc	r25, r1
    1798:	81 f0       	breq	.+32     	; 0x17ba <DIO_voidSetPortValue+0x6c>
    179a:	13 c0       	rjmp	.+38     	; 0x17c2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTA: PORTA = Copy_u8Value; break;
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	80 83       	st	Z, r24
    17a4:	0e c0       	rjmp	.+28     	; 0x17c2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB: PORTB = Copy_u8Value; break;
    17a6:	e8 e3       	ldi	r30, 0x38	; 56
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	80 83       	st	Z, r24
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC: PORTC = Copy_u8Value; break;
    17b0:	e5 e3       	ldi	r30, 0x35	; 53
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	80 83       	st	Z, r24
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD: PORTD = Copy_u8Value; break;
    17ba:	e2 e3       	ldi	r30, 0x32	; 50
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
		
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <ADC_voidInit>:
#define ADC_REF_AREF	1
#define ADC_REF_INTERNAL_2V56	2

#include "ADC.h"

void ADC_voidInit(u8 Copy_u8Prescaler){
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01
	/*Enable ADC*/
	ADCSRA = SET_BIT(ADCSRA, ADEN);
    17dc:	a6 e2       	ldi	r26, 0x26	; 38
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e6 e2       	ldi	r30, 0x26	; 38
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	8c 93       	st	X, r24
	ADCSRA &= (0b11111000 | Copy_u8Prescaler);
    17ea:	a6 e2       	ldi	r26, 0x26	; 38
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e6 e2       	ldi	r30, 0x26	; 38
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	90 81       	ld	r25, Z
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	88 6f       	ori	r24, 0xF8	; 248
    17f8:	89 23       	and	r24, r25
    17fa:	8c 93       	st	X, r24
//	ADCSRA |= Copy_u8Prescaler;

	/*Select VREF*/
	/*ADMUX REFS1,REFS0*/
	#if ADC_REF_VOLTEAGE == ADC_REF_AVCC
		ADMUX = SET_BIT(ADMUX, REFS0);
    17fc:	a7 e2       	ldi	r26, 0x27	; 39
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e7 e2       	ldi	r30, 0x27	; 39
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 64       	ori	r24, 0x40	; 64
    1808:	8c 93       	st	X, r24
		ADMUX = CLR_BIT(ADMUX, REFS1);
    180a:	a7 e2       	ldi	r26, 0x27	; 39
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e7 e2       	ldi	r30, 0x27	; 39
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 77       	andi	r24, 0x7F	; 127
    1816:	8c 93       	st	X, r24
		ADMUX = SET_BIT(ADMUX, REFS0);
		ADMUX = SET_BIT(ADMUX, REFS1);
	#endif

	/*select right adjust*/
	ADMUX = CLR_BIT(ADMUX, ADLAR);
    1818:	a7 e2       	ldi	r26, 0x27	; 39
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e7 e2       	ldi	r30, 0x27	; 39
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8f 7d       	andi	r24, 0xDF	; 223
    1824:	8c 93       	st	X, r24



}
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <ADC_u16GetDigitalValue>:

u16 ADC_u16GetDigitalValue (u8 Copy_u8Channel){
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <ADC_u16GetDigitalValue+0x6>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	ADMUX &= 0b11100000;
    183a:	a7 e2       	ldi	r26, 0x27	; 39
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e7 e2       	ldi	r30, 0x27	; 39
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 7e       	andi	r24, 0xE0	; 224
    1846:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
    1848:	a7 e2       	ldi	r26, 0x27	; 39
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e7 e2       	ldi	r30, 0x27	; 39
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	90 81       	ld	r25, Z
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	89 2b       	or	r24, r25
    1856:	8c 93       	st	X, r24

	/*Start Conversion*/
	ADCSRA = SET_BIT(ADCSRA, ADSC);
    1858:	a6 e2       	ldi	r26, 0x26	; 38
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e6 e2       	ldi	r30, 0x26	; 38
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 64       	ori	r24, 0x40	; 64
    1864:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA, ADIF) == 0); // Wait
    1866:	e6 e2       	ldi	r30, 0x26	; 38
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z

	ADCSRA = CLR_BIT(ADCSRA,ADIF);
    186c:	a6 e2       	ldi	r26, 0x26	; 38
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e6 e2       	ldi	r30, 0x26	; 38
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8f 7e       	andi	r24, 0xEF	; 239
    1878:	8c 93       	st	X, r24

	return ADC;
    187a:	e4 e2       	ldi	r30, 0x24	; 36
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <ADC_voidDisable>:

void ADC_voidDisable (void){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = CLR_BIT(ADCSRA, ADEN);
    1894:	a6 e2       	ldi	r26, 0x26	; 38
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e6 e2       	ldi	r30, 0x26	; 38
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8f 77       	andi	r24, 0x7F	; 127
    18a0:	8c 93       	st	X, r24

}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <SSD_voidInitSingleDigit>:
#include "../../MCAL/DIO/DIO.h"
#include "../../HAL/SSD/SSD.h"

u8 SSD_mappingArray[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void SSD_voidInitSingleDigit(u8 Copy_u8Port){
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection (Copy_u8Port, DIO_PORT_OUTPUT);
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	6f ef       	ldi	r22, 0xFF	; 255
    18b8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_voidSetPortDirection>
}
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <SSD_voidInitDoubleDigit>:

void SSD_voidInitDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU){
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <SSD_voidInitDoubleDigit+0x6>
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortDirection (Copy_u8PortL, DIO_PORT_OUTPUT);
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	6f ef       	ldi	r22, 0xFF	; 255
    18d6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection (Copy_u8PortU, DIO_PORT_OUTPUT);
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	6f ef       	ldi	r22, 0xFF	; 255
    18de:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_voidSetPortDirection>
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <SSD_voidWriteSingleDigit>:

void SSD_voidWriteSingleDigit(u8 Copy_u8Port, u8 Copy_u8Value){
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <SSD_voidWriteSingleDigit+0x6>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue (Copy_u8Port, SSD_mappingArray[Copy_u8Value]);
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	e8 59       	subi	r30, 0x98	; 152
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	90 81       	ld	r25, Z
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	69 2f       	mov	r22, r25
    190c:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_voidSetPortValue>
//	DIO_voidSetPortValue (Copy_u8Port, 0xff);
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <SSD_voidWriteDoubleDigit>:

void SSD_voidWriteDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU, u8 Copy_u8Value){
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <SSD_voidWriteDoubleDigit+0x6>
    1920:	0f 92       	push	r0
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	6a 83       	std	Y+2, r22	; 0x02
    192a:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPortValue (Copy_u8PortL, SSD_mappingArray[Copy_u8Value%10]);
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9a e0       	ldi	r25, 0x0A	; 10
    1930:	69 2f       	mov	r22, r25
    1932:	0e 94 34 14 	call	0x2868	; 0x2868 <__udivmodqi4>
    1936:	89 2f       	mov	r24, r25
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	fc 01       	movw	r30, r24
    193e:	e8 59       	subi	r30, 0x98	; 152
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	90 81       	ld	r25, Z
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	69 2f       	mov	r22, r25
    1948:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_voidSetPortValue>
	DIO_voidSetPortValue (Copy_u8PortU, SSD_mappingArray[Copy_u8Value/10]);
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	69 2f       	mov	r22, r25
    1952:	0e 94 34 14 	call	0x2868	; 0x2868 <__udivmodqi4>
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	fc 01       	movw	r30, r24
    195c:	e8 59       	subi	r30, 0x98	; 152
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	90 81       	ld	r25, Z
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	69 2f       	mov	r22, r25
    1966:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_voidSetPortValue>
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <LCD_voidInit>:
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"
#include <util/delay.h>

void LCD_voidInit (void){
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	cc 54       	subi	r28, 0x4C	; 76
    1984:	d0 40       	sbci	r29, 0x00	; 0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection (LCD_DATA_PORT, DIO_PORT_OUTPUT);
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	6f ef       	ldi	r22, 0xFF	; 255
    1994:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_PIN_OUTPUT);
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	67 e0       	ldi	r22, 0x07	; 7
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_PIN_OUTPUT);
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	66 e0       	ldi	r22, 0x06	; 6
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_PIN_OUTPUT);
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	65 e0       	ldi	r22, 0x05	; 5
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
    19b6:	fe 01       	movw	r30, r28
    19b8:	e7 5b       	subi	r30, 0xB7	; 183
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	ac e0       	ldi	r26, 0x0C	; 12
    19c2:	b2 e4       	ldi	r27, 0x42	; 66
    19c4:	80 83       	st	Z, r24
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	a2 83       	std	Z+2, r26	; 0x02
    19ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	8e 01       	movw	r16, r28
    19ce:	0b 5b       	subi	r16, 0xBB	; 187
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	fe 01       	movw	r30, r28
    19d4:	e7 5b       	subi	r30, 0xB7	; 183
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a ef       	ldi	r20, 0xFA	; 250
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	f8 01       	movw	r30, r16
    19f2:	80 83       	st	Z, r24
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	a2 83       	std	Z+2, r26	; 0x02
    19f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19fa:	fe 01       	movw	r30, r28
    19fc:	eb 5b       	subi	r30, 0xBB	; 187
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	44 f4       	brge	.+16     	; 0x1a28 <LCD_voidInit+0xb2>
		__ticks = 1;
    1a18:	fe 01       	movw	r30, r28
    1a1a:	ed 5b       	subi	r30, 0xBD	; 189
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	80 83       	st	Z, r24
    1a26:	64 c0       	rjmp	.+200    	; 0x1af0 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1a28:	fe 01       	movw	r30, r28
    1a2a:	eb 5b       	subi	r30, 0xBB	; 187
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	0c f0       	brlt	.+2      	; 0x1a48 <LCD_voidInit+0xd2>
    1a46:	43 c0       	rjmp	.+134    	; 0x1ace <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e7 5b       	subi	r30, 0xB7	; 183
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8e 01       	movw	r16, r28
    1a68:	0d 5b       	subi	r16, 0xBD	; 189
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	f8 01       	movw	r30, r16
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
    1a7e:	1f c0       	rjmp	.+62     	; 0x1abe <LCD_voidInit+0x148>
    1a80:	fe 01       	movw	r30, r28
    1a82:	ef 5b       	subi	r30, 0xBF	; 191
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	88 ec       	ldi	r24, 0xC8	; 200
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ef 5b       	subi	r30, 0xBF	; 191
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_voidInit+0x122>
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ef 5b       	subi	r30, 0xBF	; 191
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa6:	de 01       	movw	r26, r28
    1aa8:	ad 5b       	subi	r26, 0xBD	; 189
    1aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    1aac:	fe 01       	movw	r30, r28
    1aae:	ed 5b       	subi	r30, 0xBD	; 189
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	11 96       	adiw	r26, 0x01	; 1
    1aba:	9c 93       	st	X, r25
    1abc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ed 5b       	subi	r30, 0xBD	; 189
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	d1 f6       	brne	.-76     	; 0x1a80 <LCD_voidInit+0x10a>
    1acc:	24 c0       	rjmp	.+72     	; 0x1b16 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	8e 01       	movw	r16, r28
    1ad0:	0d 5b       	subi	r16, 0xBD	; 189
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	eb 5b       	subi	r30, 0xBB	; 187
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	f8 01       	movw	r30, r16
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
    1af0:	fe 01       	movw	r30, r28
    1af2:	ed 5b       	subi	r30, 0xBD	; 189
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	fe 01       	movw	r30, r28
    1afc:	ff 96       	adiw	r30, 0x3f	; 63
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	fe 01       	movw	r30, r28
    1b04:	ff 96       	adiw	r30, 0x3f	; 63
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_voidInit+0x194>
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ff 96       	adiw	r30, 0x3f	; 63
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24

	_delay_ms(35);

	LCD_voidSendCommand (LCD_CONTROL_FUNCTION_SET);
    1b16:	88 e3       	ldi	r24, 0x38	; 56
    1b18:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_voidSendCommand>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a8 e4       	ldi	r26, 0x48	; 72
    1b22:	b2 e4       	ldi	r27, 0x42	; 66
    1b24:	8b af       	std	Y+59, r24	; 0x3b
    1b26:	9c af       	std	Y+60, r25	; 0x3c
    1b28:	ad af       	std	Y+61, r26	; 0x3d
    1b2a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b2c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b2e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b30:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b32:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b34:	2b ea       	ldi	r18, 0xAB	; 171
    1b36:	3a ea       	ldi	r19, 0xAA	; 170
    1b38:	4a e2       	ldi	r20, 0x2A	; 42
    1b3a:	50 e4       	ldi	r21, 0x40	; 64
    1b3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8f ab       	std	Y+55, r24	; 0x37
    1b46:	98 af       	std	Y+56, r25	; 0x38
    1b48:	a9 af       	std	Y+57, r26	; 0x39
    1b4a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b4c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b4e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b50:	89 ad       	ldd	r24, Y+57	; 0x39
    1b52:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	1c f4       	brge	.+6      	; 0x1b6a <LCD_voidInit+0x1f4>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	8e ab       	std	Y+54, r24	; 0x36
    1b68:	91 c0       	rjmp	.+290    	; 0x1c8c <LCD_voidInit+0x316>
	else if (__tmp > 255)
    1b6a:	6f a9       	ldd	r22, Y+55	; 0x37
    1b6c:	78 ad       	ldd	r23, Y+56	; 0x38
    1b6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	53 e4       	ldi	r21, 0x43	; 67
    1b7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	0c f0       	brlt	.+2      	; 0x1b84 <LCD_voidInit+0x20e>
    1b82:	7b c0       	rjmp	.+246    	; 0x1c7a <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1b84:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b86:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b88:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a e7       	ldi	r20, 0x7A	; 122
    1b92:	54 e4       	ldi	r21, 0x44	; 68
    1b94:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8a ab       	std	Y+50, r24	; 0x32
    1b9e:	9b ab       	std	Y+51, r25	; 0x33
    1ba0:	ac ab       	std	Y+52, r26	; 0x34
    1ba2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	6a a9       	ldd	r22, Y+50	; 0x32
    1ba6:	7b a9       	ldd	r23, Y+51	; 0x33
    1ba8:	8c a9       	ldd	r24, Y+52	; 0x34
    1baa:	9d a9       	ldd	r25, Y+53	; 0x35
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4a ef       	ldi	r20, 0xFA	; 250
    1bb2:	54 e4       	ldi	r21, 0x44	; 68
    1bb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	8e a7       	std	Y+46, r24	; 0x2e
    1bbe:	9f a7       	std	Y+47, r25	; 0x2f
    1bc0:	a8 ab       	std	Y+48, r26	; 0x30
    1bc2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1bc4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bc6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bc8:	88 a9       	ldd	r24, Y+48	; 0x30
    1bca:	99 a9       	ldd	r25, Y+49	; 0x31
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <LCD_voidInit+0x270>
		__ticks = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9d a7       	std	Y+45, r25	; 0x2d
    1be2:	8c a7       	std	Y+44, r24	; 0x2c
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    1be6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1be8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bea:	88 a9       	ldd	r24, Y+48	; 0x30
    1bec:	99 a9       	ldd	r25, Y+49	; 0x31
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	4c f5       	brge	.+82     	; 0x1c50 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	6a a9       	ldd	r22, Y+50	; 0x32
    1c00:	7b a9       	ldd	r23, Y+51	; 0x33
    1c02:	8c a9       	ldd	r24, Y+52	; 0x34
    1c04:	9d a9       	ldd	r25, Y+53	; 0x35
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9d a7       	std	Y+45, r25	; 0x2d
    1c24:	8c a7       	std	Y+44, r24	; 0x2c
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <LCD_voidInit+0x2d0>
    1c28:	88 ec       	ldi	r24, 0xC8	; 200
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9b a7       	std	Y+43, r25	; 0x2b
    1c2e:	8a a7       	std	Y+42, r24	; 0x2a
    1c30:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c32:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_voidInit+0x2be>
    1c38:	9b a7       	std	Y+43, r25	; 0x2b
    1c3a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9d a7       	std	Y+45, r25	; 0x2d
    1c44:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c48:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	69 f7       	brne	.-38     	; 0x1c28 <LCD_voidInit+0x2b2>
    1c4e:	24 c0       	rjmp	.+72     	; 0x1c98 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c52:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c54:	88 a9       	ldd	r24, Y+48	; 0x30
    1c56:	99 a9       	ldd	r25, Y+49	; 0x31
    1c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9d a7       	std	Y+45, r25	; 0x2d
    1c62:	8c a7       	std	Y+44, r24	; 0x2c
    1c64:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c66:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c68:	99 a7       	std	Y+41, r25	; 0x29
    1c6a:	88 a7       	std	Y+40, r24	; 0x28
    1c6c:	88 a5       	ldd	r24, Y+40	; 0x28
    1c6e:	99 a5       	ldd	r25, Y+41	; 0x29
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_voidInit+0x2fa>
    1c74:	99 a7       	std	Y+41, r25	; 0x29
    1c76:	88 a7       	std	Y+40, r24	; 0x28
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c7a:	6f a9       	ldd	r22, Y+55	; 0x37
    1c7c:	78 ad       	ldd	r23, Y+56	; 0x38
    1c7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	8e ab       	std	Y+54, r24	; 0x36
    1c8c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c8e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c90:	8f a1       	ldd	r24, Y+39	; 0x27
    1c92:	8a 95       	dec	r24
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_voidInit+0x31c>
    1c96:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_DISPLAY_ONOFF);
    1c98:	8f e0       	ldi	r24, 0x0F	; 15
    1c9a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_voidSendCommand>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a8 e4       	ldi	r26, 0x48	; 72
    1ca4:	b2 e4       	ldi	r27, 0x42	; 66
    1ca6:	8b a3       	std	Y+35, r24	; 0x23
    1ca8:	9c a3       	std	Y+36, r25	; 0x24
    1caa:	ad a3       	std	Y+37, r26	; 0x25
    1cac:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cae:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb6:	2b ea       	ldi	r18, 0xAB	; 171
    1cb8:	3a ea       	ldi	r19, 0xAA	; 170
    1cba:	4a e2       	ldi	r20, 0x2A	; 42
    1cbc:	50 e4       	ldi	r21, 0x40	; 64
    1cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1cc8:	98 a3       	std	Y+32, r25	; 0x20
    1cca:	a9 a3       	std	Y+33, r26	; 0x21
    1ccc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1cce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cd0:	78 a1       	ldd	r23, Y+32	; 0x20
    1cd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	1c f4       	brge	.+6      	; 0x1cec <LCD_voidInit+0x376>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	8e 8f       	std	Y+30, r24	; 0x1e
    1cea:	91 c0       	rjmp	.+290    	; 0x1e0e <LCD_voidInit+0x498>
	else if (__tmp > 255)
    1cec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cee:	78 a1       	ldd	r23, Y+32	; 0x20
    1cf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	53 e4       	ldi	r21, 0x43	; 67
    1cfc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	0c f0       	brlt	.+2      	; 0x1d06 <LCD_voidInit+0x390>
    1d04:	7b c0       	rjmp	.+246    	; 0x1dfc <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1d06:	6b a1       	ldd	r22, Y+35	; 0x23
    1d08:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a e7       	ldi	r20, 0x7A	; 122
    1d14:	54 e4       	ldi	r21, 0x44	; 68
    1d16:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d20:	9b 8f       	std	Y+27, r25	; 0x1b
    1d22:	ac 8f       	std	Y+28, r26	; 0x1c
    1d24:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d28:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a ef       	ldi	r20, 0xFA	; 250
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8e 8b       	std	Y+22, r24	; 0x16
    1d40:	9f 8b       	std	Y+23, r25	; 0x17
    1d42:	a8 8f       	std	Y+24, r26	; 0x18
    1d44:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d46:	6e 89       	ldd	r22, Y+22	; 0x16
    1d48:	7f 89       	ldd	r23, Y+23	; 0x17
    1d4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <LCD_voidInit+0x3f2>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9d 8b       	std	Y+21, r25	; 0x15
    1d64:	8c 8b       	std	Y+20, r24	; 0x14
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    1d68:	6e 89       	ldd	r22, Y+22	; 0x16
    1d6a:	7f 89       	ldd	r23, Y+23	; 0x17
    1d6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d6e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d82:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9d 8b       	std	Y+21, r25	; 0x15
    1da6:	8c 8b       	std	Y+20, r24	; 0x14
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <LCD_voidInit+0x452>
    1daa:	88 ec       	ldi	r24, 0xC8	; 200
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9b 8b       	std	Y+19, r25	; 0x13
    1db0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db2:	8a 89       	ldd	r24, Y+18	; 0x12
    1db4:	9b 89       	ldd	r25, Y+19	; 0x13
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_voidInit+0x440>
    1dba:	9b 8b       	std	Y+19, r25	; 0x13
    1dbc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8c 89       	ldd	r24, Y+20	; 0x14
    1dc0:	9d 89       	ldd	r25, Y+21	; 0x15
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9d 8b       	std	Y+21, r25	; 0x15
    1dc6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8c 89       	ldd	r24, Y+20	; 0x14
    1dca:	9d 89       	ldd	r25, Y+21	; 0x15
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <LCD_voidInit+0x434>
    1dd0:	24 c0       	rjmp	.+72     	; 0x1e1a <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6e 89       	ldd	r22, Y+22	; 0x16
    1dd4:	7f 89       	ldd	r23, Y+23	; 0x17
    1dd6:	88 8d       	ldd	r24, Y+24	; 0x18
    1dd8:	99 8d       	ldd	r25, Y+25	; 0x19
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9d 8b       	std	Y+21, r25	; 0x15
    1de4:	8c 8b       	std	Y+20, r24	; 0x14
    1de6:	8c 89       	ldd	r24, Y+20	; 0x14
    1de8:	9d 89       	ldd	r25, Y+21	; 0x15
    1dea:	99 8b       	std	Y+17, r25	; 0x11
    1dec:	88 8b       	std	Y+16, r24	; 0x10
    1dee:	88 89       	ldd	r24, Y+16	; 0x10
    1df0:	99 89       	ldd	r25, Y+17	; 0x11
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_voidInit+0x47c>
    1df6:	99 8b       	std	Y+17, r25	; 0x11
    1df8:	88 8b       	std	Y+16, r24	; 0x10
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dfc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dfe:	78 a1       	ldd	r23, Y+32	; 0x20
    1e00:	89 a1       	ldd	r24, Y+33	; 0x21
    1e02:	9a a1       	ldd	r25, Y+34	; 0x22
    1e04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e10:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e14:	8a 95       	dec	r24
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_voidInit+0x49e>
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_CLEAR);
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_voidSendCommand>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	b0 e4       	ldi	r27, 0x40	; 64
    1e28:	8b 87       	std	Y+11, r24	; 0x0b
    1e2a:	9c 87       	std	Y+12, r25	; 0x0c
    1e2c:	ad 87       	std	Y+13, r26	; 0x0d
    1e2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a ef       	ldi	r20, 0xFA	; 250
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8f 83       	std	Y+7, r24	; 0x07
    1e4a:	98 87       	std	Y+8, r25	; 0x08
    1e4c:	a9 87       	std	Y+9, r26	; 0x09
    1e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e50:	6f 81       	ldd	r22, Y+7	; 0x07
    1e52:	78 85       	ldd	r23, Y+8	; 0x08
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <LCD_voidInit+0x4fc>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <LCD_voidInit+0x55c>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_voidInit+0x54a>
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <LCD_voidInit+0x53e>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_voidInit+0x586>
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1f04:	c4 5b       	subi	r28, 0xB4	; 180
    1f06:	df 4f       	sbci	r29, 0xFF	; 255
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Copy_u8Command){
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	69 97       	sbiw	r28, 0x19	; 25
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_LOW);
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	67 e0       	ldi	r22, 0x07	; 7
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    1f3c:	83 e0       	ldi	r24, 0x03	; 3
    1f3e:	66 e0       	ldi	r22, 0x06	; 6
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Command);
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4a:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	65 e0       	ldi	r22, 0x05	; 5
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 e8       	ldi	r26, 0x80	; 128
    1f5e:	bf e3       	ldi	r27, 0x3F	; 63
    1f60:	8d 8b       	std	Y+21, r24	; 0x15
    1f62:	9e 8b       	std	Y+22, r25	; 0x16
    1f64:	af 8b       	std	Y+23, r26	; 0x17
    1f66:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	2b ea       	ldi	r18, 0xAB	; 171
    1f72:	3a ea       	ldi	r19, 0xAA	; 170
    1f74:	4a e2       	ldi	r20, 0x2A	; 42
    1f76:	50 e4       	ldi	r21, 0x40	; 64
    1f78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	89 8b       	std	Y+17, r24	; 0x11
    1f82:	9a 8b       	std	Y+18, r25	; 0x12
    1f84:	ab 8b       	std	Y+19, r26	; 0x13
    1f86:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f88:	69 89       	ldd	r22, Y+17	; 0x11
    1f8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	1c f4       	brge	.+6      	; 0x1fa6 <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	88 8b       	std	Y+16, r24	; 0x10
    1fa4:	91 c0       	rjmp	.+290    	; 0x20c8 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1fa6:	69 89       	ldd	r22, Y+17	; 0x11
    1fa8:	7a 89       	ldd	r23, Y+18	; 0x12
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	53 e4       	ldi	r21, 0x43	; 67
    1fb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	0c f0       	brlt	.+2      	; 0x1fc0 <LCD_voidSendCommand+0xa4>
    1fbe:	7b c0       	rjmp	.+246    	; 0x20b6 <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1fc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a e7       	ldi	r20, 0x7A	; 122
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8c 87       	std	Y+12, r24	; 0x0c
    1fda:	9d 87       	std	Y+13, r25	; 0x0d
    1fdc:	ae 87       	std	Y+14, r26	; 0x0e
    1fde:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fe2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fe4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fe6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a ef       	ldi	r20, 0xFA	; 250
    1fee:	54 e4       	ldi	r21, 0x44	; 68
    1ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	88 87       	std	Y+8, r24	; 0x08
    1ffa:	99 87       	std	Y+9, r25	; 0x09
    1ffc:	aa 87       	std	Y+10, r26	; 0x0a
    1ffe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2000:	68 85       	ldd	r22, Y+8	; 0x08
    2002:	79 85       	ldd	r23, Y+9	; 0x09
    2004:	8a 85       	ldd	r24, Y+10	; 0x0a
    2006:	9b 85       	ldd	r25, Y+11	; 0x0b
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9f 83       	std	Y+7, r25	; 0x07
    201e:	8e 83       	std	Y+6, r24	; 0x06
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    2022:	68 85       	ldd	r22, Y+8	; 0x08
    2024:	79 85       	ldd	r23, Y+9	; 0x09
    2026:	8a 85       	ldd	r24, Y+10	; 0x0a
    2028:	9b 85       	ldd	r25, Y+11	; 0x0b
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	4c f5       	brge	.+82     	; 0x208c <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	6c 85       	ldd	r22, Y+12	; 0x0c
    203c:	7d 85       	ldd	r23, Y+13	; 0x0d
    203e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2040:	9f 85       	ldd	r25, Y+15	; 0x0f
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e2       	ldi	r20, 0x20	; 32
    2048:	51 e4       	ldi	r21, 0x41	; 65
    204a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9f 83       	std	Y+7, r25	; 0x07
    2060:	8e 83       	std	Y+6, r24	; 0x06
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <LCD_voidSendCommand+0x166>
    2064:	88 ec       	ldi	r24, 0xC8	; 200
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9d 83       	std	Y+5, r25	; 0x05
    206a:	8c 83       	std	Y+4, r24	; 0x04
    206c:	8c 81       	ldd	r24, Y+4	; 0x04
    206e:	9d 81       	ldd	r25, Y+5	; 0x05
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_voidSendCommand+0x154>
    2074:	9d 83       	std	Y+5, r25	; 0x05
    2076:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2078:	8e 81       	ldd	r24, Y+6	; 0x06
    207a:	9f 81       	ldd	r25, Y+7	; 0x07
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9f 83       	std	Y+7, r25	; 0x07
    2080:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	8e 81       	ldd	r24, Y+6	; 0x06
    2084:	9f 81       	ldd	r25, Y+7	; 0x07
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	69 f7       	brne	.-38     	; 0x2064 <LCD_voidSendCommand+0x148>
    208a:	24 c0       	rjmp	.+72     	; 0x20d4 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208c:	68 85       	ldd	r22, Y+8	; 0x08
    208e:	79 85       	ldd	r23, Y+9	; 0x09
    2090:	8a 85       	ldd	r24, Y+10	; 0x0a
    2092:	9b 85       	ldd	r25, Y+11	; 0x0b
    2094:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9f 83       	std	Y+7, r25	; 0x07
    209e:	8e 83       	std	Y+6, r24	; 0x06
    20a0:	8e 81       	ldd	r24, Y+6	; 0x06
    20a2:	9f 81       	ldd	r25, Y+7	; 0x07
    20a4:	9b 83       	std	Y+3, r25	; 0x03
    20a6:	8a 83       	std	Y+2, r24	; 0x02
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_voidSendCommand+0x190>
    20b0:	9b 83       	std	Y+3, r25	; 0x03
    20b2:	8a 83       	std	Y+2, r24	; 0x02
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20b6:	69 89       	ldd	r22, Y+17	; 0x11
    20b8:	7a 89       	ldd	r23, Y+18	; 0x12
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	88 8b       	std	Y+16, r24	; 0x10
    20c8:	88 89       	ldd	r24, Y+16	; 0x10
    20ca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	8a 95       	dec	r24
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_voidSendCommand+0x1b2>
    20d2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    20d4:	83 e0       	ldi	r24, 0x03	; 3
    20d6:	65 e0       	ldi	r22, 0x05	; 5
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>

}
    20de:	69 96       	adiw	r28, 0x19	; 25
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_u8Char){
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	69 97       	sbiw	r28, 0x19	; 25
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_HIGH);
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	67 e0       	ldi	r22, 0x07	; 7
    210a:	41 e0       	ldi	r20, 0x01	; 1
    210c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	66 e0       	ldi	r22, 0x06	; 6
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Char);
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	69 8d       	ldd	r22, Y+25	; 0x19
    211e:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	65 e0       	ldi	r22, 0x05	; 5
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e8       	ldi	r26, 0x80	; 128
    2132:	bf e3       	ldi	r27, 0x3F	; 63
    2134:	8d 8b       	std	Y+21, r24	; 0x15
    2136:	9e 8b       	std	Y+22, r25	; 0x16
    2138:	af 8b       	std	Y+23, r26	; 0x17
    213a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	2b ea       	ldi	r18, 0xAB	; 171
    2146:	3a ea       	ldi	r19, 0xAA	; 170
    2148:	4a e2       	ldi	r20, 0x2A	; 42
    214a:	50 e4       	ldi	r21, 0x40	; 64
    214c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	89 8b       	std	Y+17, r24	; 0x11
    2156:	9a 8b       	std	Y+18, r25	; 0x12
    2158:	ab 8b       	std	Y+19, r26	; 0x13
    215a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    215c:	69 89       	ldd	r22, Y+17	; 0x11
    215e:	7a 89       	ldd	r23, Y+18	; 0x12
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	1c f4       	brge	.+6      	; 0x217a <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	88 8b       	std	Y+16, r24	; 0x10
    2178:	91 c0       	rjmp	.+290    	; 0x229c <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    217a:	69 89       	ldd	r22, Y+17	; 0x11
    217c:	7a 89       	ldd	r23, Y+18	; 0x12
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	53 e4       	ldi	r21, 0x43	; 67
    218a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	0c f0       	brlt	.+2      	; 0x2194 <LCD_voidSendChar+0xa4>
    2192:	7b c0       	rjmp	.+246    	; 0x228a <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a e7       	ldi	r20, 0x7A	; 122
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8c 87       	std	Y+12, r24	; 0x0c
    21ae:	9d 87       	std	Y+13, r25	; 0x0d
    21b0:	ae 87       	std	Y+14, r26	; 0x0e
    21b2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    21b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    21b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a ef       	ldi	r20, 0xFA	; 250
    21c2:	54 e4       	ldi	r21, 0x44	; 68
    21c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	88 87       	std	Y+8, r24	; 0x08
    21ce:	99 87       	std	Y+9, r25	; 0x09
    21d0:	aa 87       	std	Y+10, r26	; 0x0a
    21d2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21d4:	68 85       	ldd	r22, Y+8	; 0x08
    21d6:	79 85       	ldd	r23, Y+9	; 0x09
    21d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21da:	9b 85       	ldd	r25, Y+11	; 0x0b
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <LCD_voidSendChar+0x106>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9f 83       	std	Y+7, r25	; 0x07
    21f2:	8e 83       	std	Y+6, r24	; 0x06
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    21f6:	68 85       	ldd	r22, Y+8	; 0x08
    21f8:	79 85       	ldd	r23, Y+9	; 0x09
    21fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    21fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	4f e7       	ldi	r20, 0x7F	; 127
    2204:	57 e4       	ldi	r21, 0x47	; 71
    2206:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    220a:	18 16       	cp	r1, r24
    220c:	4c f5       	brge	.+82     	; 0x2260 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2210:	7d 85       	ldd	r23, Y+13	; 0x0d
    2212:	8e 85       	ldd	r24, Y+14	; 0x0e
    2214:	9f 85       	ldd	r25, Y+15	; 0x0f
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9f 83       	std	Y+7, r25	; 0x07
    2234:	8e 83       	std	Y+6, r24	; 0x06
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_voidSendChar+0x166>
    2238:	88 ec       	ldi	r24, 0xC8	; 200
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9d 83       	std	Y+5, r25	; 0x05
    223e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2240:	8c 81       	ldd	r24, Y+4	; 0x04
    2242:	9d 81       	ldd	r25, Y+5	; 0x05
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_voidSendChar+0x154>
    2248:	9d 83       	std	Y+5, r25	; 0x05
    224a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	8e 81       	ldd	r24, Y+6	; 0x06
    224e:	9f 81       	ldd	r25, Y+7	; 0x07
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	9f 83       	std	Y+7, r25	; 0x07
    2254:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	9f 81       	ldd	r25, Y+7	; 0x07
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f7       	brne	.-38     	; 0x2238 <LCD_voidSendChar+0x148>
    225e:	24 c0       	rjmp	.+72     	; 0x22a8 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2260:	68 85       	ldd	r22, Y+8	; 0x08
    2262:	79 85       	ldd	r23, Y+9	; 0x09
    2264:	8a 85       	ldd	r24, Y+10	; 0x0a
    2266:	9b 85       	ldd	r25, Y+11	; 0x0b
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9f 83       	std	Y+7, r25	; 0x07
    2272:	8e 83       	std	Y+6, r24	; 0x06
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	9b 83       	std	Y+3, r25	; 0x03
    227a:	8a 83       	std	Y+2, r24	; 0x02
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_voidSendChar+0x190>
    2284:	9b 83       	std	Y+3, r25	; 0x03
    2286:	8a 83       	std	Y+2, r24	; 0x02
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    228a:	69 89       	ldd	r22, Y+17	; 0x11
    228c:	7a 89       	ldd	r23, Y+18	; 0x12
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9c 89       	ldd	r25, Y+20	; 0x14
    2292:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	88 8b       	std	Y+16, r24	; 0x10
    229c:	88 89       	ldd	r24, Y+16	; 0x10
    229e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	8a 95       	dec	r24
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LCD_voidSendChar+0x1b2>
    22a6:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	65 e0       	ldi	r22, 0x05	; 5
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
}
    22b2:	69 96       	adiw	r28, 0x19	; 25
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_u8String){
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <LCD_voidSendString+0x6>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	0a c0       	rjmp	.+20     	; 0x22e8 <LCD_voidSendString+0x24>
	while(*Copy_u8String != '\0'){
		LCD_voidSendChar (*Copy_u8String);
    22d4:	e9 81       	ldd	r30, Y+1	; 0x01
    22d6:	fa 81       	ldd	r31, Y+2	; 0x02
    22d8:	80 81       	ld	r24, Z
    22da:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_voidSendChar>
		Copy_u8String ++;
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
}

void LCD_voidSendString (u8 *Copy_u8String){
	while(*Copy_u8String != '\0'){
    22e8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ea:	fa 81       	ldd	r31, Y+2	; 0x02
    22ec:	80 81       	ld	r24, Z
    22ee:	88 23       	and	r24, r24
    22f0:	89 f7       	brne	.-30     	; 0x22d4 <LCD_voidSendString+0x10>
		LCD_voidSendChar (*Copy_u8String);
		Copy_u8String ++;
	}
}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <LCD_voidSendNumber>:

void LCD_voidSendNumber (u32 Copy_u8Num){
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	65 97       	sbiw	r28, 0x15	; 21
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	6a 8b       	std	Y+18, r22	; 0x12
    2312:	7b 8b       	std	Y+19, r23	; 0x13
    2314:	8c 8b       	std	Y+20, r24	; 0x14
    2316:	9d 8b       	std	Y+21, r25	; 0x15
	u8 str[10];
    u8 i, rem, len = 0;
    2318:	1d 82       	std	Y+5, r1	; 0x05

    u32 n = Copy_u8Num;
    231a:	8a 89       	ldd	r24, Y+18	; 0x12
    231c:	9b 89       	ldd	r25, Y+19	; 0x13
    231e:	ac 89       	ldd	r26, Y+20	; 0x14
    2320:	bd 89       	ldd	r27, Y+21	; 0x15
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	ab 83       	std	Y+3, r26	; 0x03
    2328:	bc 83       	std	Y+4, r27	; 0x04
    232a:	15 c0       	rjmp	.+42     	; 0x2356 <LCD_voidSendNumber+0x5a>
    while (n != 0)
    {
        len++;
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	8d 83       	std	Y+5, r24	; 0x05
        n /= 10;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	ab 81       	ldd	r26, Y+3	; 0x03
    2338:	bc 81       	ldd	r27, Y+4	; 0x04
    233a:	2a e0       	ldi	r18, 0x0A	; 10
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__udivmodsi4>
    234a:	da 01       	movw	r26, r20
    234c:	c9 01       	movw	r24, r18
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	ab 83       	std	Y+3, r26	; 0x03
    2354:	bc 83       	std	Y+4, r27	; 0x04
void LCD_voidSendNumber (u32 Copy_u8Num){
	u8 str[10];
    u8 i, rem, len = 0;

    u32 n = Copy_u8Num;
    while (n != 0)
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	ab 81       	ldd	r26, Y+3	; 0x03
    235c:	bc 81       	ldd	r27, Y+4	; 0x04
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	a1 05       	cpc	r26, r1
    2362:	b1 05       	cpc	r27, r1
    2364:	19 f7       	brne	.-58     	; 0x232c <LCD_voidSendNumber+0x30>
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    2366:	1f 82       	std	Y+7, r1	; 0x07
    2368:	37 c0       	rjmp	.+110    	; 0x23d8 <LCD_voidSendNumber+0xdc>
    {
        rem = Copy_u8Num % 10;
    236a:	8a 89       	ldd	r24, Y+18	; 0x12
    236c:	9b 89       	ldd	r25, Y+19	; 0x13
    236e:	ac 89       	ldd	r26, Y+20	; 0x14
    2370:	bd 89       	ldd	r27, Y+21	; 0x15
    2372:	2a e0       	ldi	r18, 0x0A	; 10
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__udivmodsi4>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	8e 83       	std	Y+6, r24	; 0x06
        Copy_u8Num = Copy_u8Num / 10;
    2388:	8a 89       	ldd	r24, Y+18	; 0x12
    238a:	9b 89       	ldd	r25, Y+19	; 0x13
    238c:	ac 89       	ldd	r26, Y+20	; 0x14
    238e:	bd 89       	ldd	r27, Y+21	; 0x15
    2390:	2a e0       	ldi	r18, 0x0A	; 10
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__udivmodsi4>
    23a0:	da 01       	movw	r26, r20
    23a2:	c9 01       	movw	r24, r18
    23a4:	8a 8b       	std	Y+18, r24	; 0x12
    23a6:	9b 8b       	std	Y+19, r25	; 0x13
    23a8:	ac 8b       	std	Y+20, r26	; 0x14
    23aa:	bd 8b       	std	Y+21, r27	; 0x15
        str[len - (i + 1)] = rem + '0';
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	8f 81       	ldd	r24, Y+7	; 0x07
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	80 95       	com	r24
    23ba:	90 95       	com	r25
    23bc:	28 0f       	add	r18, r24
    23be:	39 1f       	adc	r19, r25
    23c0:	8e 81       	ldd	r24, Y+6	; 0x06
    23c2:	48 2f       	mov	r20, r24
    23c4:	40 5d       	subi	r20, 0xD0	; 208
    23c6:	ce 01       	movw	r24, r28
    23c8:	08 96       	adiw	r24, 0x08	; 8
    23ca:	fc 01       	movw	r30, r24
    23cc:	e2 0f       	add	r30, r18
    23ce:	f3 1f       	adc	r31, r19
    23d0:	40 83       	st	Z, r20
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    23d2:	8f 81       	ldd	r24, Y+7	; 0x07
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	9f 81       	ldd	r25, Y+7	; 0x07
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	98 17       	cp	r25, r24
    23de:	28 f2       	brcs	.-118    	; 0x236a <LCD_voidSendNumber+0x6e>
    {
        rem = Copy_u8Num % 10;
        Copy_u8Num = Copy_u8Num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	ce 01       	movw	r24, r28
    23e8:	08 96       	adiw	r24, 0x08	; 8
    23ea:	fc 01       	movw	r30, r24
    23ec:	e2 0f       	add	r30, r18
    23ee:	f3 1f       	adc	r31, r19
    23f0:	10 82       	st	Z, r1

    LCD_voidSendString (str);
    23f2:	ce 01       	movw	r24, r28
    23f4:	08 96       	adiw	r24, 0x08	; 8
    23f6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidSendString>
}
    23fa:	65 96       	adiw	r28, 0x15	; 21
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <LCD_voidSetLocation>:

void LCD_voidSetLocation (u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <LCD_voidSetLocation+0x6>
    2412:	00 d0       	rcall	.+0      	; 0x2414 <LCD_voidSetLocation+0x8>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8LineNum){
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	3c 83       	std	Y+4, r19	; 0x04
    2424:	2b 83       	std	Y+3, r18	; 0x03
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	81 30       	cpi	r24, 0x01	; 1
    242c:	91 05       	cpc	r25, r1
    242e:	31 f0       	breq	.+12     	; 0x243c <LCD_voidSetLocation+0x30>
    2430:	2b 81       	ldd	r18, Y+3	; 0x03
    2432:	3c 81       	ldd	r19, Y+4	; 0x04
    2434:	22 30       	cpi	r18, 0x02	; 2
    2436:	31 05       	cpc	r19, r1
    2438:	31 f0       	breq	.+12     	; 0x2446 <LCD_voidSetLocation+0x3a>
    243a:	09 c0       	rjmp	.+18     	; 0x244e <LCD_voidSetLocation+0x42>
		case LCD_LINE_1: LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	80 58       	subi	r24, 0x80	; 128
    2440:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_voidSendCommand>
    2444:	04 c0       	rjmp	.+8      	; 0x244e <LCD_voidSetLocation+0x42>

		case LCD_LINE_2: LCD_voidSendCommand(0xc0 + Copy_u8CharNum); break;
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	80 54       	subi	r24, 0x40	; 64
    244a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_voidSendCommand>

		default: return;
	}
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <LCD_voidDrawSpecialChar>:

void LCD_voidDrawSpecialChar (u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	00 d0       	rcall	.+0      	; 0x2462 <LCD_voidDrawSpecialChar+0x6>
    2462:	00 d0       	rcall	.+0      	; 0x2464 <LCD_voidDrawSpecialChar+0x8>
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	8a 83       	std	Y+2, r24	; 0x02
    246a:	7c 83       	std	Y+4, r23	; 0x04
    246c:	6b 83       	std	Y+3, r22	; 0x03
	u8 i;

	if(Copy_u8CharIndex < 8){
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	88 30       	cpi	r24, 0x08	; 8
    2472:	f8 f4       	brcc	.+62     	; 0x24b2 <LCD_voidDrawSpecialChar+0x56>
		LCD_voidSendCommand (0x40 + (Copy_u8CharIndex*8));
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	08 96       	adiw	r24, 0x08	; 8
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_voidSendCommand>
		for(i=0;i<8;i++) LCD_voidSendChar(*(Copy_u8SpecialChar+i));
    248c:	19 82       	std	Y+1, r1	; 0x01
    248e:	0e c0       	rjmp	.+28     	; 0x24ac <LCD_voidDrawSpecialChar+0x50>
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	80 81       	ld	r24, Z
    24a2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_voidSendChar>
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	88 30       	cpi	r24, 0x08	; 8
    24b0:	78 f3       	brcs	.-34     	; 0x2490 <LCD_voidDrawSpecialChar+0x34>
	}
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar (u8 Copy_u8CharIndex){
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendChar (Copy_u8CharIndex);
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_voidSendChar>
}
    24d2:	0f 90       	pop	r0
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <KPD_voidInit>:

u8 KPD_Au8Keys[4][4] = KPD_KEYS;
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	0f 92       	push	r0
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	1b c0       	rjmp	.+54     	; 0x251e <KPD_voidInit+0x44>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	fc 01       	movw	r30, r24
    24f0:	ee 57       	subi	r30, 0x7E	; 126
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	90 81       	ld	r25, Z
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	69 2f       	mov	r22, r25
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	88 2f       	mov	r24, r24
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	fc 01       	movw	r30, r24
    2508:	ea 57       	subi	r30, 0x7A	; 122
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	90 81       	ld	r25, Z
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	69 2f       	mov	r22, r25
    2512:	42 e0       	ldi	r20, 0x02	; 2
    2514:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	8f 5f       	subi	r24, 0xFF	; 255
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	84 30       	cpi	r24, 0x04	; 4
    2522:	10 f3       	brcs	.-60     	; 0x24e8 <KPD_voidInit+0xe>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
	}
}
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	61 97       	sbiw	r28, 0x11	; 17
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;
    2540:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    2542:	19 8a       	std	Y+17, r1	; 0x11
    2544:	c4 c0       	rjmp	.+392    	; 0x26ce <KPD_u8GetPressedKey+0x1a2>
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	fc 01       	movw	r30, r24
    254e:	ee 57       	subi	r30, 0x7E	; 126
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	90 81       	ld	r25, Z
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	69 2f       	mov	r22, r25
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    255e:	18 8a       	std	Y+16, r1	; 0x10
    2560:	a3 c0       	rjmp	.+326    	; 0x26a8 <KPD_u8GetPressedKey+0x17c>

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    2562:	88 89       	ldd	r24, Y+16	; 0x10
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	fc 01       	movw	r30, r24
    256a:	ea 57       	subi	r30, 0x7A	; 122
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	90 81       	ld	r25, Z
    2570:	82 e0       	ldi	r24, 0x02	; 2
    2572:	69 2f       	mov	r22, r25
    2574:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <DIO_u8GetPinValue>
    2578:	88 23       	and	r24, r24
    257a:	09 f0       	breq	.+2      	; 0x257e <KPD_u8GetPressedKey+0x52>
    257c:	92 c0       	rjmp	.+292    	; 0x26a2 <KPD_u8GetPressedKey+0x176>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a8 ec       	ldi	r26, 0xC8	; 200
    2584:	b1 e4       	ldi	r27, 0x41	; 65
    2586:	8b 87       	std	Y+11, r24	; 0x0b
    2588:	9c 87       	std	Y+12, r25	; 0x0c
    258a:	ad 87       	std	Y+13, r26	; 0x0d
    258c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a ef       	ldi	r20, 0xFA	; 250
    259c:	54 e4       	ldi	r21, 0x44	; 68
    259e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8f 83       	std	Y+7, r24	; 0x07
    25a8:	98 87       	std	Y+8, r25	; 0x08
    25aa:	a9 87       	std	Y+9, r26	; 0x09
    25ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e8       	ldi	r20, 0x80	; 128
    25bc:	5f e3       	ldi	r21, 0x3F	; 63
    25be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25c2:	88 23       	and	r24, r24
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <KPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	3f c0       	rjmp	.+126    	; 0x264e <KPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	4c f5       	brge	.+82     	; 0x263a <KPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 e4       	ldi	r21, 0x41	; 65
    25f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <KPD_u8GetPressedKey+0x104>
    2612:	88 ec       	ldi	r24, 0xC8	; 200
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <KPD_u8GetPressedKey+0xf2>
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	69 f7       	brne	.-38     	; 0x2612 <KPD_u8GetPressedKey+0xe6>
    2638:	27 c0       	rjmp	.+78     	; 0x2688 <KPD_u8GetPressedKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <KPD_u8GetPressedKey+0x12e>
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	12 c0       	rjmp	.+36     	; 0x2688 <KPD_u8GetPressedKey+0x15c>
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
    2664:	89 89       	ldd	r24, Y+17	; 0x11
    2666:	48 2f       	mov	r20, r24
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	88 89       	ldd	r24, Y+16	; 0x10
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	ca 01       	movw	r24, r20
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	fc 01       	movw	r30, r24
    2680:	ee 58       	subi	r30, 0x8E	; 142
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	8f 87       	std	Y+15, r24	; 0x0f

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    2688:	88 89       	ldd	r24, Y+16	; 0x10
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	fc 01       	movw	r30, r24
    2690:	ea 57       	subi	r30, 0x7A	; 122
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	90 81       	ld	r25, Z
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	69 2f       	mov	r22, r25
    269a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <DIO_u8GetPinValue>
    269e:	88 23       	and	r24, r24
    26a0:	09 f3       	breq	.-62     	; 0x2664 <KPD_u8GetPressedKey+0x138>
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    26a2:	88 89       	ldd	r24, Y+16	; 0x10
    26a4:	8f 5f       	subi	r24, 0xFF	; 255
    26a6:	88 8b       	std	Y+16, r24	; 0x10
    26a8:	88 89       	ldd	r24, Y+16	; 0x10
    26aa:	84 30       	cpi	r24, 0x04	; 4
    26ac:	08 f4       	brcc	.+2      	; 0x26b0 <KPD_u8GetPressedKey+0x184>
    26ae:	59 cf       	rjmp	.-334    	; 0x2562 <KPD_u8GetPressedKey+0x36>
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
				}
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    26b0:	89 89       	ldd	r24, Y+17	; 0x11
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	fc 01       	movw	r30, r24
    26b8:	ee 57       	subi	r30, 0x7E	; 126
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	90 81       	ld	r25, Z
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	69 2f       	mov	r22, r25
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
}

u8 KPD_u8GetPressedKey(void){
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    26c8:	89 89       	ldd	r24, Y+17	; 0x11
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	89 8b       	std	Y+17, r24	; 0x11
    26ce:	89 89       	ldd	r24, Y+17	; 0x11
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	08 f4       	brcc	.+2      	; 0x26d6 <KPD_u8GetPressedKey+0x1aa>
    26d4:	38 cf       	rjmp	.-400    	; 0x2546 <KPD_u8GetPressedKey+0x1a>
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
	}
	return Local_u8ReturnValue;
    26d6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    26d8:	61 96       	adiw	r28, 0x11	; 17
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <main>:
#include <util/delay.h>
#include "MCAL/DIO/DIO.h"
#include "MCAL/ADC/ADC.h"
//#include "HAL/LCD/LCD.h"

int main(){
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <main+0x6>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <main+0x8>
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <main+0xa>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT);
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	64 e0       	ldi	r22, 0x04	; 4
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	65 e0       	ldi	r22, 0x05	; 5
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	66 e0       	ldi	r22, 0x06	; 6
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_OUTPUT);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	67 e0       	ldi	r22, 0x07	; 7
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	66 e0       	ldi	r22, 0x06	; 6
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN1, DIO_PIN_INPUT);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	61 e0       	ldi	r22, 0x01	; 1
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_DIV_64);
    2734:	86 e0       	ldi	r24, 0x06	; 6
    2736:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <ADC_voidInit>
	u16 Local_u16DigitalValue, Local_u16AnaloglValue, Local_u16TempValue;
//	LCD_voidInit ();


	while(1){
		Local_u16DigitalValue = ADC_u16GetDigitalValue(ADC_CHANNEL_1);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 17 0c 	call	0x182e	; 0x182e <ADC_u16GetDigitalValue>
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
		Local_u16AnaloglValue = (Local_u16DigitalValue * 5000UL)/1024;
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	9e 81       	ldd	r25, Y+6	; 0x06
    2748:	cc 01       	movw	r24, r24
    274a:	a0 e0       	ldi	r26, 0x00	; 0
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	28 e8       	ldi	r18, 0x88	; 136
    2750:	33 e1       	ldi	r19, 0x13	; 19
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 15 14 	call	0x282a	; 0x282a <__mulsi3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	07 2e       	mov	r0, r23
    2764:	7a e0       	ldi	r23, 0x0A	; 10
    2766:	b6 95       	lsr	r27
    2768:	a7 95       	ror	r26
    276a:	97 95       	ror	r25
    276c:	87 95       	ror	r24
    276e:	7a 95       	dec	r23
    2770:	d1 f7       	brne	.-12     	; 0x2766 <main+0x7c>
    2772:	70 2d       	mov	r23, r0
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
		Local_u16TempValue = Local_u16AnaloglValue/10;
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	2a e0       	ldi	r18, 0x0A	; 10
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	b9 01       	movw	r22, r18
    2782:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodhi4>
    2786:	cb 01       	movw	r24, r22
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u16TempValue <= 20){
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	85 31       	cpi	r24, 0x15	; 21
    2792:	91 05       	cpc	r25, r1
    2794:	a8 f4       	brcc	.+42     	; 0x27c0 <main+0xd6>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	64 e0       	ldi	r22, 0x04	; 4
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN5, DIO_LOW);
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	65 e0       	ldi	r22, 0x05	; 5
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN6, DIO_LOW);
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	66 e0       	ldi	r22, 0x06	; 6
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>

			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_LOW);
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	67 e0       	ldi	r22, 0x07	; 7
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
    27be:	bd cf       	rjmp	.-134    	; 0x273a <main+0x50>
		}

		else if(Local_u16TempValue <= 40){
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	89 32       	cpi	r24, 0x29	; 41
    27c6:	91 05       	cpc	r25, r1
    27c8:	a8 f4       	brcc	.+42     	; 0x27f4 <main+0x10a>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_LOW);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	64 e0       	ldi	r22, 0x04	; 4
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	65 e0       	ldi	r22, 0x05	; 5
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN6, DIO_LOW);
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	66 e0       	ldi	r22, 0x06	; 6
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>

			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_LOW);
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	67 e0       	ldi	r22, 0x07	; 7
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
    27f2:	a3 cf       	rjmp	.-186    	; 0x273a <main+0x50>

		}

		else if(Local_u16TempValue > 40){
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	89 32       	cpi	r24, 0x29	; 41
    27fa:	91 05       	cpc	r25, r1
    27fc:	08 f4       	brcc	.+2      	; 0x2800 <main+0x116>
    27fe:	9d cf       	rjmp	.-198    	; 0x273a <main+0x50>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_LOW);
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	64 e0       	ldi	r22, 0x04	; 4
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN5, DIO_LOW);
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	65 e0       	ldi	r22, 0x05	; 5
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN6, DIO_HIGH);
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	66 e0       	ldi	r22, 0x06	; 6
    2818:	41 e0       	ldi	r20, 0x01	; 1
    281a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>

			DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_HIGH);
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	67 e0       	ldi	r22, 0x07	; 7
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_voidSetPinValue>
    2828:	88 cf       	rjmp	.-240    	; 0x273a <main+0x50>

0000282a <__mulsi3>:
    282a:	62 9f       	mul	r22, r18
    282c:	d0 01       	movw	r26, r0
    282e:	73 9f       	mul	r23, r19
    2830:	f0 01       	movw	r30, r0
    2832:	82 9f       	mul	r24, r18
    2834:	e0 0d       	add	r30, r0
    2836:	f1 1d       	adc	r31, r1
    2838:	64 9f       	mul	r22, r20
    283a:	e0 0d       	add	r30, r0
    283c:	f1 1d       	adc	r31, r1
    283e:	92 9f       	mul	r25, r18
    2840:	f0 0d       	add	r31, r0
    2842:	83 9f       	mul	r24, r19
    2844:	f0 0d       	add	r31, r0
    2846:	74 9f       	mul	r23, r20
    2848:	f0 0d       	add	r31, r0
    284a:	65 9f       	mul	r22, r21
    284c:	f0 0d       	add	r31, r0
    284e:	99 27       	eor	r25, r25
    2850:	72 9f       	mul	r23, r18
    2852:	b0 0d       	add	r27, r0
    2854:	e1 1d       	adc	r30, r1
    2856:	f9 1f       	adc	r31, r25
    2858:	63 9f       	mul	r22, r19
    285a:	b0 0d       	add	r27, r0
    285c:	e1 1d       	adc	r30, r1
    285e:	f9 1f       	adc	r31, r25
    2860:	bd 01       	movw	r22, r26
    2862:	cf 01       	movw	r24, r30
    2864:	11 24       	eor	r1, r1
    2866:	08 95       	ret

00002868 <__udivmodqi4>:
    2868:	99 1b       	sub	r25, r25
    286a:	79 e0       	ldi	r23, 0x09	; 9
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <__udivmodqi4_ep>

0000286e <__udivmodqi4_loop>:
    286e:	99 1f       	adc	r25, r25
    2870:	96 17       	cp	r25, r22
    2872:	08 f0       	brcs	.+2      	; 0x2876 <__udivmodqi4_ep>
    2874:	96 1b       	sub	r25, r22

00002876 <__udivmodqi4_ep>:
    2876:	88 1f       	adc	r24, r24
    2878:	7a 95       	dec	r23
    287a:	c9 f7       	brne	.-14     	; 0x286e <__udivmodqi4_loop>
    287c:	80 95       	com	r24
    287e:	08 95       	ret

00002880 <__udivmodhi4>:
    2880:	aa 1b       	sub	r26, r26
    2882:	bb 1b       	sub	r27, r27
    2884:	51 e1       	ldi	r21, 0x11	; 17
    2886:	07 c0       	rjmp	.+14     	; 0x2896 <__udivmodhi4_ep>

00002888 <__udivmodhi4_loop>:
    2888:	aa 1f       	adc	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	a6 17       	cp	r26, r22
    288e:	b7 07       	cpc	r27, r23
    2890:	10 f0       	brcs	.+4      	; 0x2896 <__udivmodhi4_ep>
    2892:	a6 1b       	sub	r26, r22
    2894:	b7 0b       	sbc	r27, r23

00002896 <__udivmodhi4_ep>:
    2896:	88 1f       	adc	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	5a 95       	dec	r21
    289c:	a9 f7       	brne	.-22     	; 0x2888 <__udivmodhi4_loop>
    289e:	80 95       	com	r24
    28a0:	90 95       	com	r25
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	08 95       	ret

000028a8 <__udivmodsi4>:
    28a8:	a1 e2       	ldi	r26, 0x21	; 33
    28aa:	1a 2e       	mov	r1, r26
    28ac:	aa 1b       	sub	r26, r26
    28ae:	bb 1b       	sub	r27, r27
    28b0:	fd 01       	movw	r30, r26
    28b2:	0d c0       	rjmp	.+26     	; 0x28ce <__udivmodsi4_ep>

000028b4 <__udivmodsi4_loop>:
    28b4:	aa 1f       	adc	r26, r26
    28b6:	bb 1f       	adc	r27, r27
    28b8:	ee 1f       	adc	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	a2 17       	cp	r26, r18
    28be:	b3 07       	cpc	r27, r19
    28c0:	e4 07       	cpc	r30, r20
    28c2:	f5 07       	cpc	r31, r21
    28c4:	20 f0       	brcs	.+8      	; 0x28ce <__udivmodsi4_ep>
    28c6:	a2 1b       	sub	r26, r18
    28c8:	b3 0b       	sbc	r27, r19
    28ca:	e4 0b       	sbc	r30, r20
    28cc:	f5 0b       	sbc	r31, r21

000028ce <__udivmodsi4_ep>:
    28ce:	66 1f       	adc	r22, r22
    28d0:	77 1f       	adc	r23, r23
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	1a 94       	dec	r1
    28d8:	69 f7       	brne	.-38     	; 0x28b4 <__udivmodsi4_loop>
    28da:	60 95       	com	r22
    28dc:	70 95       	com	r23
    28de:	80 95       	com	r24
    28e0:	90 95       	com	r25
    28e2:	9b 01       	movw	r18, r22
    28e4:	ac 01       	movw	r20, r24
    28e6:	bd 01       	movw	r22, r26
    28e8:	cf 01       	movw	r24, r30
    28ea:	08 95       	ret

000028ec <__prologue_saves__>:
    28ec:	2f 92       	push	r2
    28ee:	3f 92       	push	r3
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	8f 92       	push	r8
    28fa:	9f 92       	push	r9
    28fc:	af 92       	push	r10
    28fe:	bf 92       	push	r11
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	ca 1b       	sub	r28, r26
    2916:	db 0b       	sbc	r29, r27
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	09 94       	ijmp

00002924 <__epilogue_restores__>:
    2924:	2a 88       	ldd	r2, Y+18	; 0x12
    2926:	39 88       	ldd	r3, Y+17	; 0x11
    2928:	48 88       	ldd	r4, Y+16	; 0x10
    292a:	5f 84       	ldd	r5, Y+15	; 0x0f
    292c:	6e 84       	ldd	r6, Y+14	; 0x0e
    292e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2930:	8c 84       	ldd	r8, Y+12	; 0x0c
    2932:	9b 84       	ldd	r9, Y+11	; 0x0b
    2934:	aa 84       	ldd	r10, Y+10	; 0x0a
    2936:	b9 84       	ldd	r11, Y+9	; 0x09
    2938:	c8 84       	ldd	r12, Y+8	; 0x08
    293a:	df 80       	ldd	r13, Y+7	; 0x07
    293c:	ee 80       	ldd	r14, Y+6	; 0x06
    293e:	fd 80       	ldd	r15, Y+5	; 0x05
    2940:	0c 81       	ldd	r16, Y+4	; 0x04
    2942:	1b 81       	ldd	r17, Y+3	; 0x03
    2944:	aa 81       	ldd	r26, Y+2	; 0x02
    2946:	b9 81       	ldd	r27, Y+1	; 0x01
    2948:	ce 0f       	add	r28, r30
    294a:	d1 1d       	adc	r29, r1
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	ed 01       	movw	r28, r26
    2958:	08 95       	ret

0000295a <_exit>:
    295a:	f8 94       	cli

0000295c <__stop_program>:
    295c:	ff cf       	rjmp	.-2      	; 0x295c <__stop_program>
