
CommProt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000301e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000301e  000030b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080008a  0080008a  000030dc  2**0
                  ALLOC
  3 .stab         00002f58  00000000  00000000  000030dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001669  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000769d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000077fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000798c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000099d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000aad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ba54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000be96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__vector_1>
       8:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_2>
       c:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__vector_10>
      2c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 17 	call	0x2ece	; 0x2ece <main>
      8a:	0c 94 0d 18 	jmp	0x301a	; 0x301a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_voidInit>:
#include <avr/io.h>
#include "UART.h"



void UART_voidInit (void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_voidInit+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate = 51; //9600
     caa:	83 e3       	ldi	r24, 0x33	; 51
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	9b 83       	std	Y+3, r25	; 0x03
     cb0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue = 0b10000000;
     cb2:	80 e8       	ldi	r24, 0x80	; 128
     cb4:	89 83       	std	Y+1, r24	; 0x01

	/*set baudrate*/
	UBRRH = (unsigned char) (Local_u16BaudRate>>8);
     cb6:	e0 e4       	ldi	r30, 0x40	; 64
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	99 27       	eor	r25, r25
     cc2:	80 83       	st	Z, r24
	UBRRL = (unsigned char)  Local_u16BaudRate;
     cc4:	e9 e2       	ldi	r30, 0x29	; 41
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	80 83       	st	Z, r24
	/*select normal speed*/
	UCSRA = CLR_BIT(UCSRA, U2X);
     ccc:	ab e2       	ldi	r26, 0x2B	; 43
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	eb e2       	ldi	r30, 0x2B	; 43
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8d 7f       	andi	r24, 0xFD	; 253
     cd8:	8c 93       	st	X, r24

	/*disable multiprocessor mode*/
	UCSRA = CLR_BIT(UCSRA, MPCM);
     cda:	ab e2       	ldi	r26, 0x2B	; 43
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	eb e2       	ldi	r30, 0x2B	; 43
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8e 7f       	andi	r24, 0xFE	; 254
     ce6:	8c 93       	st	X, r24

	/*enable rexeive and transmit*/
	UCSRB = SET_BIT(UCSRB, RXEN);
     ce8:	aa e2       	ldi	r26, 0x2A	; 42
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	ea e2       	ldi	r30, 0x2A	; 42
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 61       	ori	r24, 0x10	; 16
     cf4:	8c 93       	st	X, r24
	UCSRB = SET_BIT(UCSRB, TXEN);
     cf6:	aa e2       	ldi	r26, 0x2A	; 42
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ea e2       	ldi	r30, 0x2A	; 42
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 60       	ori	r24, 0x08	; 8
     d02:	8c 93       	st	X, r24
	/*select 8bit data*/
	UCSRB = CLR_BIT(UCSRB, UCSZ2);
     d04:	aa e2       	ldi	r26, 0x2A	; 42
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ea e2       	ldi	r30, 0x2A	; 42
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8b 7f       	andi	r24, 0xFB	; 251
     d10:	8c 93       	st	X, r24
	Local_u8UCSRCValue = SET_BIT(Local_u8UCSRCValue, UCSZ1);
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	84 60       	ori	r24, 0x04	; 4
     d16:	89 83       	std	Y+1, r24	; 0x01
	Local_u8UCSRCValue = SET_BIT(Local_u8UCSRCValue, UCSZ0);
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	89 83       	std	Y+1, r24	; 0x01

	/*Select asynch mode*/
	Local_u8UCSRCValue = CLR_BIT(Local_u8UCSRCValue, UMSEL);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8f 7b       	andi	r24, 0xBF	; 191
     d22:	89 83       	std	Y+1, r24	; 0x01

	/*parity disable*/
	Local_u8UCSRCValue = CLR_BIT(Local_u8UCSRCValue, UPM0);
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	8f 7e       	andi	r24, 0xEF	; 239
     d28:	89 83       	std	Y+1, r24	; 0x01
	Local_u8UCSRCValue = CLR_BIT(Local_u8UCSRCValue, UPM1);
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	8f 7d       	andi	r24, 0xDF	; 223
     d2e:	89 83       	std	Y+1, r24	; 0x01

	/*set 2 stop bits*/
	Local_u8UCSRCValue = SET_BIT(Local_u8UCSRCValue, USBS);
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 60       	ori	r24, 0x08	; 8
     d34:	89 83       	std	Y+1, r24	; 0x01

	Local_u8UCSRCValue = SET_BIT(Local_u8UCSRCValue, UCPOL);
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	89 83       	std	Y+1, r24	; 0x01

	/*assign local u8ucsrc*/
	UCSRC = Local_u8UCSRCValue;
     d3c:	e0 e4       	ldi	r30, 0x40	; 64
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	80 83       	st	Z, r24
}
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8){
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	00 d0       	rcall	.+0      	; 0xd56 <UART_voidSendData+0x6>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (GET_BIT(UCSRA , UDRE) == 0 );
     d5c:	eb e2       	ldi	r30, 0x2B	; 43
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
	/* Put data into buffer, sends the data */
	UDR = Copy_u8;
     d62:	ec e2       	ldi	r30, 0x2C	; 44
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	80 83       	st	Z, r24
}
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <UART_u8ReceiveData>:

u8	 UART_u8ReceiveData (void){
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (GET_BIT(UCSRA , RXC) == 0 )	;
     d7e:	eb e2       	ldi	r30, 0x2B	; 43
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
	/* Get and return received data from buffer */
	return UDR;
     d84:	ec e2       	ldi	r30, 0x2C	; 44
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
}
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <TIM0_voidInit>:

ptrFunc_Iv_Ov Global_ISR_TIM0_OVF_ptr = NULL;
ptrFunc_Iv_Ov Global_ISR_TIM0_CM_ptr = NULL;


void TIM0_voidInit(void){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
		TCCR0 = SET_BIT(TCCR0, WGM01);
	#elif TIM0_MODE == TIM0_MODE_CTC
		TCCR0 = SET_BIT(TCCR0, WGM00);
		TCCR0 = CLR_BIT(TCCR0, WGM01);
	#else
		TCCR0 = SET_BIT(TCCR0, WGM00);
     d9a:	a3 e5       	ldi	r26, 0x53	; 83
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e3 e5       	ldi	r30, 0x53	; 83
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 64       	ori	r24, 0x40	; 64
     da6:	8c 93       	st	X, r24
		TCCR0 = SET_BIT(TCCR0, WGM01);
     da8:	a3 e5       	ldi	r26, 0x53	; 83
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e3 e5       	ldi	r30, 0x53	; 83
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	8c 93       	st	X, r24
	#endif
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <TIM0_voidSetPreValue>:



void TIM0_voidSetPreValue(u8 Copy_u8CounterStartValue){
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8CounterStartValue;
     dc8:	e2 e5       	ldi	r30, 0x52	; 82
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	80 83       	st	Z, r24
}
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <TIM0_voidTimerStart>:

void TIM0_voidTimerStart(u8 Copy_u8Prescalar){
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	0f 92       	push	r0
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0b11111000;
     de4:	a3 e5       	ldi	r26, 0x53	; 83
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	88 7f       	andi	r24, 0xF8	; 248
     df0:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescalar;
     df2:	a3 e5       	ldi	r26, 0x53	; 83
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e3 e5       	ldi	r30, 0x53	; 83
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	90 81       	ld	r25, Z
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	89 2b       	or	r24, r25
     e00:	8c 93       	st	X, r24
}
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <TIM0_voidOVFINTControl>:

void TIM0_voidOVFINTControl(u8 Copy_u8INTcontrol){
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8INTcontrol == TIM0_INT_ENABLE){
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	41 f4       	brne	.+16     	; 0xe2c <TIM0_voidOVFINTControl+0x22>
		TIMSK = SET_BIT(TIMSK, TOIE0);
     e1c:	a9 e5       	ldi	r26, 0x59	; 89
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e9 e5       	ldi	r30, 0x59	; 89
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8c 93       	st	X, r24
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <TIM0_voidOVFINTControl+0x30>
	}
	else{
		TIMSK = CLR_BIT(TIMSK, TOIE0);
     e2c:	a9 e5       	ldi	r26, 0x59	; 89
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e9 e5       	ldi	r30, 0x59	; 89
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	8c 93       	st	X, r24
	}
}
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <TIM0_voidSetCompareMatch>:

void TIM0_voidSetCompareMatch(u8 Copy_u8CompareMatchValue, u8 Copy_u8OC0PinAction){
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <TIM0_voidSetCompareMatch+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <TIM0_voidSetCompareMatch+0x8>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8OC0PinAction){
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3c 83       	std	Y+4, r19	; 0x04
     e5a:	2b 83       	std	Y+3, r18	; 0x03
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	91 05       	cpc	r25, r1
     e64:	c9 f0       	breq	.+50     	; 0xe98 <TIM0_voidSetCompareMatch+0x56>
     e66:	2b 81       	ldd	r18, Y+3	; 0x03
     e68:	3c 81       	ldd	r19, Y+4	; 0x04
     e6a:	23 30       	cpi	r18, 0x03	; 3
     e6c:	31 05       	cpc	r19, r1
     e6e:	19 f1       	breq	.+70     	; 0xeb6 <TIM0_voidSetCompareMatch+0x74>
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	91 05       	cpc	r25, r1
     e78:	69 f5       	brne	.+90     	; 0xed4 <TIM0_voidSetCompareMatch+0x92>
		case TIM0_OC0_TGL:
			TCCR0 = SET_BIT(TCCR0, COM00);
     e7a:	a3 e5       	ldi	r26, 0x53	; 83
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e5       	ldi	r30, 0x53	; 83
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 61       	ori	r24, 0x10	; 16
     e86:	8c 93       	st	X, r24
			TCCR0 = CLR_BIT(TCCR0, COM01);
     e88:	a3 e5       	ldi	r26, 0x53	; 83
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e3 e5       	ldi	r30, 0x53	; 83
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7d       	andi	r24, 0xDF	; 223
     e94:	8c 93       	st	X, r24
     e96:	2c c0       	rjmp	.+88     	; 0xef0 <TIM0_voidSetCompareMatch+0xae>
			break;

		case TIM0_OC0_CLR:
			TCCR0 = CLR_BIT(TCCR0, COM00);
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8c 93       	st	X, r24
			TCCR0 = SET_BIT(TCCR0, COM01);
     ea6:	a3 e5       	ldi	r26, 0x53	; 83
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e3 e5       	ldi	r30, 0x53	; 83
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 62       	ori	r24, 0x20	; 32
     eb2:	8c 93       	st	X, r24
     eb4:	1d c0       	rjmp	.+58     	; 0xef0 <TIM0_voidSetCompareMatch+0xae>
			break;

		case TIM0_OC0_SET:
			TCCR0 = SET_BIT(TCCR0, COM00);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	8c 93       	st	X, r24
			TCCR0 = SET_BIT(TCCR0, COM01);
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	8c 93       	st	X, r24
     ed2:	0e c0       	rjmp	.+28     	; 0xef0 <TIM0_voidSetCompareMatch+0xae>
			break;

		default:
			TCCR0 = CLR_BIT(TCCR0, COM00);
     ed4:	a3 e5       	ldi	r26, 0x53	; 83
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e3 e5       	ldi	r30, 0x53	; 83
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8f 7e       	andi	r24, 0xEF	; 239
     ee0:	8c 93       	st	X, r24
			TCCR0 = CLR_BIT(TCCR0, COM01);
     ee2:	a3 e5       	ldi	r26, 0x53	; 83
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e3 e5       	ldi	r30, 0x53	; 83
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8f 7d       	andi	r24, 0xDF	; 223
     eee:	8c 93       	st	X, r24
			break;
	}
	OCR0 = Copy_u8CompareMatchValue;
     ef0:	ec e5       	ldi	r30, 0x5C	; 92
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 83       	st	Z, r24
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <TIM0_voidSetCompareMatchValue>:

void TIM0_voidSetCompareMatchValue(u8 Copy_u8CompareMatchValue){
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompareMatchValue;
     f12:	ec e5       	ldi	r30, 0x5C	; 92
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	80 83       	st	Z, r24
}
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <TIM0_voidSetCompareMatchINTControl>:


void TIM0_voidSetCompareMatchINTControl(u8 Copy_u8INTControl){
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8INTControl == TIM0_INT_ENABLE){
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	41 f4       	brne	.+16     	; 0xf44 <TIM0_voidSetCompareMatchINTControl+0x22>
		TIMSK = SET_BIT(TIMSK, OCIE0);
     f34:	a9 e5       	ldi	r26, 0x59	; 89
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e9 e5       	ldi	r30, 0x59	; 89
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	8c 93       	st	X, r24
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <TIM0_voidSetCompareMatchINTControl+0x30>
	}
	else{
		TIMSK = CLR_BIT(TIMSK, OCIE0);
     f44:	a9 e5       	ldi	r26, 0x59	; 89
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e9 e5       	ldi	r30, 0x59	; 89
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8d 7f       	andi	r24, 0xFD	; 253
     f50:	8c 93       	st	X, r24
	}
}
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <TIM0_voidTimerStop>:

void TIM0_voidTimerStop (void){
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
     f62:	a3 e5       	ldi	r26, 0x53	; 83
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	88 7f       	andi	r24, 0xF8	; 248
     f6e:	8c 93       	st	X, r24

}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <INT_voidOVFCallback>:

void INT_voidOVFCallback(ptrFunc_Iv_Ov Copy_pfTIM0OVF){
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <INT_voidOVFCallback+0x6>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
	Global_ISR_TIM0_OVF_ptr = Copy_pfTIM0OVF;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	90 93 8b 00 	sts	0x008B, r25
     f8c:	80 93 8a 00 	sts	0x008A, r24
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <INT_voidCompareMatchCallback>:
void INT_voidCompareMatchCallback(ptrFunc_Iv_Ov Copy_pfTIM0CompareMatch){
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <INT_voidCompareMatchCallback+0x6>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
	Global_ISR_TIM0_CM_ptr = Copy_pfTIM0CompareMatch;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	90 93 8d 00 	sts	0x008D, r25
     fb0:	80 93 8c 00 	sts	0x008C, r24

}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <TIM0_voidPWMGenerator>:

void TIM0_voidPWMGenerator(u8 Copy_u8DutyCycle, u8 Copy_u8C0PinAction){
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <TIM0_voidPWMGenerator+0x6>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	6a 83       	std	Y+2, r22	; 0x02
	#if TIM0_MODE == TIM0_MODE_FAST_PWM
		if(Copy_u8C0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	f1 f4       	brne	.+60     	; 0x100e <TIM0_voidPWMGenerator+0x50>
			TCCR0 = SET_BIT(TCCR0, COM00);
     fd2:	a3 e5       	ldi	r26, 0x53	; 83
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e3 e5       	ldi	r30, 0x53	; 83
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 61       	ori	r24, 0x10	; 16
     fde:	8c 93       	st	X, r24
			TCCR0 = SET_BIT(TCCR0, COM01);
     fe0:	a3 e5       	ldi	r26, 0x53	; 83
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e3 e5       	ldi	r30, 0x53	; 83
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 62       	ori	r24, 0x20	; 32
     fec:	8c 93       	st	X, r24
			OCR0 = 256 - (Copy_u8DutyCycle * 256)/100;
     fee:	ec e5       	ldi	r30, 0x5C	; 92
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	98 2f       	mov	r25, r24
     ffa:	88 27       	eor	r24, r24
     ffc:	24 e6       	ldi	r18, 0x64	; 100
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	b9 01       	movw	r22, r18
    1002:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__divmodhi4>
    1006:	cb 01       	movw	r24, r22
    1008:	81 95       	neg	r24
    100a:	80 83       	st	Z, r24
    100c:	1c c0       	rjmp	.+56     	; 0x1046 <TIM0_voidPWMGenerator+0x88>

		}
		else{
			TCCR0 = CLR_BIT(TCCR0, COM00);
    100e:	a3 e5       	ldi	r26, 0x53	; 83
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e3 e5       	ldi	r30, 0x53	; 83
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8f 7e       	andi	r24, 0xEF	; 239
    101a:	8c 93       	st	X, r24
			TCCR0 = SET_BIT(TCCR0, COM01);
    101c:	a3 e5       	ldi	r26, 0x53	; 83
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e3 e5       	ldi	r30, 0x53	; 83
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	8c 93       	st	X, r24
			OCR0 = (Copy_u8DutyCycle * 256)/100;
    102a:	ec e5       	ldi	r30, 0x5C	; 92
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	98 2f       	mov	r25, r24
    1036:	88 27       	eor	r24, r24
    1038:	24 e6       	ldi	r18, 0x64	; 100
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	b9 01       	movw	r22, r18
    103e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__divmodhi4>
    1042:	cb 01       	movw	r24, r22
    1044:	80 83       	st	Z, r24
			OCR0 = (Copy_u8DutyCycle * 510)/100/2;

		}

	#endif
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <__vector_11>:




ISR(TIMER0_OVF_vect){
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_TIM0_OVF_ptr != NULL){
    107a:	80 91 8a 00 	lds	r24, 0x008A
    107e:	90 91 8b 00 	lds	r25, 0x008B
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	29 f0       	breq	.+10     	; 0x1090 <__vector_11+0x40>
		Global_ISR_TIM0_OVF_ptr();
    1086:	e0 91 8a 00 	lds	r30, 0x008A
    108a:	f0 91 8b 00 	lds	r31, 0x008B
    108e:	09 95       	icall
	}
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <__vector_10>:

ISR(TIMER0_COMP_vect){
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	2f 93       	push	r18
    10c2:	3f 93       	push	r19
    10c4:	4f 93       	push	r20
    10c6:	5f 93       	push	r21
    10c8:	6f 93       	push	r22
    10ca:	7f 93       	push	r23
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	ef 93       	push	r30
    10d6:	ff 93       	push	r31
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_TIM0_CM_ptr != NULL){
    10e0:	80 91 8c 00 	lds	r24, 0x008C
    10e4:	90 91 8d 00 	lds	r25, 0x008D
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	29 f0       	breq	.+10     	; 0x10f6 <__vector_10+0x40>
		Global_ISR_TIM0_CM_ptr();
    10ec:	e0 91 8c 00 	lds	r30, 0x008C
    10f0:	f0 91 8d 00 	lds	r31, 0x008D
    10f4:	09 95       	icall
	}
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <SPI_voidInit>:
#include "../../LIB/BIT_Math.h"

#include <avr/io.h>
#include "SPI.h"

void SPI_voidInit			(void){
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	#if SPI_MODE == SPI_MODE_MASTER
		/*select order -> MSB*/
		SPCR = CLR_BIT(SPCR, DORD);
    1124:	ad e2       	ldi	r26, 0x2D	; 45
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ed e2       	ldi	r30, 0x2D	; 45
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7d       	andi	r24, 0xDF	; 223
    1130:	8c 93       	st	X, r24

		/*select Master mode*/
		SPCR = SET_BIT(SPCR, MSTR);
    1132:	ad e2       	ldi	r26, 0x2D	; 45
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ed e2       	ldi	r30, 0x2D	; 45
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 61       	ori	r24, 0x10	; 16
    113e:	8c 93       	st	X, r24

		/*Clock Polarity & Phase -> RISING_FALLING  setup sample*/
		SPCR = CLR_BIT(SPCR, CPOL);
    1140:	ad e2       	ldi	r26, 0x2D	; 45
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ed e2       	ldi	r30, 0x2D	; 45
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	8c 93       	st	X, r24
		SPCR = SET_BIT(SPCR, CPHA);
    114e:	ad e2       	ldi	r26, 0x2D	; 45
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ed e2       	ldi	r30, 0x2D	; 45
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	8c 93       	st	X, r24

		/*Set CLock Rate fck/16*/
		SPCR = SET_BIT(SPCR, SPR0);
    115c:	ad e2       	ldi	r26, 0x2D	; 45
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ed e2       	ldi	r30, 0x2D	; 45
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	81 60       	ori	r24, 0x01	; 1
    1168:	8c 93       	st	X, r24
		SPCR = CLR_BIT(SPCR, SPR1);
    116a:	ad e2       	ldi	r26, 0x2D	; 45
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ed e2       	ldi	r30, 0x2D	; 45
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8d 7f       	andi	r24, 0xFD	; 253
    1176:	8c 93       	st	X, r24
		SPSR = CLR_BIT(SPSR, SPI2X);
    1178:	ae e2       	ldi	r26, 0x2E	; 46
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e2       	ldi	r30, 0x2E	; 46
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 7f       	andi	r24, 0xFE	; 254
    1184:	8c 93       	st	X, r24
		SPCR = CLR_BIT(SPCR, SPR1);
		SPSR = CLR_BIT(SPSR, SPI2X);
	#endif

	/*enable SPI*/
	SPCR = SET_BIT(SPCR, SPE);
    1186:	ad e2       	ldi	r26, 0x2D	; 45
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ed e2       	ldi	r30, 0x2D	; 45
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	8c 93       	st	X, r24
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <SPI_voidMasterSendData>:


void SPI_voidMasterSendData	(u8 Copy_u8Data){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <SPI_voidMasterSendData+0x6>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = Copy_u8Data;
    11a6:	ef e2       	ldi	r30, 0x2F	; 47
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(GET_BIT(SPSR,SPIF) == 0);
    11ae:	ee e2       	ldi	r30, 0x2E	; 46
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <SPI_voidSlaveSendData>:

void SPI_voidSlaveSendData	(u8 Copy_u8Data){
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = Copy_u8Data;
    11ca:	ef e2       	ldi	r30, 0x2F	; 47
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	80 83       	st	Z, r24
}
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <SPI_u8ReceiveData>:

u8 	 SPI_u8ReceiveData		(void){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(GET_BIT(SPSR,SPIF) == 0);
    11e4:	ee e2       	ldi	r30, 0x2E	; 46
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
	/* Return data register */
	return SPDR;
    11ea:	ef e2       	ldi	r30, 0x2F	; 47
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
}
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <SPI_u8ReceiveTransmit>:

u8 	 SPI_u8ReceiveTransmit	(u8 Copy_u8Data){
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <SPI_u8ReceiveTransmit+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    1204:	ef e2       	ldi	r30, 0x2F	; 47
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(GET_BIT(SPSR,SPIF) == 0);
    120c:	ee e2       	ldi	r30, 0x2E	; 46
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
	return SPDR;
    1212:	ef e2       	ldi	r30, 0x2F	; 47
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <INT_voidEnable>:

ptrFunc_Iv_Ov Global_ISR_INT0_ptr = NULL;
ptrFunc_Iv_Ov Global_ISR_INT1_ptr = NULL;
ptrFunc_Iv_Ov Global_ISR_INT2_ptr = NULL;

void INT_voidEnable(u8 Copy_u8INTIndex, u8 Copy_u8INTSense){
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	2a 97       	sbiw	r28, 0x0a	; 10
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex) {
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3a 87       	std	Y+10, r19	; 0x0a
    1242:	29 87       	std	Y+9, r18	; 0x09
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <INT_voidEnable+0x2e>
    124e:	6d c0       	rjmp	.+218    	; 0x132a <INT_voidEnable+0x108>
    1250:	29 85       	ldd	r18, Y+9	; 0x09
    1252:	3a 85       	ldd	r19, Y+10	; 0x0a
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	09 f4       	brne	.+2      	; 0x125c <INT_voidEnable+0x3a>
    125a:	c9 c0       	rjmp	.+402    	; 0x13ee <INT_voidEnable+0x1cc>
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	09 f0       	breq	.+2      	; 0x1266 <INT_voidEnable+0x44>
    1264:	e9 c0       	rjmp	.+466    	; 0x1438 <INT_voidEnable+0x216>
		case INT_INT0:
			switch (Copy_u8INTSense) {
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	38 87       	std	Y+8, r19	; 0x08
    126e:	2f 83       	std	Y+7, r18	; 0x07
    1270:	8f 81       	ldd	r24, Y+7	; 0x07
    1272:	98 85       	ldd	r25, Y+8	; 0x08
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	21 f1       	breq	.+72     	; 0x12c2 <INT_voidEnable+0xa0>
    127a:	2f 81       	ldd	r18, Y+7	; 0x07
    127c:	38 85       	ldd	r19, Y+8	; 0x08
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	2c f4       	brge	.+10     	; 0x128e <INT_voidEnable+0x6c>
    1284:	8f 81       	ldd	r24, Y+7	; 0x07
    1286:	98 85       	ldd	r25, Y+8	; 0x08
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	61 f0       	breq	.+24     	; 0x12a4 <INT_voidEnable+0x82>
    128c:	46 c0       	rjmp	.+140    	; 0x131a <INT_voidEnable+0xf8>
    128e:	2f 81       	ldd	r18, Y+7	; 0x07
    1290:	38 85       	ldd	r19, Y+8	; 0x08
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	21 f1       	breq	.+72     	; 0x12e0 <INT_voidEnable+0xbe>
    1298:	8f 81       	ldd	r24, Y+7	; 0x07
    129a:	98 85       	ldd	r25, Y+8	; 0x08
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	91 05       	cpc	r25, r1
    12a0:	71 f1       	breq	.+92     	; 0x12fe <INT_voidEnable+0xdc>
    12a2:	3b c0       	rjmp	.+118    	; 0x131a <INT_voidEnable+0xf8>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC00);
    12a4:	a5 e5       	ldi	r26, 0x55	; 85
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e5       	ldi	r30, 0x55	; 85
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
    12b2:	a5 e5       	ldi	r26, 0x55	; 85
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e5       	ldi	r30, 0x55	; 85
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	8c 93       	st	X, r24
    12c0:	2c c0       	rjmp	.+88     	; 0x131a <INT_voidEnable+0xf8>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
    12c2:	a5 e5       	ldi	r26, 0x55	; 85
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e5       	ldi	r30, 0x55	; 85
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
    12d0:	a5 e5       	ldi	r26, 0x55	; 85
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e5 e5       	ldi	r30, 0x55	; 85
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	8c 93       	st	X, r24
    12de:	1d c0       	rjmp	.+58     	; 0x131a <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
    12e0:	a5 e5       	ldi	r26, 0x55	; 85
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e5       	ldi	r30, 0x55	; 85
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
    12ee:	a5 e5       	ldi	r26, 0x55	; 85
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e5 e5       	ldi	r30, 0x55	; 85
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8d 7f       	andi	r24, 0xFD	; 253
    12fa:	8c 93       	st	X, r24
    12fc:	0e c0       	rjmp	.+28     	; 0x131a <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC00);
    12fe:	a5 e5       	ldi	r26, 0x55	; 85
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e5       	ldi	r30, 0x55	; 85
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8e 7f       	andi	r24, 0xFE	; 254
    130a:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
    130c:	a5 e5       	ldi	r26, 0x55	; 85
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e5       	ldi	r30, 0x55	; 85
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8d 7f       	andi	r24, 0xFD	; 253
    1318:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT0);
    131a:	ab e5       	ldi	r26, 0x5B	; 91
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e5       	ldi	r30, 0x5B	; 91
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	80 64       	ori	r24, 0x40	; 64
    1326:	8c 93       	st	X, r24
    1328:	87 c0       	rjmp	.+270    	; 0x1438 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			switch (Copy_u8INTSense) {
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3e 83       	std	Y+6, r19	; 0x06
    1332:	2d 83       	std	Y+5, r18	; 0x05
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 05       	cpc	r25, r1
    133c:	21 f1       	breq	.+72     	; 0x1386 <INT_voidEnable+0x164>
    133e:	2d 81       	ldd	r18, Y+5	; 0x05
    1340:	3e 81       	ldd	r19, Y+6	; 0x06
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	2c f4       	brge	.+10     	; 0x1352 <INT_voidEnable+0x130>
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	61 f0       	breq	.+24     	; 0x1368 <INT_voidEnable+0x146>
    1350:	46 c0       	rjmp	.+140    	; 0x13de <INT_voidEnable+0x1bc>
    1352:	2d 81       	ldd	r18, Y+5	; 0x05
    1354:	3e 81       	ldd	r19, Y+6	; 0x06
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	21 f1       	breq	.+72     	; 0x13a4 <INT_voidEnable+0x182>
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	91 05       	cpc	r25, r1
    1364:	71 f1       	breq	.+92     	; 0x13c2 <INT_voidEnable+0x1a0>
    1366:	3b c0       	rjmp	.+118    	; 0x13de <INT_voidEnable+0x1bc>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC10);
    1368:	a5 e5       	ldi	r26, 0x55	; 85
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e5       	ldi	r30, 0x55	; 85
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8b 7f       	andi	r24, 0xFB	; 251
    1374:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
    1376:	a5 e5       	ldi	r26, 0x55	; 85
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e5       	ldi	r30, 0x55	; 85
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	88 60       	ori	r24, 0x08	; 8
    1382:	8c 93       	st	X, r24
    1384:	2c c0       	rjmp	.+88     	; 0x13de <INT_voidEnable+0x1bc>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
    1394:	a5 e5       	ldi	r26, 0x55	; 85
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e5 e5       	ldi	r30, 0x55	; 85
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	8c 93       	st	X, r24
    13a2:	1d c0       	rjmp	.+58     	; 0x13de <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
    13a4:	a5 e5       	ldi	r26, 0x55	; 85
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e5 e5       	ldi	r30, 0x55	; 85
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	84 60       	ori	r24, 0x04	; 4
    13b0:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
    13b2:	a5 e5       	ldi	r26, 0x55	; 85
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e5       	ldi	r30, 0x55	; 85
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	87 7f       	andi	r24, 0xF7	; 247
    13be:	8c 93       	st	X, r24
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC10);
    13c2:	a5 e5       	ldi	r26, 0x55	; 85
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e5       	ldi	r30, 0x55	; 85
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8b 7f       	andi	r24, 0xFB	; 251
    13ce:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
    13d0:	a5 e5       	ldi	r26, 0x55	; 85
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e5       	ldi	r30, 0x55	; 85
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	87 7f       	andi	r24, 0xF7	; 247
    13dc:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT1);
    13de:	ab e5       	ldi	r26, 0x5B	; 91
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	eb e5       	ldi	r30, 0x5B	; 91
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 68       	ori	r24, 0x80	; 128
    13ea:	8c 93       	st	X, r24
    13ec:	25 c0       	rjmp	.+74     	; 0x1438 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			switch (Copy_u8INTSense) {
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3c 83       	std	Y+4, r19	; 0x04
    13f6:	2b 83       	std	Y+3, r18	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	31 f0       	breq	.+12     	; 0x140c <INT_voidEnable+0x1ea>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	21 30       	cpi	r18, 0x01	; 1
    1406:	31 05       	cpc	r19, r1
    1408:	49 f0       	breq	.+18     	; 0x141c <INT_voidEnable+0x1fa>
    140a:	0f c0       	rjmp	.+30     	; 0x142a <INT_voidEnable+0x208>
				case INT_SENSE_FALLING_EDGE:
					MCUCSR = CLR_BIT(MCUCSR, ISC2);
    140c:	a4 e5       	ldi	r26, 0x54	; 84
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e4 e5       	ldi	r30, 0x54	; 84
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	8c 93       	st	X, r24
    141a:	07 c0       	rjmp	.+14     	; 0x142a <INT_voidEnable+0x208>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCSR = SET_BIT(MCUCSR, ISC2);
    141c:	a4 e5       	ldi	r26, 0x54	; 84
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e5       	ldi	r30, 0x54	; 84
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	8c 93       	st	X, r24
					break;

			}
			GICR = SET_BIT(GICR, INT2);
    142a:	ab e5       	ldi	r26, 0x5B	; 91
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e5       	ldi	r30, 0x5B	; 91
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 62       	ori	r24, 0x20	; 32
    1436:	8c 93       	st	X, r24
			break;
	}
}
    1438:	2a 96       	adiw	r28, 0x0a	; 10
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <INT_voidDisable>:
void INT_voidDisable(u8 Copy_u8INTIndex){
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <INT_voidDisable+0x6>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex) {
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3b 83       	std	Y+3, r19	; 0x03
    1460:	2a 83       	std	Y+2, r18	; 0x02
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	89 f0       	breq	.+34     	; 0x148e <INT_voidDisable+0x44>
    146c:	2a 81       	ldd	r18, Y+2	; 0x02
    146e:	3b 81       	ldd	r19, Y+3	; 0x03
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	a1 f0       	breq	.+40     	; 0x149e <INT_voidDisable+0x54>
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	b9 f4       	brne	.+46     	; 0x14ac <INT_voidDisable+0x62>
		case INT_INT0:
			GICR = CLR_BIT(GICR, INT0);
    147e:	ab e5       	ldi	r26, 0x5B	; 91
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	eb e5       	ldi	r30, 0x5B	; 91
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8f 7b       	andi	r24, 0xBF	; 191
    148a:	8c 93       	st	X, r24
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <INT_voidDisable+0x62>
			break;

		case INT_INT1:
			GICR = CLR_BIT(GICR, INT1);
    148e:	ab e5       	ldi	r26, 0x5B	; 91
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e5       	ldi	r30, 0x5B	; 91
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8f 77       	andi	r24, 0x7F	; 127
    149a:	8c 93       	st	X, r24
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <INT_voidDisable+0x62>
			break;

		case INT_INT2:
			GICR = CLR_BIT(GICR, INT2);
    149e:	ab e5       	ldi	r26, 0x5B	; 91
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	eb e5       	ldi	r30, 0x5B	; 91
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 7d       	andi	r24, 0xDF	; 223
    14aa:	8c 93       	st	X, r24
			break;
	}
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <INT_voidSetCallback>:

void INT_voidSetCallback(u8 Copy_u8INTIndex, ptrFunc_Iv_Ov ptr){
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <INT_voidSetCallback+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <INT_voidSetCallback+0x8>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	7b 83       	std	Y+3, r23	; 0x03
    14ca:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex) {
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3d 83       	std	Y+5, r19	; 0x05
    14d4:	2c 83       	std	Y+4, r18	; 0x04
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <INT_voidSetCallback+0x48>
    14e0:	2c 81       	ldd	r18, Y+4	; 0x04
    14e2:	3d 81       	ldd	r19, Y+5	; 0x05
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	91 f0       	breq	.+36     	; 0x150e <INT_voidSetCallback+0x56>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	a1 f4       	brne	.+40     	; 0x151a <INT_voidSetCallback+0x62>
		case INT_INT0:
			Global_ISR_INT0_ptr = ptr;
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	90 93 8f 00 	sts	0x008F, r25
    14fa:	80 93 8e 00 	sts	0x008E, r24
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <INT_voidSetCallback+0x62>
			break;

		case INT_INT1:
			Global_ISR_INT1_ptr = ptr;
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	90 93 91 00 	sts	0x0091, r25
    1508:	80 93 90 00 	sts	0x0090, r24
    150c:	06 c0       	rjmp	.+12     	; 0x151a <INT_voidSetCallback+0x62>
			break;

		case INT_INT2:
			Global_ISR_INT2_ptr = ptr;
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	9b 81       	ldd	r25, Y+3	; 0x03
    1512:	90 93 93 00 	sts	0x0093, r25
    1516:	80 93 92 00 	sts	0x0092, r24
			break;
	}
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <__vector_1>:

ISR(INT0_vect){
    152a:	1f 92       	push	r1
    152c:	0f 92       	push	r0
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	0f 92       	push	r0
    1532:	11 24       	eor	r1, r1
    1534:	2f 93       	push	r18
    1536:	3f 93       	push	r19
    1538:	4f 93       	push	r20
    153a:	5f 93       	push	r21
    153c:	6f 93       	push	r22
    153e:	7f 93       	push	r23
    1540:	8f 93       	push	r24
    1542:	9f 93       	push	r25
    1544:	af 93       	push	r26
    1546:	bf 93       	push	r27
    1548:	ef 93       	push	r30
    154a:	ff 93       	push	r31
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_INT0_ptr != NULL){
    1554:	80 91 8e 00 	lds	r24, 0x008E
    1558:	90 91 8f 00 	lds	r25, 0x008F
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	29 f0       	breq	.+10     	; 0x156a <__vector_1+0x40>
		Global_ISR_INT0_ptr();
    1560:	e0 91 8e 00 	lds	r30, 0x008E
    1564:	f0 91 8f 00 	lds	r31, 0x008F
    1568:	09 95       	icall
	}
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	bf 91       	pop	r27
    1574:	af 91       	pop	r26
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	7f 91       	pop	r23
    157c:	6f 91       	pop	r22
    157e:	5f 91       	pop	r21
    1580:	4f 91       	pop	r20
    1582:	3f 91       	pop	r19
    1584:	2f 91       	pop	r18
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <__vector_2>:

ISR(INT1_vect){
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	2f 93       	push	r18
    159c:	3f 93       	push	r19
    159e:	4f 93       	push	r20
    15a0:	5f 93       	push	r21
    15a2:	6f 93       	push	r22
    15a4:	7f 93       	push	r23
    15a6:	8f 93       	push	r24
    15a8:	9f 93       	push	r25
    15aa:	af 93       	push	r26
    15ac:	bf 93       	push	r27
    15ae:	ef 93       	push	r30
    15b0:	ff 93       	push	r31
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_INT1_ptr != NULL){
    15ba:	80 91 90 00 	lds	r24, 0x0090
    15be:	90 91 91 00 	lds	r25, 0x0091
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	29 f0       	breq	.+10     	; 0x15d0 <__vector_2+0x40>
		Global_ISR_INT1_ptr();
    15c6:	e0 91 90 00 	lds	r30, 0x0090
    15ca:	f0 91 91 00 	lds	r31, 0x0091
    15ce:	09 95       	icall
	}
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	ff 91       	pop	r31
    15d6:	ef 91       	pop	r30
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <__vector_3>:

ISR(INT2_vect){
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_INT2_ptr != NULL){
    1620:	80 91 92 00 	lds	r24, 0x0092
    1624:	90 91 93 00 	lds	r25, 0x0093
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	29 f0       	breq	.+10     	; 0x1636 <__vector_3+0x40>
		Global_ISR_INT2_ptr();
    162c:	e0 91 92 00 	lds	r30, 0x0092
    1630:	f0 91 93 00 	lds	r31, 0x0093
    1634:	09 95       	icall
	}
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <ICU_voidInit>:

//void (*ICU_pf) (void);
ptrFunc_Iv_Ov Global_ISR_ICU_ptr = NULL;


void ICU_voidInit (void){
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Normal Mode */
	TCCR1A = CLR_BIT(TCCR1A, WGM10);
    1664:	af e4       	ldi	r26, 0x4F	; 79
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	ef e4       	ldi	r30, 0x4F	; 79
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8e 7f       	andi	r24, 0xFE	; 254
    1670:	8c 93       	st	X, r24
	TCCR1A = CLR_BIT(TCCR1A, WGM11);
    1672:	af e4       	ldi	r26, 0x4F	; 79
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ef e4       	ldi	r30, 0x4F	; 79
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8d 7f       	andi	r24, 0xFD	; 253
    167e:	8c 93       	st	X, r24
	TCCR1A = CLR_BIT(TCCR1B, WGM12);
    1680:	af e4       	ldi	r26, 0x4F	; 79
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ee e4       	ldi	r30, 0x4E	; 78
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	87 7f       	andi	r24, 0xF7	; 247
    168c:	8c 93       	st	X, r24
	TCCR1A = CLR_BIT(TCCR1B, WGM13);
    168e:	af e4       	ldi	r26, 0x4F	; 79
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ee e4       	ldi	r30, 0x4E	; 78
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 7e       	andi	r24, 0xEF	; 239
    169a:	8c 93       	st	X, r24

	/* Prescaler (8) */
	TCCR1B &= 0b11111000;
    169c:	ae e4       	ldi	r26, 0x4E	; 78
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ee e4       	ldi	r30, 0x4E	; 78
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 7f       	andi	r24, 0xF8	; 248
    16a8:	8c 93       	st	X, r24
	TCCR1B |= 0b00000010;
    16aa:	ae e4       	ldi	r26, 0x4E	; 78
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ee e4       	ldi	r30, 0x4E	; 78
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	8c 93       	st	X, r24

	/* enable interrupt */
	TIMSK = SET_BIT(TIMSK, TICIE1);
    16b8:	a9 e5       	ldi	r26, 0x59	; 89
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e9 e5       	ldi	r30, 0x59	; 89
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 62       	ori	r24, 0x20	; 32
    16c4:	8c 93       	st	X, r24

	/* select trigger(Rising) */
	TIMSK = SET_BIT(TCCR1B, ICES1);
    16c6:	a9 e5       	ldi	r26, 0x59	; 89
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 64       	ori	r24, 0x40	; 64
    16d2:	8c 93       	st	X, r24
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <ICU_voidChangeTrigger>:


void ICU_voidChangeTrigger	 (u8 Copy_u8Trigger){
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <ICU_voidChangeTrigger+0x6>
    16e0:	0f 92       	push	r0
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Trigger) {
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3b 83       	std	Y+3, r19	; 0x03
    16f0:	2a 83       	std	Y+2, r18	; 0x02
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	9b 81       	ldd	r25, Y+3	; 0x03
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	31 f0       	breq	.+12     	; 0x1706 <ICU_voidChangeTrigger+0x2c>
    16fa:	2a 81       	ldd	r18, Y+2	; 0x02
    16fc:	3b 81       	ldd	r19, Y+3	; 0x03
    16fe:	21 30       	cpi	r18, 0x01	; 1
    1700:	31 05       	cpc	r19, r1
    1702:	49 f0       	breq	.+18     	; 0x1716 <ICU_voidChangeTrigger+0x3c>
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <ICU_voidChangeTrigger+0x4a>
		case ICU_FALLING_EDGE: TCCR1B = CLR_BIT(TCCR1B, ICES1);	break;
    1706:	ae e4       	ldi	r26, 0x4E	; 78
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	ee e4       	ldi	r30, 0x4E	; 78
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8f 7b       	andi	r24, 0xBF	; 191
    1712:	8c 93       	st	X, r24
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <ICU_voidChangeTrigger+0x4a>
		case ICU_RISING_EDGE:  TCCR1B = SET_BIT(TCCR1B, ICES1);	break;
    1716:	ae e4       	ldi	r26, 0x4E	; 78
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ee e4       	ldi	r30, 0x4E	; 78
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	8c 93       	st	X, r24
	}
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <ICU_voidSetCallback>:


void ICU_voidSetCallback  	(ptrFunc_Iv_Ov Copy_pf){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <ICU_voidSetCallback+0x6>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
	Global_ISR_ICU_ptr = Copy_pf;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	90 93 95 00 	sts	0x0095, r25
    1746:	80 93 94 00 	sts	0x0094, r24
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <ICU_u16ReadValue>:


u16	 ICU_u16ReadValue (void){
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    175c:	e6 e4       	ldi	r30, 0x46	; 70
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void){
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
	/* disable interrupt */
	TIMSK = CLR_BIT(TIMSK, TICIE1);
    1772:	a9 e5       	ldi	r26, 0x59	; 89
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e9 e5       	ldi	r30, 0x59	; 89
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8f 7d       	andi	r24, 0xDF	; 223
    177e:	8c 93       	st	X, r24
}
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <__vector_6>:


ISR(TIMER1_CAPT_vect){
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	Global_ISR_ICU_ptr();
    17b0:	e0 91 94 00 	lds	r30, 0x0094
    17b4:	f0 91 95 00 	lds	r31, 0x0095
    17b8:	09 95       	icall
}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <DIO_voidSetPinDirection>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	29 97       	sbiw	r28, 0x09	; 9
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	6a 83       	std	Y+2, r22	; 0x02
    17f8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 30       	cpi	r24, 0x08	; 8
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <DIO_voidSetPinDirection+0x22>
    1800:	ac c1       	rjmp	.+856    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
		if (Copy_u8Direction == DIO_PIN_OUTPUT){
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	09 f0       	breq	.+2      	; 0x180a <DIO_voidSetPinDirection+0x2a>
    1808:	6f c0       	rjmp	.+222    	; 0x18e8 <DIO_voidSetPinDirection+0x108>
			switch(Copy_u8Port){
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	39 87       	std	Y+9, r19	; 0x09
    1812:	28 87       	std	Y+8, r18	; 0x08
    1814:	88 85       	ldd	r24, Y+8	; 0x08
    1816:	99 85       	ldd	r25, Y+9	; 0x09
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	49 f1       	breq	.+82     	; 0x1870 <DIO_voidSetPinDirection+0x90>
    181e:	28 85       	ldd	r18, Y+8	; 0x08
    1820:	39 85       	ldd	r19, Y+9	; 0x09
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	2c f4       	brge	.+10     	; 0x1832 <DIO_voidSetPinDirection+0x52>
    1828:	88 85       	ldd	r24, Y+8	; 0x08
    182a:	99 85       	ldd	r25, Y+9	; 0x09
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	61 f0       	breq	.+24     	; 0x1848 <DIO_voidSetPinDirection+0x68>
    1830:	94 c1       	rjmp	.+808    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
    1832:	28 85       	ldd	r18, Y+8	; 0x08
    1834:	39 85       	ldd	r19, Y+9	; 0x09
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	71 f1       	breq	.+92     	; 0x1898 <DIO_voidSetPinDirection+0xb8>
    183c:	88 85       	ldd	r24, Y+8	; 0x08
    183e:	99 85       	ldd	r25, Y+9	; 0x09
    1840:	83 30       	cpi	r24, 0x03	; 3
    1842:	91 05       	cpc	r25, r1
    1844:	e9 f1       	breq	.+122    	; 0x18c0 <DIO_voidSetPinDirection+0xe0>
    1846:	89 c1       	rjmp	.+786    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = SET_BIT(DDRA,Copy_u8Pin); break;
    1848:	aa e3       	ldi	r26, 0x3A	; 58
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ea e3       	ldi	r30, 0x3A	; 58
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_voidSetPinDirection+0x86>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_voidSetPinDirection+0x82>
    186a:	84 2b       	or	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	75 c1       	rjmp	.+746    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = SET_BIT(DDRB,Copy_u8Pin); break;
    1870:	a7 e3       	ldi	r26, 0x37	; 55
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e7 e3       	ldi	r30, 0x37	; 55
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_voidSetPinDirection+0xae>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_voidSetPinDirection+0xaa>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	61 c1       	rjmp	.+706    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = SET_BIT(DDRC,Copy_u8Pin); break;
    1898:	a4 e3       	ldi	r26, 0x34	; 52
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e4 e3       	ldi	r30, 0x34	; 52
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_voidSetPinDirection+0xd6>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_voidSetPinDirection+0xd2>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	4d c1       	rjmp	.+666    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = SET_BIT(DDRD,Copy_u8Pin); break;
    18c0:	a1 e3       	ldi	r26, 0x31	; 49
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e1 e3       	ldi	r30, 0x31	; 49
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_voidSetPinDirection+0xfe>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_voidSetPinDirection+0xfa>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	39 c1       	rjmp	.+626    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT){
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 23       	and	r24, r24
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <DIO_voidSetPinDirection+0x110>
    18ee:	74 c0       	rjmp	.+232    	; 0x19d8 <DIO_voidSetPinDirection+0x1f8>
			switch(Copy_u8Port){
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3f 83       	std	Y+7, r19	; 0x07
    18f8:	2e 83       	std	Y+6, r18	; 0x06
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	9f 81       	ldd	r25, Y+7	; 0x07
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	59 f1       	breq	.+86     	; 0x195a <DIO_voidSetPinDirection+0x17a>
    1904:	2e 81       	ldd	r18, Y+6	; 0x06
    1906:	3f 81       	ldd	r19, Y+7	; 0x07
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	2c f4       	brge	.+10     	; 0x1918 <DIO_voidSetPinDirection+0x138>
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	9f 81       	ldd	r25, Y+7	; 0x07
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	69 f0       	breq	.+26     	; 0x1930 <DIO_voidSetPinDirection+0x150>
    1916:	21 c1       	rjmp	.+578    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
    1918:	2e 81       	ldd	r18, Y+6	; 0x06
    191a:	3f 81       	ldd	r19, Y+7	; 0x07
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	89 f1       	breq	.+98     	; 0x1984 <DIO_voidSetPinDirection+0x1a4>
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 05       	cpc	r25, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <DIO_voidSetPinDirection+0x14e>
    192c:	40 c0       	rjmp	.+128    	; 0x19ae <DIO_voidSetPinDirection+0x1ce>
    192e:	15 c1       	rjmp	.+554    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); break;
    1930:	aa e3       	ldi	r26, 0x3A	; 58
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ea e3       	ldi	r30, 0x3A	; 58
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_voidSetPinDirection+0x16e>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <DIO_voidSetPinDirection+0x16a>
    1952:	80 95       	com	r24
    1954:	84 23       	and	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	00 c1       	rjmp	.+512    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); break;
    195a:	a7 e3       	ldi	r26, 0x37	; 55
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e7 e3       	ldi	r30, 0x37	; 55
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_voidSetPinDirection+0x198>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_voidSetPinDirection+0x194>
    197c:	80 95       	com	r24
    197e:	84 23       	and	r24, r20
    1980:	8c 93       	st	X, r24
    1982:	eb c0       	rjmp	.+470    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); break;
    1984:	a4 e3       	ldi	r26, 0x34	; 52
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e4 e3       	ldi	r30, 0x34	; 52
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_voidSetPinDirection+0x1c2>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <DIO_voidSetPinDirection+0x1be>
    19a6:	80 95       	com	r24
    19a8:	84 23       	and	r24, r20
    19aa:	8c 93       	st	X, r24
    19ac:	d6 c0       	rjmp	.+428    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); break;
    19ae:	a1 e3       	ldi	r26, 0x31	; 49
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e1 e3       	ldi	r30, 0x31	; 49
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_voidSetPinDirection+0x1ec>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <DIO_voidSetPinDirection+0x1e8>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	c1 c0       	rjmp	.+386    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				default:	return;	/*do nothing*/
			}			
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT_PULLUP){
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <DIO_voidSetPinDirection+0x200>
    19de:	bd c0       	rjmp	.+378    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
			switch(Copy_u8Port){
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	3d 83       	std	Y+5, r19	; 0x05
    19e8:	2c 83       	std	Y+4, r18	; 0x04
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <DIO_voidSetPinDirection+0x216>
    19f4:	3e c0       	rjmp	.+124    	; 0x1a72 <DIO_voidSetPinDirection+0x292>
    19f6:	2c 81       	ldd	r18, Y+4	; 0x04
    19f8:	3d 81       	ldd	r19, Y+5	; 0x05
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <DIO_voidSetPinDirection+0x22a>
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	71 f0       	breq	.+28     	; 0x1a24 <DIO_voidSetPinDirection+0x244>
    1a08:	a8 c0       	rjmp	.+336    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
    1a0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <DIO_voidSetPinDirection+0x236>
    1a14:	55 c0       	rjmp	.+170    	; 0x1ac0 <DIO_voidSetPinDirection+0x2e0>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	83 30       	cpi	r24, 0x03	; 3
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <DIO_voidSetPinDirection+0x242>
    1a20:	76 c0       	rjmp	.+236    	; 0x1b0e <DIO_voidSetPinDirection+0x32e>
    1a22:	9b c0       	rjmp	.+310    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); PORTA = SET_BIT(PORTA,Copy_u8Pin);break;
    1a24:	aa e3       	ldi	r26, 0x3A	; 58
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ea e3       	ldi	r30, 0x3A	; 58
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <DIO_voidSetPinDirection+0x260>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	2a 95       	dec	r18
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <DIO_voidSetPinDirection+0x25c>
    1a44:	80 95       	com	r24
    1a46:	84 23       	and	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	ab e3       	ldi	r26, 0x3B	; 59
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	eb e3       	ldi	r30, 0x3B	; 59
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <DIO_voidSetPinDirection+0x288>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <DIO_voidSetPinDirection+0x284>
    1a6c:	84 2b       	or	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	74 c0       	rjmp	.+232    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); PORTB = SET_BIT(PORTB,Copy_u8Pin);break;
    1a72:	a7 e3       	ldi	r26, 0x37	; 55
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e7 e3       	ldi	r30, 0x37	; 55
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_voidSetPinDirection+0x2ae>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	2a 95       	dec	r18
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_voidSetPinDirection+0x2aa>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	a8 e3       	ldi	r26, 0x38	; 56
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e8 e3       	ldi	r30, 0x38	; 56
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_voidSetPinDirection+0x2d6>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_voidSetPinDirection+0x2d2>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	4d c0       	rjmp	.+154    	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); PORTC = SET_BIT(PORTC,Copy_u8Pin);break;
    1ac0:	a4 e3       	ldi	r26, 0x34	; 52
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e4 e3       	ldi	r30, 0x34	; 52
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_voidSetPinDirection+0x2fc>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	2a 95       	dec	r18
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_voidSetPinDirection+0x2f8>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	a5 e3       	ldi	r26, 0x35	; 53
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e5 e3       	ldi	r30, 0x35	; 53
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_voidSetPinDirection+0x324>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_voidSetPinDirection+0x320>
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	26 c0       	rjmp	.+76     	; 0x1b5a <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); PORTD = SET_BIT(PORTD,Copy_u8Pin);break;
    1b0e:	a1 e3       	ldi	r26, 0x31	; 49
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e1 e3       	ldi	r30, 0x31	; 49
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <DIO_voidSetPinDirection+0x34a>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	2a 95       	dec	r18
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <DIO_voidSetPinDirection+0x346>
    1b2e:	80 95       	com	r24
    1b30:	84 23       	and	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	a2 e3       	ldi	r26, 0x32	; 50
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e2 e3       	ldi	r30, 0x32	; 50
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 2e       	mov	r0, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <DIO_voidSetPinDirection+0x372>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <DIO_voidSetPinDirection+0x36e>
    1b56:	84 2b       	or	r24, r20
    1b58:	8c 93       	st	X, r24
		
	}
	else{
		/*do nothing*/
	}
}
    1b5a:	29 96       	adiw	r28, 0x09	; 9
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	27 97       	sbiw	r28, 0x07	; 7
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	6a 83       	std	Y+2, r22	; 0x02
    1b84:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	88 30       	cpi	r24, 0x08	; 8
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <DIO_voidSetPinValue+0x22>
    1b8c:	ea c0       	rjmp	.+468    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
		if (Copy_u8Value == DIO_HIGH){
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <DIO_voidSetPinValue+0x2a>
    1b94:	6f c0       	rjmp	.+222    	; 0x1c74 <DIO_voidSetPinValue+0x108>
			switch(Copy_u8Port){
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3f 83       	std	Y+7, r19	; 0x07
    1b9e:	2e 83       	std	Y+6, r18	; 0x06
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	49 f1       	breq	.+82     	; 0x1bfc <DIO_voidSetPinValue+0x90>
    1baa:	2e 81       	ldd	r18, Y+6	; 0x06
    1bac:	3f 81       	ldd	r19, Y+7	; 0x07
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <DIO_voidSetPinValue+0x52>
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <DIO_voidSetPinValue+0x68>
    1bbc:	d2 c0       	rjmp	.+420    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
    1bbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	71 f1       	breq	.+92     	; 0x1c24 <DIO_voidSetPinValue+0xb8>
    1bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bca:	9f 81       	ldd	r25, Y+7	; 0x07
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	e9 f1       	breq	.+122    	; 0x1c4c <DIO_voidSetPinValue+0xe0>
    1bd2:	c7 c0       	rjmp	.+398    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = SET_BIT(PORTA,Copy_u8Pin); break;
    1bd4:	ab e3       	ldi	r26, 0x3B	; 59
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	eb e3       	ldi	r30, 0x3B	; 59
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_voidSetPinValue+0x86>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_voidSetPinValue+0x82>
    1bf6:	84 2b       	or	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	b3 c0       	rjmp	.+358    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = SET_BIT(PORTB,Copy_u8Pin); break;
    1bfc:	a8 e3       	ldi	r26, 0x38	; 56
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e8 e3       	ldi	r30, 0x38	; 56
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_voidSetPinValue+0xae>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_voidSetPinValue+0xaa>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	9f c0       	rjmp	.+318    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = SET_BIT(PORTC,Copy_u8Pin); break;
    1c24:	a5 e3       	ldi	r26, 0x35	; 53
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e5 e3       	ldi	r30, 0x35	; 53
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_voidSetPinValue+0xd6>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_voidSetPinValue+0xd2>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	8b c0       	rjmp	.+278    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = SET_BIT(PORTD,Copy_u8Pin); break;
    1c4c:	a2 e3       	ldi	r26, 0x32	; 50
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e2 e3       	ldi	r30, 0x32	; 50
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_voidSetPinValue+0xfe>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_voidSetPinValue+0xfa>
    1c6e:	84 2b       	or	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	77 c0       	rjmp	.+238    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Value == DIO_LOW){
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	88 23       	and	r24, r24
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <DIO_voidSetPinValue+0x110>
    1c7a:	73 c0       	rjmp	.+230    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
			switch(Copy_u8Port){
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	3d 83       	std	Y+5, r19	; 0x05
    1c84:	2c 83       	std	Y+4, r18	; 0x04
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	59 f1       	breq	.+86     	; 0x1ce6 <DIO_voidSetPinValue+0x17a>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <DIO_voidSetPinValue+0x138>
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f0       	breq	.+26     	; 0x1cbc <DIO_voidSetPinValue+0x150>
    1ca2:	5f c0       	rjmp	.+190    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
    1ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	89 f1       	breq	.+98     	; 0x1d10 <DIO_voidSetPinValue+0x1a4>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	83 30       	cpi	r24, 0x03	; 3
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <DIO_voidSetPinValue+0x14e>
    1cb8:	40 c0       	rjmp	.+128    	; 0x1d3a <DIO_voidSetPinValue+0x1ce>
    1cba:	53 c0       	rjmp	.+166    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = CLR_BIT(PORTA,Copy_u8Pin); break;
    1cbc:	ab e3       	ldi	r26, 0x3B	; 59
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	eb e3       	ldi	r30, 0x3B	; 59
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_voidSetPinValue+0x16e>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_voidSetPinValue+0x16a>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	3e c0       	rjmp	.+124    	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = CLR_BIT(PORTB,Copy_u8Pin); break;
    1ce6:	a8 e3       	ldi	r26, 0x38	; 56
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e8 e3       	ldi	r30, 0x38	; 56
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_voidSetPinValue+0x198>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_voidSetPinValue+0x194>
    1d08:	80 95       	com	r24
    1d0a:	84 23       	and	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	29 c0       	rjmp	.+82     	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = CLR_BIT(PORTC,Copy_u8Pin); break;
    1d10:	a5 e3       	ldi	r26, 0x35	; 53
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e5 e3       	ldi	r30, 0x35	; 53
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_voidSetPinValue+0x1c2>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_voidSetPinValue+0x1be>
    1d32:	80 95       	com	r24
    1d34:	84 23       	and	r24, r20
    1d36:	8c 93       	st	X, r24
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = CLR_BIT(PORTD,Copy_u8Pin); break;
    1d3a:	a2 e3       	ldi	r26, 0x32	; 50
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e2 e3       	ldi	r30, 0x32	; 50
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	48 2f       	mov	r20, r24
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 2e       	mov	r0, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_voidSetPinValue+0x1ec>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	0a 94       	dec	r0
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <DIO_voidSetPinValue+0x1e8>
    1d5c:	80 95       	com	r24
    1d5e:	84 23       	and	r24, r20
    1d60:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}	
}
    1d62:	27 96       	adiw	r28, 0x07	; 7
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <DIO_voidTogglePinValue+0x6>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <DIO_voidTogglePinValue+0x8>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	88 30       	cpi	r24, 0x08	; 8
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <DIO_voidTogglePinValue+0x18>
    1d8a:	6e c0       	rjmp	.+220    	; 0x1e68 <DIO_voidTogglePinValue+0xf4>
			switch(Copy_u8Port){
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	3c 83       	std	Y+4, r19	; 0x04
    1d94:	2b 83       	std	Y+3, r18	; 0x03
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	49 f1       	breq	.+82     	; 0x1df2 <DIO_voidTogglePinValue+0x7e>
    1da0:	2b 81       	ldd	r18, Y+3	; 0x03
    1da2:	3c 81       	ldd	r19, Y+4	; 0x04
    1da4:	22 30       	cpi	r18, 0x02	; 2
    1da6:	31 05       	cpc	r19, r1
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <DIO_voidTogglePinValue+0x40>
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	61 f0       	breq	.+24     	; 0x1dca <DIO_voidTogglePinValue+0x56>
    1db2:	5a c0       	rjmp	.+180    	; 0x1e68 <DIO_voidTogglePinValue+0xf4>
    1db4:	2b 81       	ldd	r18, Y+3	; 0x03
    1db6:	3c 81       	ldd	r19, Y+4	; 0x04
    1db8:	22 30       	cpi	r18, 0x02	; 2
    1dba:	31 05       	cpc	r19, r1
    1dbc:	71 f1       	breq	.+92     	; 0x1e1a <DIO_voidTogglePinValue+0xa6>
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	83 30       	cpi	r24, 0x03	; 3
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	e9 f1       	breq	.+122    	; 0x1e42 <DIO_voidTogglePinValue+0xce>
    1dc8:	4f c0       	rjmp	.+158    	; 0x1e68 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTA: PORTA = TGL_BIT(PORTA,Copy_u8Pin); break;
    1dca:	ab e3       	ldi	r26, 0x3B	; 59
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	eb e3       	ldi	r30, 0x3B	; 59
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_voidTogglePinValue+0x74>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_voidTogglePinValue+0x70>
    1dec:	84 27       	eor	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	3b c0       	rjmp	.+118    	; 0x1e68 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTB: PORTB = TGL_BIT(PORTB,Copy_u8Pin); break;
    1df2:	a8 e3       	ldi	r26, 0x38	; 56
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e8 e3       	ldi	r30, 0x38	; 56
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_voidTogglePinValue+0x9c>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_voidTogglePinValue+0x98>
    1e14:	84 27       	eor	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	27 c0       	rjmp	.+78     	; 0x1e68 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTC: PORTC = TGL_BIT(PORTC,Copy_u8Pin); break;
    1e1a:	a5 e3       	ldi	r26, 0x35	; 53
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e5 e3       	ldi	r30, 0x35	; 53
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_voidTogglePinValue+0xc4>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_voidTogglePinValue+0xc0>
    1e3c:	84 27       	eor	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	13 c0       	rjmp	.+38     	; 0x1e68 <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTD: PORTD = TGL_BIT(PORTD,Copy_u8Pin); break;
    1e42:	a2 e3       	ldi	r26, 0x32	; 50
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e2 e3       	ldi	r30, 0x32	; 50
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <DIO_voidTogglePinValue+0xec>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <DIO_voidTogglePinValue+0xe8>
    1e64:	84 27       	eor	r24, r20
    1e66:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <DIO_u8GetPinValue+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <DIO_u8GetPinValue+0x8>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <DIO_u8GetPinValue+0xa>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <DIO_u8GetPinValue+0x1a>
    1e8e:	6f c0       	rjmp	.+222    	; 0x1f6e <DIO_u8GetPinValue+0xf8>
		switch(Copy_u8Port){
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	3d 83       	std	Y+5, r19	; 0x05
    1e98:	2c 83       	std	Y+4, r18	; 0x04
    1e9a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e9e:	41 30       	cpi	r20, 0x01	; 1
    1ea0:	51 05       	cpc	r21, r1
    1ea2:	49 f1       	breq	.+82     	; 0x1ef6 <DIO_u8GetPinValue+0x80>
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	82 30       	cpi	r24, 0x02	; 2
    1eaa:	91 05       	cpc	r25, r1
    1eac:	34 f4       	brge	.+12     	; 0x1eba <DIO_u8GetPinValue+0x44>
    1eae:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb2:	21 15       	cp	r18, r1
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	61 f0       	breq	.+24     	; 0x1ed0 <DIO_u8GetPinValue+0x5a>
    1eb8:	57 c0       	rjmp	.+174    	; 0x1f68 <DIO_u8GetPinValue+0xf2>
    1eba:	4c 81       	ldd	r20, Y+4	; 0x04
    1ebc:	5d 81       	ldd	r21, Y+5	; 0x05
    1ebe:	42 30       	cpi	r20, 0x02	; 2
    1ec0:	51 05       	cpc	r21, r1
    1ec2:	61 f1       	breq	.+88     	; 0x1f1c <DIO_u8GetPinValue+0xa6>
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	d1 f1       	breq	.+116    	; 0x1f42 <DIO_u8GetPinValue+0xcc>
    1ece:	4c c0       	rjmp	.+152    	; 0x1f68 <DIO_u8GetPinValue+0xf2>
			case DIO_PORTA: return GET_BIT(PINA,Copy_u8Pin); 
    1ed0:	e9 e3       	ldi	r30, 0x39	; 57
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a9 01       	movw	r20, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_u8GetPinValue+0x72>
    1ee4:	55 95       	asr	r21
    1ee6:	47 95       	ror	r20
    1ee8:	8a 95       	dec	r24
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <DIO_u8GetPinValue+0x6e>
    1eec:	ca 01       	movw	r24, r20
    1eee:	58 2f       	mov	r21, r24
    1ef0:	51 70       	andi	r21, 0x01	; 1
    1ef2:	5b 83       	std	Y+3, r21	; 0x03
    1ef4:	3d c0       	rjmp	.+122    	; 0x1f70 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTB: return GET_BIT(PINB,Copy_u8Pin);
    1ef6:	e6 e3       	ldi	r30, 0x36	; 54
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a9 01       	movw	r20, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_u8GetPinValue+0x98>
    1f0a:	55 95       	asr	r21
    1f0c:	47 95       	ror	r20
    1f0e:	8a 95       	dec	r24
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_u8GetPinValue+0x94>
    1f12:	ca 01       	movw	r24, r20
    1f14:	58 2f       	mov	r21, r24
    1f16:	51 70       	andi	r21, 0x01	; 1
    1f18:	5b 83       	std	Y+3, r21	; 0x03
    1f1a:	2a c0       	rjmp	.+84     	; 0x1f70 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTC: return GET_BIT(PINC,Copy_u8Pin); 
    1f1c:	e3 e3       	ldi	r30, 0x33	; 51
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a9 01       	movw	r20, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_u8GetPinValue+0xbe>
    1f30:	55 95       	asr	r21
    1f32:	47 95       	ror	r20
    1f34:	8a 95       	dec	r24
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <DIO_u8GetPinValue+0xba>
    1f38:	ca 01       	movw	r24, r20
    1f3a:	58 2f       	mov	r21, r24
    1f3c:	51 70       	andi	r21, 0x01	; 1
    1f3e:	5b 83       	std	Y+3, r21	; 0x03
    1f40:	17 c0       	rjmp	.+46     	; 0x1f70 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTD: return GET_BIT(PIND,Copy_u8Pin); 
    1f42:	e0 e3       	ldi	r30, 0x30	; 48
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a9 01       	movw	r20, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_u8GetPinValue+0xe4>
    1f56:	55 95       	asr	r21
    1f58:	47 95       	ror	r20
    1f5a:	8a 95       	dec	r24
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <DIO_u8GetPinValue+0xe0>
    1f5e:	ca 01       	movw	r24, r20
    1f60:	58 2f       	mov	r21, r24
    1f62:	51 70       	andi	r21, 0x01	; 1
    1f64:	5b 83       	std	Y+3, r21	; 0x03
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <DIO_u8GetPinValue+0xfa>
			default       :	return 0xff;              /*as a wrong entry*/						
    1f68:	8f ef       	ldi	r24, 0xFF	; 255
    1f6a:	8b 83       	std	Y+3, r24	; 0x03
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <DIO_u8GetPinValue+0xfa>
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <DIO_u8GetPinValue+0xfe>
		}
	}
	else{
		/*do nothing*/
	}	
}
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8e 81       	ldd	r24, Y+6	; 0x06
    1f76:	26 96       	adiw	r28, 0x06	; 6
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port, u8 Copy_u8DirValue){
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <DIO_voidSetPortDirection+0x6>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <DIO_voidSetPortDirection+0x8>
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	3c 83       	std	Y+4, r19	; 0x04
    1fa0:	2b 83       	std	Y+3, r18	; 0x03
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	91 05       	cpc	r25, r1
    1faa:	d1 f0       	breq	.+52     	; 0x1fe0 <DIO_voidSetPortDirection+0x58>
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	22 30       	cpi	r18, 0x02	; 2
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	2c f4       	brge	.+10     	; 0x1fc0 <DIO_voidSetPortDirection+0x38>
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	61 f0       	breq	.+24     	; 0x1fd6 <DIO_voidSetPortDirection+0x4e>
    1fbe:	1e c0       	rjmp	.+60     	; 0x1ffc <DIO_voidSetPortDirection+0x74>
    1fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc4:	22 30       	cpi	r18, 0x02	; 2
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	81 f0       	breq	.+32     	; 0x1fea <DIO_voidSetPortDirection+0x62>
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	83 30       	cpi	r24, 0x03	; 3
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	81 f0       	breq	.+32     	; 0x1ff4 <DIO_voidSetPortDirection+0x6c>
    1fd4:	13 c0       	rjmp	.+38     	; 0x1ffc <DIO_voidSetPortDirection+0x74>
		case DIO_PORTA: DDRA = Copy_u8DirValue; break;
    1fd6:	ea e3       	ldi	r30, 0x3A	; 58
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	80 83       	st	Z, r24
    1fde:	0e c0       	rjmp	.+28     	; 0x1ffc <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB: DDRB = Copy_u8DirValue; break;
    1fe0:	e7 e3       	ldi	r30, 0x37	; 55
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	80 83       	st	Z, r24
    1fe8:	09 c0       	rjmp	.+18     	; 0x1ffc <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC: DDRC = Copy_u8DirValue; break;
    1fea:	e4 e3       	ldi	r30, 0x34	; 52
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	80 83       	st	Z, r24
    1ff2:	04 c0       	rjmp	.+8      	; 0x1ffc <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD: DDRD = Copy_u8DirValue; break;
    1ff4:	e1 e3       	ldi	r30, 0x31	; 49
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <DIO_voidSetPortValue+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <DIO_voidSetPortValue+0x8>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	3c 83       	std	Y+4, r19	; 0x04
    2022:	2b 83       	std	Y+3, r18	; 0x03
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	9c 81       	ldd	r25, Y+4	; 0x04
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	91 05       	cpc	r25, r1
    202c:	d1 f0       	breq	.+52     	; 0x2062 <DIO_voidSetPortValue+0x58>
    202e:	2b 81       	ldd	r18, Y+3	; 0x03
    2030:	3c 81       	ldd	r19, Y+4	; 0x04
    2032:	22 30       	cpi	r18, 0x02	; 2
    2034:	31 05       	cpc	r19, r1
    2036:	2c f4       	brge	.+10     	; 0x2042 <DIO_voidSetPortValue+0x38>
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	61 f0       	breq	.+24     	; 0x2058 <DIO_voidSetPortValue+0x4e>
    2040:	1e c0       	rjmp	.+60     	; 0x207e <DIO_voidSetPortValue+0x74>
    2042:	2b 81       	ldd	r18, Y+3	; 0x03
    2044:	3c 81       	ldd	r19, Y+4	; 0x04
    2046:	22 30       	cpi	r18, 0x02	; 2
    2048:	31 05       	cpc	r19, r1
    204a:	81 f0       	breq	.+32     	; 0x206c <DIO_voidSetPortValue+0x62>
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	83 30       	cpi	r24, 0x03	; 3
    2052:	91 05       	cpc	r25, r1
    2054:	81 f0       	breq	.+32     	; 0x2076 <DIO_voidSetPortValue+0x6c>
    2056:	13 c0       	rjmp	.+38     	; 0x207e <DIO_voidSetPortValue+0x74>
		case DIO_PORTA: PORTA = Copy_u8Value; break;
    2058:	eb e3       	ldi	r30, 0x3B	; 59
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	80 83       	st	Z, r24
    2060:	0e c0       	rjmp	.+28     	; 0x207e <DIO_voidSetPortValue+0x74>
		case DIO_PORTB: PORTB = Copy_u8Value; break;
    2062:	e8 e3       	ldi	r30, 0x38	; 56
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	80 83       	st	Z, r24
    206a:	09 c0       	rjmp	.+18     	; 0x207e <DIO_voidSetPortValue+0x74>
		case DIO_PORTC: PORTC = Copy_u8Value; break;
    206c:	e5 e3       	ldi	r30, 0x35	; 53
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	80 83       	st	Z, r24
    2074:	04 c0       	rjmp	.+8      	; 0x207e <DIO_voidSetPortValue+0x74>
		case DIO_PORTD: PORTD = Copy_u8Value; break;
    2076:	e2 e3       	ldi	r30, 0x32	; 50
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
		
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <SSD_voidInitSingleDigit>:
#include "../../MCAL/DIO/DIO.h"
#include "../../HAL/SSD/SSD.h"

u8 SSD_mappingArray[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void SSD_voidInitSingleDigit(u8 Copy_u8Port){
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	0f 92       	push	r0
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection (Copy_u8Port, DIO_PORT_OUTPUT);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	6f ef       	ldi	r22, 0xFF	; 255
    209c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_voidSetPortDirection>
}
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <SSD_voidInitDoubleDigit>:

void SSD_voidInitDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU){
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <SSD_voidInitDoubleDigit+0x6>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortDirection (Copy_u8PortL, DIO_PORT_OUTPUT);
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	6f ef       	ldi	r22, 0xFF	; 255
    20ba:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection (Copy_u8PortU, DIO_PORT_OUTPUT);
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	6f ef       	ldi	r22, 0xFF	; 255
    20c2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_voidSetPortDirection>
}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <SSD_voidWriteSingleDigit>:

void SSD_voidWriteSingleDigit(u8 Copy_u8Port, u8 Copy_u8Value){
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <SSD_voidWriteSingleDigit+0x6>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue (Copy_u8Port, SSD_mappingArray[Copy_u8Value]);
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	fc 01       	movw	r30, r24
    20e6:	e8 59       	subi	r30, 0x98	; 152
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	90 81       	ld	r25, Z
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	69 2f       	mov	r22, r25
    20f0:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPortValue>
//	DIO_voidSetPortValue (Copy_u8Port, 0xff);
}
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <SSD_voidWriteDoubleDigit>:

void SSD_voidWriteDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU, u8 Copy_u8Value){
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <SSD_voidWriteDoubleDigit+0x6>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	6a 83       	std	Y+2, r22	; 0x02
    210e:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPortValue (Copy_u8PortL, SSD_mappingArray[Copy_u8Value%10]);
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9a e0       	ldi	r25, 0x0A	; 10
    2114:	69 2f       	mov	r22, r25
    2116:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__udivmodqi4>
    211a:	89 2f       	mov	r24, r25
    211c:	88 2f       	mov	r24, r24
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	fc 01       	movw	r30, r24
    2122:	e8 59       	subi	r30, 0x98	; 152
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	90 81       	ld	r25, Z
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	69 2f       	mov	r22, r25
    212c:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPortValue>
	DIO_voidSetPortValue (Copy_u8PortU, SSD_mappingArray[Copy_u8Value/10]);
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9a e0       	ldi	r25, 0x0A	; 10
    2134:	69 2f       	mov	r22, r25
    2136:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__udivmodqi4>
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	fc 01       	movw	r30, r24
    2140:	e8 59       	subi	r30, 0x98	; 152
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	90 81       	ld	r25, Z
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	69 2f       	mov	r22, r25
    214a:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPortValue>
}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <LCD_voidInit>:
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"
#include <util/delay.h>

void LCD_voidInit (void){
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	cc 54       	subi	r28, 0x4C	; 76
    2168:	d0 40       	sbci	r29, 0x00	; 0
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection (LCD_DATA_PORT, DIO_PORT_OUTPUT);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	6f ef       	ldi	r22, 0xFF	; 255
    2178:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_PIN_OUTPUT);
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_PIN_OUTPUT);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_PIN_OUTPUT);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	62 e0       	ldi	r22, 0x02	; 2
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_voidSetPinDirection>
    219a:	fe 01       	movw	r30, r28
    219c:	e7 5b       	subi	r30, 0xB7	; 183
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	ac e0       	ldi	r26, 0x0C	; 12
    21a6:	b2 e4       	ldi	r27, 0x42	; 66
    21a8:	80 83       	st	Z, r24
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	a2 83       	std	Z+2, r26	; 0x02
    21ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	8e 01       	movw	r16, r28
    21b2:	0b 5b       	subi	r16, 0xBB	; 187
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	fe 01       	movw	r30, r28
    21b8:	e7 5b       	subi	r30, 0xB7	; 183
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a ef       	ldi	r20, 0xFA	; 250
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	80 83       	st	Z, r24
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	a2 83       	std	Z+2, r26	; 0x02
    21dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21de:	fe 01       	movw	r30, r28
    21e0:	eb 5b       	subi	r30, 0xBB	; 187
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	44 f4       	brge	.+16     	; 0x220c <LCD_voidInit+0xb2>
		__ticks = 1;
    21fc:	fe 01       	movw	r30, r28
    21fe:	ed 5b       	subi	r30, 0xBD	; 189
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
    220a:	64 c0       	rjmp	.+200    	; 0x22d4 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    220c:	fe 01       	movw	r30, r28
    220e:	eb 5b       	subi	r30, 0xBB	; 187
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	0c f0       	brlt	.+2      	; 0x222c <LCD_voidInit+0xd2>
    222a:	43 c0       	rjmp	.+134    	; 0x22b2 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	fe 01       	movw	r30, r28
    222e:	e7 5b       	subi	r30, 0xB7	; 183
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8e 01       	movw	r16, r28
    224c:	0d 5b       	subi	r16, 0xBD	; 189
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	f8 01       	movw	r30, r16
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
    2262:	1f c0       	rjmp	.+62     	; 0x22a2 <LCD_voidInit+0x148>
    2264:	fe 01       	movw	r30, r28
    2266:	ef 5b       	subi	r30, 0xBF	; 191
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	88 ec       	ldi	r24, 0xC8	; 200
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2272:	fe 01       	movw	r30, r28
    2274:	ef 5b       	subi	r30, 0xBF	; 191
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <LCD_voidInit+0x122>
    2280:	fe 01       	movw	r30, r28
    2282:	ef 5b       	subi	r30, 0xBF	; 191
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	de 01       	movw	r26, r28
    228c:	ad 5b       	subi	r26, 0xBD	; 189
    228e:	bf 4f       	sbci	r27, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	ed 5b       	subi	r30, 0xBD	; 189
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	11 96       	adiw	r26, 0x01	; 1
    229e:	9c 93       	st	X, r25
    22a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	fe 01       	movw	r30, r28
    22a4:	ed 5b       	subi	r30, 0xBD	; 189
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	d1 f6       	brne	.-76     	; 0x2264 <LCD_voidInit+0x10a>
    22b0:	24 c0       	rjmp	.+72     	; 0x22fa <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	8e 01       	movw	r16, r28
    22b4:	0d 5b       	subi	r16, 0xBD	; 189
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	fe 01       	movw	r30, r28
    22ba:	eb 5b       	subi	r30, 0xBB	; 187
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	f8 01       	movw	r30, r16
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	fe 01       	movw	r30, r28
    22d6:	ed 5b       	subi	r30, 0xBD	; 189
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	fe 01       	movw	r30, r28
    22e0:	ff 96       	adiw	r30, 0x3f	; 63
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	fe 01       	movw	r30, r28
    22e8:	ff 96       	adiw	r30, 0x3f	; 63
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_voidInit+0x194>
    22f2:	fe 01       	movw	r30, r28
    22f4:	ff 96       	adiw	r30, 0x3f	; 63
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24

	_delay_ms(35);

	LCD_voidSendCommand (LCD_CONTROL_FUNCTION_SET);
    22fa:	88 e3       	ldi	r24, 0x38	; 56
    22fc:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_voidSendCommand>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a8 e4       	ldi	r26, 0x48	; 72
    2306:	b2 e4       	ldi	r27, 0x42	; 66
    2308:	8b af       	std	Y+59, r24	; 0x3b
    230a:	9c af       	std	Y+60, r25	; 0x3c
    230c:	ad af       	std	Y+61, r26	; 0x3d
    230e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2310:	6b ad       	ldd	r22, Y+59	; 0x3b
    2312:	7c ad       	ldd	r23, Y+60	; 0x3c
    2314:	8d ad       	ldd	r24, Y+61	; 0x3d
    2316:	9e ad       	ldd	r25, Y+62	; 0x3e
    2318:	2b ea       	ldi	r18, 0xAB	; 171
    231a:	3a ea       	ldi	r19, 0xAA	; 170
    231c:	4a e2       	ldi	r20, 0x2A	; 42
    231e:	50 e4       	ldi	r21, 0x40	; 64
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8f ab       	std	Y+55, r24	; 0x37
    232a:	98 af       	std	Y+56, r25	; 0x38
    232c:	a9 af       	std	Y+57, r26	; 0x39
    232e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2330:	6f a9       	ldd	r22, Y+55	; 0x37
    2332:	78 ad       	ldd	r23, Y+56	; 0x38
    2334:	89 ad       	ldd	r24, Y+57	; 0x39
    2336:	9a ad       	ldd	r25, Y+58	; 0x3a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	1c f4       	brge	.+6      	; 0x234e <LCD_voidInit+0x1f4>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	8e ab       	std	Y+54, r24	; 0x36
    234c:	91 c0       	rjmp	.+290    	; 0x2470 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    234e:	6f a9       	ldd	r22, Y+55	; 0x37
    2350:	78 ad       	ldd	r23, Y+56	; 0x38
    2352:	89 ad       	ldd	r24, Y+57	; 0x39
    2354:	9a ad       	ldd	r25, Y+58	; 0x3a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	53 e4       	ldi	r21, 0x43	; 67
    235e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	0c f0       	brlt	.+2      	; 0x2368 <LCD_voidInit+0x20e>
    2366:	7b c0       	rjmp	.+246    	; 0x245e <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    2368:	6b ad       	ldd	r22, Y+59	; 0x3b
    236a:	7c ad       	ldd	r23, Y+60	; 0x3c
    236c:	8d ad       	ldd	r24, Y+61	; 0x3d
    236e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a e7       	ldi	r20, 0x7A	; 122
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8a ab       	std	Y+50, r24	; 0x32
    2382:	9b ab       	std	Y+51, r25	; 0x33
    2384:	ac ab       	std	Y+52, r26	; 0x34
    2386:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2388:	6a a9       	ldd	r22, Y+50	; 0x32
    238a:	7b a9       	ldd	r23, Y+51	; 0x33
    238c:	8c a9       	ldd	r24, Y+52	; 0x34
    238e:	9d a9       	ldd	r25, Y+53	; 0x35
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4a ef       	ldi	r20, 0xFA	; 250
    2396:	54 e4       	ldi	r21, 0x44	; 68
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	8e a7       	std	Y+46, r24	; 0x2e
    23a2:	9f a7       	std	Y+47, r25	; 0x2f
    23a4:	a8 ab       	std	Y+48, r26	; 0x30
    23a6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    23a8:	6e a5       	ldd	r22, Y+46	; 0x2e
    23aa:	7f a5       	ldd	r23, Y+47	; 0x2f
    23ac:	88 a9       	ldd	r24, Y+48	; 0x30
    23ae:	99 a9       	ldd	r25, Y+49	; 0x31
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	5f e3       	ldi	r21, 0x3F	; 63
    23b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23bc:	88 23       	and	r24, r24
    23be:	2c f4       	brge	.+10     	; 0x23ca <LCD_voidInit+0x270>
		__ticks = 1;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9d a7       	std	Y+45, r25	; 0x2d
    23c6:	8c a7       	std	Y+44, r24	; 0x2c
    23c8:	3f c0       	rjmp	.+126    	; 0x2448 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    23ca:	6e a5       	ldd	r22, Y+46	; 0x2e
    23cc:	7f a5       	ldd	r23, Y+47	; 0x2f
    23ce:	88 a9       	ldd	r24, Y+48	; 0x30
    23d0:	99 a9       	ldd	r25, Y+49	; 0x31
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	3f ef       	ldi	r19, 0xFF	; 255
    23d6:	4f e7       	ldi	r20, 0x7F	; 127
    23d8:	57 e4       	ldi	r21, 0x47	; 71
    23da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23de:	18 16       	cp	r1, r24
    23e0:	4c f5       	brge	.+82     	; 0x2434 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e2:	6a a9       	ldd	r22, Y+50	; 0x32
    23e4:	7b a9       	ldd	r23, Y+51	; 0x33
    23e6:	8c a9       	ldd	r24, Y+52	; 0x34
    23e8:	9d a9       	ldd	r25, Y+53	; 0x35
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e2       	ldi	r20, 0x20	; 32
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9d a7       	std	Y+45, r25	; 0x2d
    2408:	8c a7       	std	Y+44, r24	; 0x2c
    240a:	0f c0       	rjmp	.+30     	; 0x242a <LCD_voidInit+0x2d0>
    240c:	88 ec       	ldi	r24, 0xC8	; 200
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9b a7       	std	Y+43, r25	; 0x2b
    2412:	8a a7       	std	Y+42, r24	; 0x2a
    2414:	8a a5       	ldd	r24, Y+42	; 0x2a
    2416:	9b a5       	ldd	r25, Y+43	; 0x2b
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <LCD_voidInit+0x2be>
    241c:	9b a7       	std	Y+43, r25	; 0x2b
    241e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2420:	8c a5       	ldd	r24, Y+44	; 0x2c
    2422:	9d a5       	ldd	r25, Y+45	; 0x2d
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	9d a7       	std	Y+45, r25	; 0x2d
    2428:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242a:	8c a5       	ldd	r24, Y+44	; 0x2c
    242c:	9d a5       	ldd	r25, Y+45	; 0x2d
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	69 f7       	brne	.-38     	; 0x240c <LCD_voidInit+0x2b2>
    2432:	24 c0       	rjmp	.+72     	; 0x247c <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2434:	6e a5       	ldd	r22, Y+46	; 0x2e
    2436:	7f a5       	ldd	r23, Y+47	; 0x2f
    2438:	88 a9       	ldd	r24, Y+48	; 0x30
    243a:	99 a9       	ldd	r25, Y+49	; 0x31
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9d a7       	std	Y+45, r25	; 0x2d
    2446:	8c a7       	std	Y+44, r24	; 0x2c
    2448:	8c a5       	ldd	r24, Y+44	; 0x2c
    244a:	9d a5       	ldd	r25, Y+45	; 0x2d
    244c:	99 a7       	std	Y+41, r25	; 0x29
    244e:	88 a7       	std	Y+40, r24	; 0x28
    2450:	88 a5       	ldd	r24, Y+40	; 0x28
    2452:	99 a5       	ldd	r25, Y+41	; 0x29
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_voidInit+0x2fa>
    2458:	99 a7       	std	Y+41, r25	; 0x29
    245a:	88 a7       	std	Y+40, r24	; 0x28
    245c:	0f c0       	rjmp	.+30     	; 0x247c <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    245e:	6f a9       	ldd	r22, Y+55	; 0x37
    2460:	78 ad       	ldd	r23, Y+56	; 0x38
    2462:	89 ad       	ldd	r24, Y+57	; 0x39
    2464:	9a ad       	ldd	r25, Y+58	; 0x3a
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	8e ab       	std	Y+54, r24	; 0x36
    2470:	8e a9       	ldd	r24, Y+54	; 0x36
    2472:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2474:	8f a1       	ldd	r24, Y+39	; 0x27
    2476:	8a 95       	dec	r24
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_voidInit+0x31c>
    247a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_DISPLAY_ONOFF);
    247c:	8f e0       	ldi	r24, 0x0F	; 15
    247e:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_voidSendCommand>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a8 e4       	ldi	r26, 0x48	; 72
    2488:	b2 e4       	ldi	r27, 0x42	; 66
    248a:	8b a3       	std	Y+35, r24	; 0x23
    248c:	9c a3       	std	Y+36, r25	; 0x24
    248e:	ad a3       	std	Y+37, r26	; 0x25
    2490:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2492:	6b a1       	ldd	r22, Y+35	; 0x23
    2494:	7c a1       	ldd	r23, Y+36	; 0x24
    2496:	8d a1       	ldd	r24, Y+37	; 0x25
    2498:	9e a1       	ldd	r25, Y+38	; 0x26
    249a:	2b ea       	ldi	r18, 0xAB	; 171
    249c:	3a ea       	ldi	r19, 0xAA	; 170
    249e:	4a e2       	ldi	r20, 0x2A	; 42
    24a0:	50 e4       	ldi	r21, 0x40	; 64
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8f 8f       	std	Y+31, r24	; 0x1f
    24ac:	98 a3       	std	Y+32, r25	; 0x20
    24ae:	a9 a3       	std	Y+33, r26	; 0x21
    24b0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    24b2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24b4:	78 a1       	ldd	r23, Y+32	; 0x20
    24b6:	89 a1       	ldd	r24, Y+33	; 0x21
    24b8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	1c f4       	brge	.+6      	; 0x24d0 <LCD_voidInit+0x376>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	8e 8f       	std	Y+30, r24	; 0x1e
    24ce:	91 c0       	rjmp	.+290    	; 0x25f2 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    24d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24d2:	78 a1       	ldd	r23, Y+32	; 0x20
    24d4:	89 a1       	ldd	r24, Y+33	; 0x21
    24d6:	9a a1       	ldd	r25, Y+34	; 0x22
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	53 e4       	ldi	r21, 0x43	; 67
    24e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	0c f0       	brlt	.+2      	; 0x24ea <LCD_voidInit+0x390>
    24e8:	7b c0       	rjmp	.+246    	; 0x25e0 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    24ea:	6b a1       	ldd	r22, Y+35	; 0x23
    24ec:	7c a1       	ldd	r23, Y+36	; 0x24
    24ee:	8d a1       	ldd	r24, Y+37	; 0x25
    24f0:	9e a1       	ldd	r25, Y+38	; 0x26
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a e7       	ldi	r20, 0x7A	; 122
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8a 8f       	std	Y+26, r24	; 0x1a
    2504:	9b 8f       	std	Y+27, r25	; 0x1b
    2506:	ac 8f       	std	Y+28, r26	; 0x1c
    2508:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    250c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    250e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2510:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8e 8b       	std	Y+22, r24	; 0x16
    2524:	9f 8b       	std	Y+23, r25	; 0x17
    2526:	a8 8f       	std	Y+24, r26	; 0x18
    2528:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    252a:	6e 89       	ldd	r22, Y+22	; 0x16
    252c:	7f 89       	ldd	r23, Y+23	; 0x17
    252e:	88 8d       	ldd	r24, Y+24	; 0x18
    2530:	99 8d       	ldd	r25, Y+25	; 0x19
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	2c f4       	brge	.+10     	; 0x254c <LCD_voidInit+0x3f2>
		__ticks = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9d 8b       	std	Y+21, r25	; 0x15
    2548:	8c 8b       	std	Y+20, r24	; 0x14
    254a:	3f c0       	rjmp	.+126    	; 0x25ca <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    254c:	6e 89       	ldd	r22, Y+22	; 0x16
    254e:	7f 89       	ldd	r23, Y+23	; 0x17
    2550:	88 8d       	ldd	r24, Y+24	; 0x18
    2552:	99 8d       	ldd	r25, Y+25	; 0x19
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	4c f5       	brge	.+82     	; 0x25b6 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2566:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2568:	8c 8d       	ldd	r24, Y+28	; 0x1c
    256a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9d 8b       	std	Y+21, r25	; 0x15
    258a:	8c 8b       	std	Y+20, r24	; 0x14
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <LCD_voidInit+0x452>
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9b 8b       	std	Y+19, r25	; 0x13
    2594:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2596:	8a 89       	ldd	r24, Y+18	; 0x12
    2598:	9b 89       	ldd	r25, Y+19	; 0x13
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_voidInit+0x440>
    259e:	9b 8b       	std	Y+19, r25	; 0x13
    25a0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a2:	8c 89       	ldd	r24, Y+20	; 0x14
    25a4:	9d 89       	ldd	r25, Y+21	; 0x15
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	9d 8b       	std	Y+21, r25	; 0x15
    25aa:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ac:	8c 89       	ldd	r24, Y+20	; 0x14
    25ae:	9d 89       	ldd	r25, Y+21	; 0x15
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	69 f7       	brne	.-38     	; 0x258e <LCD_voidInit+0x434>
    25b4:	24 c0       	rjmp	.+72     	; 0x25fe <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	6e 89       	ldd	r22, Y+22	; 0x16
    25b8:	7f 89       	ldd	r23, Y+23	; 0x17
    25ba:	88 8d       	ldd	r24, Y+24	; 0x18
    25bc:	99 8d       	ldd	r25, Y+25	; 0x19
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9d 8b       	std	Y+21, r25	; 0x15
    25c8:	8c 8b       	std	Y+20, r24	; 0x14
    25ca:	8c 89       	ldd	r24, Y+20	; 0x14
    25cc:	9d 89       	ldd	r25, Y+21	; 0x15
    25ce:	99 8b       	std	Y+17, r25	; 0x11
    25d0:	88 8b       	std	Y+16, r24	; 0x10
    25d2:	88 89       	ldd	r24, Y+16	; 0x10
    25d4:	99 89       	ldd	r25, Y+17	; 0x11
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_voidInit+0x47c>
    25da:	99 8b       	std	Y+17, r25	; 0x11
    25dc:	88 8b       	std	Y+16, r24	; 0x10
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25e2:	78 a1       	ldd	r23, Y+32	; 0x20
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8e 8f       	std	Y+30, r24	; 0x1e
    25f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25f4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f8:	8a 95       	dec	r24
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_voidInit+0x49e>
    25fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_CLEAR);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_voidSendCommand>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e0       	ldi	r26, 0x00	; 0
    260a:	b0 e4       	ldi	r27, 0x40	; 64
    260c:	8b 87       	std	Y+11, r24	; 0x0b
    260e:	9c 87       	std	Y+12, r25	; 0x0c
    2610:	ad 87       	std	Y+13, r26	; 0x0d
    2612:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6b 85       	ldd	r22, Y+11	; 0x0b
    2616:	7c 85       	ldd	r23, Y+12	; 0x0c
    2618:	8d 85       	ldd	r24, Y+13	; 0x0d
    261a:	9e 85       	ldd	r25, Y+14	; 0x0e
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a ef       	ldi	r20, 0xFA	; 250
    2622:	54 e4       	ldi	r21, 0x44	; 68
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8f 83       	std	Y+7, r24	; 0x07
    262e:	98 87       	std	Y+8, r25	; 0x08
    2630:	a9 87       	std	Y+9, r26	; 0x09
    2632:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_voidInit+0x4fc>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    2656:	6f 81       	ldd	r22, Y+7	; 0x07
    2658:	78 85       	ldd	r23, Y+8	; 0x08
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2670:	7c 85       	ldd	r23, Y+12	; 0x0c
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	9e 85       	ldd	r25, Y+14	; 0x0e
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_voidInit+0x55c>
    2698:	88 ec       	ldi	r24, 0xC8	; 200
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_voidInit+0x54a>
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_voidInit+0x53e>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_voidInit+0x586>
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    26e8:	c4 5b       	subi	r28, 0xB4	; 180
    26ea:	df 4f       	sbci	r29, 0xFF	; 255
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	08 95       	ret

00002700 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Copy_u8Command){
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	69 97       	sbiw	r28, 0x19	; 25
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_LOW);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Command);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	69 8d       	ldd	r22, Y+25	; 0x19
    272e:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	62 e0       	ldi	r22, 0x02	; 2
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e8       	ldi	r26, 0x80	; 128
    2742:	bf e3       	ldi	r27, 0x3F	; 63
    2744:	8d 8b       	std	Y+21, r24	; 0x15
    2746:	9e 8b       	std	Y+22, r25	; 0x16
    2748:	af 8b       	std	Y+23, r26	; 0x17
    274a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    274c:	6d 89       	ldd	r22, Y+21	; 0x15
    274e:	7e 89       	ldd	r23, Y+22	; 0x16
    2750:	8f 89       	ldd	r24, Y+23	; 0x17
    2752:	98 8d       	ldd	r25, Y+24	; 0x18
    2754:	2b ea       	ldi	r18, 0xAB	; 171
    2756:	3a ea       	ldi	r19, 0xAA	; 170
    2758:	4a e2       	ldi	r20, 0x2A	; 42
    275a:	50 e4       	ldi	r21, 0x40	; 64
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	89 8b       	std	Y+17, r24	; 0x11
    2766:	9a 8b       	std	Y+18, r25	; 0x12
    2768:	ab 8b       	std	Y+19, r26	; 0x13
    276a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    276c:	69 89       	ldd	r22, Y+17	; 0x11
    276e:	7a 89       	ldd	r23, Y+18	; 0x12
    2770:	8b 89       	ldd	r24, Y+19	; 0x13
    2772:	9c 89       	ldd	r25, Y+20	; 0x14
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	1c f4       	brge	.+6      	; 0x278a <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	88 8b       	std	Y+16, r24	; 0x10
    2788:	91 c0       	rjmp	.+290    	; 0x28ac <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    278a:	69 89       	ldd	r22, Y+17	; 0x11
    278c:	7a 89       	ldd	r23, Y+18	; 0x12
    278e:	8b 89       	ldd	r24, Y+19	; 0x13
    2790:	9c 89       	ldd	r25, Y+20	; 0x14
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4f e7       	ldi	r20, 0x7F	; 127
    2798:	53 e4       	ldi	r21, 0x43	; 67
    279a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279e:	18 16       	cp	r1, r24
    27a0:	0c f0       	brlt	.+2      	; 0x27a4 <LCD_voidSendCommand+0xa4>
    27a2:	7b c0       	rjmp	.+246    	; 0x289a <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    27a4:	6d 89       	ldd	r22, Y+21	; 0x15
    27a6:	7e 89       	ldd	r23, Y+22	; 0x16
    27a8:	8f 89       	ldd	r24, Y+23	; 0x17
    27aa:	98 8d       	ldd	r25, Y+24	; 0x18
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	4a e7       	ldi	r20, 0x7A	; 122
    27b2:	54 e4       	ldi	r21, 0x44	; 68
    27b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	8c 87       	std	Y+12, r24	; 0x0c
    27be:	9d 87       	std	Y+13, r25	; 0x0d
    27c0:	ae 87       	std	Y+14, r26	; 0x0e
    27c2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    27c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    27c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a ef       	ldi	r20, 0xFA	; 250
    27d2:	54 e4       	ldi	r21, 0x44	; 68
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	88 87       	std	Y+8, r24	; 0x08
    27de:	99 87       	std	Y+9, r25	; 0x09
    27e0:	aa 87       	std	Y+10, r26	; 0x0a
    27e2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27e4:	68 85       	ldd	r22, Y+8	; 0x08
    27e6:	79 85       	ldd	r23, Y+9	; 0x09
    27e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e8       	ldi	r20, 0x80	; 128
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	2c f4       	brge	.+10     	; 0x2806 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9f 83       	std	Y+7, r25	; 0x07
    2802:	8e 83       	std	Y+6, r24	; 0x06
    2804:	3f c0       	rjmp	.+126    	; 0x2884 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    2806:	68 85       	ldd	r22, Y+8	; 0x08
    2808:	79 85       	ldd	r23, Y+9	; 0x09
    280a:	8a 85       	ldd	r24, Y+10	; 0x0a
    280c:	9b 85       	ldd	r25, Y+11	; 0x0b
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	4f e7       	ldi	r20, 0x7F	; 127
    2814:	57 e4       	ldi	r21, 0x47	; 71
    2816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281a:	18 16       	cp	r1, r24
    281c:	4c f5       	brge	.+82     	; 0x2870 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2820:	7d 85       	ldd	r23, Y+13	; 0x0d
    2822:	8e 85       	ldd	r24, Y+14	; 0x0e
    2824:	9f 85       	ldd	r25, Y+15	; 0x0f
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e2       	ldi	r20, 0x20	; 32
    282c:	51 e4       	ldi	r21, 0x41	; 65
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9f 83       	std	Y+7, r25	; 0x07
    2844:	8e 83       	std	Y+6, r24	; 0x06
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <LCD_voidSendCommand+0x166>
    2848:	88 ec       	ldi	r24, 0xC8	; 200
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9d 83       	std	Y+5, r25	; 0x05
    284e:	8c 83       	std	Y+4, r24	; 0x04
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	9d 81       	ldd	r25, Y+5	; 0x05
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <LCD_voidSendCommand+0x154>
    2858:	9d 83       	std	Y+5, r25	; 0x05
    285a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285c:	8e 81       	ldd	r24, Y+6	; 0x06
    285e:	9f 81       	ldd	r25, Y+7	; 0x07
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	9f 83       	std	Y+7, r25	; 0x07
    2864:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2866:	8e 81       	ldd	r24, Y+6	; 0x06
    2868:	9f 81       	ldd	r25, Y+7	; 0x07
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	69 f7       	brne	.-38     	; 0x2848 <LCD_voidSendCommand+0x148>
    286e:	24 c0       	rjmp	.+72     	; 0x28b8 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2870:	68 85       	ldd	r22, Y+8	; 0x08
    2872:	79 85       	ldd	r23, Y+9	; 0x09
    2874:	8a 85       	ldd	r24, Y+10	; 0x0a
    2876:	9b 85       	ldd	r25, Y+11	; 0x0b
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9f 83       	std	Y+7, r25	; 0x07
    2882:	8e 83       	std	Y+6, r24	; 0x06
    2884:	8e 81       	ldd	r24, Y+6	; 0x06
    2886:	9f 81       	ldd	r25, Y+7	; 0x07
    2888:	9b 83       	std	Y+3, r25	; 0x03
    288a:	8a 83       	std	Y+2, r24	; 0x02
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	9b 81       	ldd	r25, Y+3	; 0x03
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <LCD_voidSendCommand+0x190>
    2894:	9b 83       	std	Y+3, r25	; 0x03
    2896:	8a 83       	std	Y+2, r24	; 0x02
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    289a:	69 89       	ldd	r22, Y+17	; 0x11
    289c:	7a 89       	ldd	r23, Y+18	; 0x12
    289e:	8b 89       	ldd	r24, Y+19	; 0x13
    28a0:	9c 89       	ldd	r25, Y+20	; 0x14
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	88 8b       	std	Y+16, r24	; 0x10
    28ac:	88 89       	ldd	r24, Y+16	; 0x10
    28ae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	8a 95       	dec	r24
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_voidSendCommand+0x1b2>
    28b6:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	62 e0       	ldi	r22, 0x02	; 2
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>

}
    28c2:	69 96       	adiw	r28, 0x19	; 25
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_u8Char){
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	69 97       	sbiw	r28, 0x19	; 25
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_HIGH);
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	61 e0       	ldi	r22, 0x01	; 1
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Char);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	69 8d       	ldd	r22, Y+25	; 0x19
    2902:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	62 e0       	ldi	r22, 0x02	; 2
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e8       	ldi	r26, 0x80	; 128
    2916:	bf e3       	ldi	r27, 0x3F	; 63
    2918:	8d 8b       	std	Y+21, r24	; 0x15
    291a:	9e 8b       	std	Y+22, r25	; 0x16
    291c:	af 8b       	std	Y+23, r26	; 0x17
    291e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2920:	6d 89       	ldd	r22, Y+21	; 0x15
    2922:	7e 89       	ldd	r23, Y+22	; 0x16
    2924:	8f 89       	ldd	r24, Y+23	; 0x17
    2926:	98 8d       	ldd	r25, Y+24	; 0x18
    2928:	2b ea       	ldi	r18, 0xAB	; 171
    292a:	3a ea       	ldi	r19, 0xAA	; 170
    292c:	4a e2       	ldi	r20, 0x2A	; 42
    292e:	50 e4       	ldi	r21, 0x40	; 64
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	89 8b       	std	Y+17, r24	; 0x11
    293a:	9a 8b       	std	Y+18, r25	; 0x12
    293c:	ab 8b       	std	Y+19, r26	; 0x13
    293e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2940:	69 89       	ldd	r22, Y+17	; 0x11
    2942:	7a 89       	ldd	r23, Y+18	; 0x12
    2944:	8b 89       	ldd	r24, Y+19	; 0x13
    2946:	9c 89       	ldd	r25, Y+20	; 0x14
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	1c f4       	brge	.+6      	; 0x295e <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	88 8b       	std	Y+16, r24	; 0x10
    295c:	91 c0       	rjmp	.+290    	; 0x2a80 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    295e:	69 89       	ldd	r22, Y+17	; 0x11
    2960:	7a 89       	ldd	r23, Y+18	; 0x12
    2962:	8b 89       	ldd	r24, Y+19	; 0x13
    2964:	9c 89       	ldd	r25, Y+20	; 0x14
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	53 e4       	ldi	r21, 0x43	; 67
    296e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	0c f0       	brlt	.+2      	; 0x2978 <LCD_voidSendChar+0xa4>
    2976:	7b c0       	rjmp	.+246    	; 0x2a6e <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2978:	6d 89       	ldd	r22, Y+21	; 0x15
    297a:	7e 89       	ldd	r23, Y+22	; 0x16
    297c:	8f 89       	ldd	r24, Y+23	; 0x17
    297e:	98 8d       	ldd	r25, Y+24	; 0x18
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4a e7       	ldi	r20, 0x7A	; 122
    2986:	54 e4       	ldi	r21, 0x44	; 68
    2988:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	8c 87       	std	Y+12, r24	; 0x0c
    2992:	9d 87       	std	Y+13, r25	; 0x0d
    2994:	ae 87       	std	Y+14, r26	; 0x0e
    2996:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	6c 85       	ldd	r22, Y+12	; 0x0c
    299a:	7d 85       	ldd	r23, Y+13	; 0x0d
    299c:	8e 85       	ldd	r24, Y+14	; 0x0e
    299e:	9f 85       	ldd	r25, Y+15	; 0x0f
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	4a ef       	ldi	r20, 0xFA	; 250
    29a6:	54 e4       	ldi	r21, 0x44	; 68
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	88 87       	std	Y+8, r24	; 0x08
    29b2:	99 87       	std	Y+9, r25	; 0x09
    29b4:	aa 87       	std	Y+10, r26	; 0x0a
    29b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29b8:	68 85       	ldd	r22, Y+8	; 0x08
    29ba:	79 85       	ldd	r23, Y+9	; 0x09
    29bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    29be:	9b 85       	ldd	r25, Y+11	; 0x0b
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e8       	ldi	r20, 0x80	; 128
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	2c f4       	brge	.+10     	; 0x29da <LCD_voidSendChar+0x106>
		__ticks = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9f 83       	std	Y+7, r25	; 0x07
    29d6:	8e 83       	std	Y+6, r24	; 0x06
    29d8:	3f c0       	rjmp	.+126    	; 0x2a58 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    29da:	68 85       	ldd	r22, Y+8	; 0x08
    29dc:	79 85       	ldd	r23, Y+9	; 0x09
    29de:	8a 85       	ldd	r24, Y+10	; 0x0a
    29e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	3f ef       	ldi	r19, 0xFF	; 255
    29e6:	4f e7       	ldi	r20, 0x7F	; 127
    29e8:	57 e4       	ldi	r21, 0x47	; 71
    29ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ee:	18 16       	cp	r1, r24
    29f0:	4c f5       	brge	.+82     	; 0x2a44 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    29f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    29f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    29f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e2       	ldi	r20, 0x20	; 32
    2a00:	51 e4       	ldi	r21, 0x41	; 65
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9f 83       	std	Y+7, r25	; 0x07
    2a18:	8e 83       	std	Y+6, r24	; 0x06
    2a1a:	0f c0       	rjmp	.+30     	; 0x2a3a <LCD_voidSendChar+0x166>
    2a1c:	88 ec       	ldi	r24, 0xC8	; 200
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	9d 83       	std	Y+5, r25	; 0x05
    2a22:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a24:	8c 81       	ldd	r24, Y+4	; 0x04
    2a26:	9d 81       	ldd	r25, Y+5	; 0x05
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_voidSendChar+0x154>
    2a2c:	9d 83       	std	Y+5, r25	; 0x05
    2a2e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	8e 81       	ldd	r24, Y+6	; 0x06
    2a32:	9f 81       	ldd	r25, Y+7	; 0x07
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	9f 83       	std	Y+7, r25	; 0x07
    2a38:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	69 f7       	brne	.-38     	; 0x2a1c <LCD_voidSendChar+0x148>
    2a42:	24 c0       	rjmp	.+72     	; 0x2a8c <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a44:	68 85       	ldd	r22, Y+8	; 0x08
    2a46:	79 85       	ldd	r23, Y+9	; 0x09
    2a48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9f 83       	std	Y+7, r25	; 0x07
    2a56:	8e 83       	std	Y+6, r24	; 0x06
    2a58:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a5c:	9b 83       	std	Y+3, r25	; 0x03
    2a5e:	8a 83       	std	Y+2, r24	; 0x02
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <LCD_voidSendChar+0x190>
    2a68:	9b 83       	std	Y+3, r25	; 0x03
    2a6a:	8a 83       	std	Y+2, r24	; 0x02
    2a6c:	0f c0       	rjmp	.+30     	; 0x2a8c <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a6e:	69 89       	ldd	r22, Y+17	; 0x11
    2a70:	7a 89       	ldd	r23, Y+18	; 0x12
    2a72:	8b 89       	ldd	r24, Y+19	; 0x13
    2a74:	9c 89       	ldd	r25, Y+20	; 0x14
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	88 8b       	std	Y+16, r24	; 0x10
    2a80:	88 89       	ldd	r24, Y+16	; 0x10
    2a82:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	8a 95       	dec	r24
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_voidSendChar+0x1b2>
    2a8a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	62 e0       	ldi	r22, 0x02	; 2
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>
}
    2a96:	69 96       	adiw	r28, 0x19	; 25
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_u8String){
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <LCD_voidSendString+0x6>
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	9a 83       	std	Y+2, r25	; 0x02
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	0a c0       	rjmp	.+20     	; 0x2acc <LCD_voidSendString+0x24>
	while(*Copy_u8String != '\0'){
		LCD_voidSendChar (*Copy_u8String);
    2ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aba:	fa 81       	ldd	r31, Y+2	; 0x02
    2abc:	80 81       	ld	r24, Z
    2abe:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_voidSendChar>
		Copy_u8String ++;
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
}

void LCD_voidSendString (u8 *Copy_u8String){
	while(*Copy_u8String != '\0'){
    2acc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ace:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad0:	80 81       	ld	r24, Z
    2ad2:	88 23       	and	r24, r24
    2ad4:	89 f7       	brne	.-30     	; 0x2ab8 <LCD_voidSendString+0x10>
		LCD_voidSendChar (*Copy_u8String);
		Copy_u8String ++;
	}
}
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	08 95       	ret

00002ae0 <LCD_voidSendNumber>:

void LCD_voidSendNumber (u32 Copy_u8Num){
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	65 97       	sbiw	r28, 0x15	; 21
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	6a 8b       	std	Y+18, r22	; 0x12
    2af6:	7b 8b       	std	Y+19, r23	; 0x13
    2af8:	8c 8b       	std	Y+20, r24	; 0x14
    2afa:	9d 8b       	std	Y+21, r25	; 0x15
	u8 str[10];
    u8 i, rem, len = 0;
    2afc:	1d 82       	std	Y+5, r1	; 0x05

    u32 n = Copy_u8Num;
    2afe:	8a 89       	ldd	r24, Y+18	; 0x12
    2b00:	9b 89       	ldd	r25, Y+19	; 0x13
    2b02:	ac 89       	ldd	r26, Y+20	; 0x14
    2b04:	bd 89       	ldd	r27, Y+21	; 0x15
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	ab 83       	std	Y+3, r26	; 0x03
    2b0c:	bc 83       	std	Y+4, r27	; 0x04
    2b0e:	15 c0       	rjmp	.+42     	; 0x2b3a <LCD_voidSendNumber+0x5a>
    while (n != 0)
    {
        len++;
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	8f 5f       	subi	r24, 0xFF	; 255
    2b14:	8d 83       	std	Y+5, r24	; 0x05
        n /= 10;
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b1c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b1e:	2a e0       	ldi	r18, 0x0A	; 10
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodsi4>
    2b2e:	da 01       	movw	r26, r20
    2b30:	c9 01       	movw	r24, r18
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	ab 83       	std	Y+3, r26	; 0x03
    2b38:	bc 83       	std	Y+4, r27	; 0x04
void LCD_voidSendNumber (u32 Copy_u8Num){
	u8 str[10];
    u8 i, rem, len = 0;

    u32 n = Copy_u8Num;
    while (n != 0)
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	ab 81       	ldd	r26, Y+3	; 0x03
    2b40:	bc 81       	ldd	r27, Y+4	; 0x04
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	a1 05       	cpc	r26, r1
    2b46:	b1 05       	cpc	r27, r1
    2b48:	19 f7       	brne	.-58     	; 0x2b10 <LCD_voidSendNumber+0x30>
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    2b4a:	1f 82       	std	Y+7, r1	; 0x07
    2b4c:	37 c0       	rjmp	.+110    	; 0x2bbc <LCD_voidSendNumber+0xdc>
    {
        rem = Copy_u8Num % 10;
    2b4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2b50:	9b 89       	ldd	r25, Y+19	; 0x13
    2b52:	ac 89       	ldd	r26, Y+20	; 0x14
    2b54:	bd 89       	ldd	r27, Y+21	; 0x15
    2b56:	2a e0       	ldi	r18, 0x0A	; 10
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodsi4>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8e 83       	std	Y+6, r24	; 0x06
        Copy_u8Num = Copy_u8Num / 10;
    2b6c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b6e:	9b 89       	ldd	r25, Y+19	; 0x13
    2b70:	ac 89       	ldd	r26, Y+20	; 0x14
    2b72:	bd 89       	ldd	r27, Y+21	; 0x15
    2b74:	2a e0       	ldi	r18, 0x0A	; 10
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodsi4>
    2b84:	da 01       	movw	r26, r20
    2b86:	c9 01       	movw	r24, r18
    2b88:	8a 8b       	std	Y+18, r24	; 0x12
    2b8a:	9b 8b       	std	Y+19, r25	; 0x13
    2b8c:	ac 8b       	std	Y+20, r26	; 0x14
    2b8e:	bd 8b       	std	Y+21, r27	; 0x15
        str[len - (i + 1)] = rem + '0';
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	8f 81       	ldd	r24, Y+7	; 0x07
    2b98:	88 2f       	mov	r24, r24
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	80 95       	com	r24
    2b9e:	90 95       	com	r25
    2ba0:	28 0f       	add	r18, r24
    2ba2:	39 1f       	adc	r19, r25
    2ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba6:	48 2f       	mov	r20, r24
    2ba8:	40 5d       	subi	r20, 0xD0	; 208
    2baa:	ce 01       	movw	r24, r28
    2bac:	08 96       	adiw	r24, 0x08	; 8
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e2 0f       	add	r30, r18
    2bb2:	f3 1f       	adc	r31, r19
    2bb4:	40 83       	st	Z, r20
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    2bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	8f 83       	std	Y+7, r24	; 0x07
    2bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	98 17       	cp	r25, r24
    2bc2:	28 f2       	brcs	.-118    	; 0x2b4e <LCD_voidSendNumber+0x6e>
    {
        rem = Copy_u8Num % 10;
        Copy_u8Num = Copy_u8Num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	ce 01       	movw	r24, r28
    2bcc:	08 96       	adiw	r24, 0x08	; 8
    2bce:	fc 01       	movw	r30, r24
    2bd0:	e2 0f       	add	r30, r18
    2bd2:	f3 1f       	adc	r31, r19
    2bd4:	10 82       	st	Z, r1

    LCD_voidSendString (str);
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	08 96       	adiw	r24, 0x08	; 8
    2bda:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <LCD_voidSendString>
}
    2bde:	65 96       	adiw	r28, 0x15	; 21
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <LCD_voidSetLocation>:

void LCD_voidSetLocation (u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <LCD_voidSetLocation+0x6>
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <LCD_voidSetLocation+0x8>
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	89 83       	std	Y+1, r24	; 0x01
    2bfe:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8LineNum){
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	3c 83       	std	Y+4, r19	; 0x04
    2c08:	2b 83       	std	Y+3, r18	; 0x03
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	91 05       	cpc	r25, r1
    2c12:	31 f0       	breq	.+12     	; 0x2c20 <LCD_voidSetLocation+0x30>
    2c14:	2b 81       	ldd	r18, Y+3	; 0x03
    2c16:	3c 81       	ldd	r19, Y+4	; 0x04
    2c18:	22 30       	cpi	r18, 0x02	; 2
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	31 f0       	breq	.+12     	; 0x2c2a <LCD_voidSetLocation+0x3a>
    2c1e:	09 c0       	rjmp	.+18     	; 0x2c32 <LCD_voidSetLocation+0x42>
		case LCD_LINE_1: LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	80 58       	subi	r24, 0x80	; 128
    2c24:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_voidSendCommand>
    2c28:	04 c0       	rjmp	.+8      	; 0x2c32 <LCD_voidSetLocation+0x42>

		case LCD_LINE_2: LCD_voidSendCommand(0xc0 + Copy_u8CharNum); break;
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	80 54       	subi	r24, 0x40	; 64
    2c2e:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_voidSendCommand>

		default: return;
	}
}
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	cf 91       	pop	r28
    2c3c:	df 91       	pop	r29
    2c3e:	08 95       	ret

00002c40 <LCD_voidDrawSpecialChar>:

void LCD_voidDrawSpecialChar (u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <LCD_voidDrawSpecialChar+0x6>
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <LCD_voidDrawSpecialChar+0x8>
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	8a 83       	std	Y+2, r24	; 0x02
    2c4e:	7c 83       	std	Y+4, r23	; 0x04
    2c50:	6b 83       	std	Y+3, r22	; 0x03
	u8 i;

	if(Copy_u8CharIndex < 8){
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	88 30       	cpi	r24, 0x08	; 8
    2c56:	f8 f4       	brcc	.+62     	; 0x2c96 <LCD_voidDrawSpecialChar+0x56>
		LCD_voidSendCommand (0x40 + (Copy_u8CharIndex*8));
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	08 96       	adiw	r24, 0x08	; 8
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_voidSendCommand>
		for(i=0;i<8;i++) LCD_voidSendChar(*(Copy_u8SpecialChar+i));
    2c70:	19 82       	std	Y+1, r1	; 0x01
    2c72:	0e c0       	rjmp	.+28     	; 0x2c90 <LCD_voidDrawSpecialChar+0x50>
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	fc 01       	movw	r30, r24
    2c80:	e2 0f       	add	r30, r18
    2c82:	f3 1f       	adc	r31, r19
    2c84:	80 81       	ld	r24, Z
    2c86:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_voidSendChar>
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	88 30       	cpi	r24, 0x08	; 8
    2c94:	78 f3       	brcs	.-34     	; 0x2c74 <LCD_voidDrawSpecialChar+0x34>
	}
}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar (u8 Copy_u8CharIndex){
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	0f 92       	push	r0
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendChar (Copy_u8CharIndex);
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_voidSendChar>
}
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <KPD_voidInit>:

u8 KPD_Au8Keys[4][4] = KPD_KEYS;
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	0f 92       	push	r0
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    2cc8:	19 82       	std	Y+1, r1	; 0x01
    2cca:	1b c0       	rjmp	.+54     	; 0x2d02 <KPD_voidInit+0x44>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	ee 57       	subi	r30, 0x7E	; 126
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	90 81       	ld	r25, Z
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	69 2f       	mov	r22, r25
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	fc 01       	movw	r30, r24
    2cec:	ea 57       	subi	r30, 0x7A	; 122
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	90 81       	ld	r25, Z
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	69 2f       	mov	r22, r25
    2cf6:	42 e0       	ldi	r20, 0x02	; 2
    2cf8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_voidSetPinDirection>
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	8f 5f       	subi	r24, 0xFF	; 255
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	84 30       	cpi	r24, 0x04	; 4
    2d06:	10 f3       	brcs	.-60     	; 0x2ccc <KPD_voidInit+0xe>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
	}
}
    2d08:	0f 90       	pop	r0
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	61 97       	sbiw	r28, 0x11	; 17
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;
    2d24:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    2d26:	19 8a       	std	Y+17, r1	; 0x11
    2d28:	c4 c0       	rjmp	.+392    	; 0x2eb2 <KPD_u8GetPressedKey+0x1a2>
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    2d2a:	89 89       	ldd	r24, Y+17	; 0x11
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	fc 01       	movw	r30, r24
    2d32:	ee 57       	subi	r30, 0x7E	; 126
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	90 81       	ld	r25, Z
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	69 2f       	mov	r22, r25
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    2d42:	18 8a       	std	Y+16, r1	; 0x10
    2d44:	a3 c0       	rjmp	.+326    	; 0x2e8c <KPD_u8GetPressedKey+0x17c>

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    2d46:	88 89       	ldd	r24, Y+16	; 0x10
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	ea 57       	subi	r30, 0x7A	; 122
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	90 81       	ld	r25, Z
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	69 2f       	mov	r22, r25
    2d58:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <DIO_u8GetPinValue>
    2d5c:	88 23       	and	r24, r24
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <KPD_u8GetPressedKey+0x52>
    2d60:	92 c0       	rjmp	.+292    	; 0x2e86 <KPD_u8GetPressedKey+0x176>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a8 ec       	ldi	r26, 0xC8	; 200
    2d68:	b1 e4       	ldi	r27, 0x41	; 65
    2d6a:	8b 87       	std	Y+11, r24	; 0x0b
    2d6c:	9c 87       	std	Y+12, r25	; 0x0c
    2d6e:	ad 87       	std	Y+13, r26	; 0x0d
    2d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a ef       	ldi	r20, 0xFA	; 250
    2d80:	54 e4       	ldi	r21, 0x44	; 68
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8f 83       	std	Y+7, r24	; 0x07
    2d8c:	98 87       	std	Y+8, r25	; 0x08
    2d8e:	a9 87       	std	Y+9, r26	; 0x09
    2d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d92:	6f 81       	ldd	r22, Y+7	; 0x07
    2d94:	78 85       	ldd	r23, Y+8	; 0x08
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
    2d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	2c f4       	brge	.+10     	; 0x2db4 <KPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9e 83       	std	Y+6, r25	; 0x06
    2db0:	8d 83       	std	Y+5, r24	; 0x05
    2db2:	3f c0       	rjmp	.+126    	; 0x2e32 <KPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    2db4:	6f 81       	ldd	r22, Y+7	; 0x07
    2db6:	78 85       	ldd	r23, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	4c f5       	brge	.+82     	; 0x2e1e <KPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e2       	ldi	r20, 0x20	; 32
    2dda:	51 e4       	ldi	r21, 0x41	; 65
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	0f c0       	rjmp	.+30     	; 0x2e14 <KPD_u8GetPressedKey+0x104>
    2df6:	88 ec       	ldi	r24, 0xC8	; 200
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <KPD_u8GetPressedKey+0xf2>
    2e06:	9c 83       	std	Y+4, r25	; 0x04
    2e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	9e 81       	ldd	r25, Y+6	; 0x06
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <KPD_u8GetPressedKey+0xe6>
    2e1c:	27 c0       	rjmp	.+78     	; 0x2e6c <KPD_u8GetPressedKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <KPD_u8GetPressedKey+0x12e>
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	12 c0       	rjmp	.+36     	; 0x2e6c <KPD_u8GetPressedKey+0x15c>
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
    2e48:	89 89       	ldd	r24, Y+17	; 0x11
    2e4a:	48 2f       	mov	r20, r24
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	88 89       	ldd	r24, Y+16	; 0x10
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	ca 01       	movw	r24, r20
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	82 0f       	add	r24, r18
    2e60:	93 1f       	adc	r25, r19
    2e62:	fc 01       	movw	r30, r24
    2e64:	ee 58       	subi	r30, 0x8E	; 142
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 87       	std	Y+15, r24	; 0x0f

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    2e6c:	88 89       	ldd	r24, Y+16	; 0x10
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	fc 01       	movw	r30, r24
    2e74:	ea 57       	subi	r30, 0x7A	; 122
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	90 81       	ld	r25, Z
    2e7a:	82 e0       	ldi	r24, 0x02	; 2
    2e7c:	69 2f       	mov	r22, r25
    2e7e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <DIO_u8GetPinValue>
    2e82:	88 23       	and	r24, r24
    2e84:	09 f3       	breq	.-62     	; 0x2e48 <KPD_u8GetPressedKey+0x138>
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    2e86:	88 89       	ldd	r24, Y+16	; 0x10
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	88 8b       	std	Y+16, r24	; 0x10
    2e8c:	88 89       	ldd	r24, Y+16	; 0x10
    2e8e:	84 30       	cpi	r24, 0x04	; 4
    2e90:	08 f4       	brcc	.+2      	; 0x2e94 <KPD_u8GetPressedKey+0x184>
    2e92:	59 cf       	rjmp	.-334    	; 0x2d46 <KPD_u8GetPressedKey+0x36>
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
				}
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    2e94:	89 89       	ldd	r24, Y+17	; 0x11
    2e96:	88 2f       	mov	r24, r24
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	ee 57       	subi	r30, 0x7E	; 126
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	90 81       	ld	r25, Z
    2ea2:	82 e0       	ldi	r24, 0x02	; 2
    2ea4:	69 2f       	mov	r22, r25
    2ea6:	41 e0       	ldi	r20, 0x01	; 1
    2ea8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidSetPinValue>
}

u8 KPD_u8GetPressedKey(void){
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    2eac:	89 89       	ldd	r24, Y+17	; 0x11
    2eae:	8f 5f       	subi	r24, 0xFF	; 255
    2eb0:	89 8b       	std	Y+17, r24	; 0x11
    2eb2:	89 89       	ldd	r24, Y+17	; 0x11
    2eb4:	84 30       	cpi	r24, 0x04	; 4
    2eb6:	08 f4       	brcc	.+2      	; 0x2eba <KPD_u8GetPressedKey+0x1aa>
    2eb8:	38 cf       	rjmp	.-400    	; 0x2d2a <KPD_u8GetPressedKey+0x1a>
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
	}
	return Local_u8ReturnValue;
    2eba:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2ebc:	61 96       	adiw	r28, 0x11	; 17
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <main>:
//}




int main(){
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	0f 92       	push	r0
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
	KPD_voidInit();
    2ed8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <KPD_voidInit>

	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_INPUT);
    2edc:	83 e0       	ldi	r24, 0x03	; 3
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT);
    2ee6:	83 e0       	ldi	r24, 0x03	; 3
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_voidSetPinDirection>

	UART_voidInit();
    2ef0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_voidInit>
	while(1){
		u8 Local_u8PressedKey = KPD_u8GetPressedKey();
    2ef4:	0e 94 88 16 	call	0x2d10	; 0x2d10 <KPD_u8GetPressedKey>
    2ef8:	89 83       	std	Y+1, r24	; 0x01
		UART_voidSendData(Local_u8PressedKey);
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	0e 94 a8 06 	call	0xd50	; 0xd50 <UART_voidSendData>
    2f00:	f9 cf       	rjmp	.-14     	; 0x2ef4 <main+0x26>

00002f02 <__udivmodqi4>:
    2f02:	99 1b       	sub	r25, r25
    2f04:	79 e0       	ldi	r23, 0x09	; 9
    2f06:	04 c0       	rjmp	.+8      	; 0x2f10 <__udivmodqi4_ep>

00002f08 <__udivmodqi4_loop>:
    2f08:	99 1f       	adc	r25, r25
    2f0a:	96 17       	cp	r25, r22
    2f0c:	08 f0       	brcs	.+2      	; 0x2f10 <__udivmodqi4_ep>
    2f0e:	96 1b       	sub	r25, r22

00002f10 <__udivmodqi4_ep>:
    2f10:	88 1f       	adc	r24, r24
    2f12:	7a 95       	dec	r23
    2f14:	c9 f7       	brne	.-14     	; 0x2f08 <__udivmodqi4_loop>
    2f16:	80 95       	com	r24
    2f18:	08 95       	ret

00002f1a <__divmodhi4>:
    2f1a:	97 fb       	bst	r25, 7
    2f1c:	09 2e       	mov	r0, r25
    2f1e:	07 26       	eor	r0, r23
    2f20:	0a d0       	rcall	.+20     	; 0x2f36 <__divmodhi4_neg1>
    2f22:	77 fd       	sbrc	r23, 7
    2f24:	04 d0       	rcall	.+8      	; 0x2f2e <__divmodhi4_neg2>
    2f26:	2e d0       	rcall	.+92     	; 0x2f84 <__udivmodhi4>
    2f28:	06 d0       	rcall	.+12     	; 0x2f36 <__divmodhi4_neg1>
    2f2a:	00 20       	and	r0, r0
    2f2c:	1a f4       	brpl	.+6      	; 0x2f34 <__divmodhi4_exit>

00002f2e <__divmodhi4_neg2>:
    2f2e:	70 95       	com	r23
    2f30:	61 95       	neg	r22
    2f32:	7f 4f       	sbci	r23, 0xFF	; 255

00002f34 <__divmodhi4_exit>:
    2f34:	08 95       	ret

00002f36 <__divmodhi4_neg1>:
    2f36:	f6 f7       	brtc	.-4      	; 0x2f34 <__divmodhi4_exit>
    2f38:	90 95       	com	r25
    2f3a:	81 95       	neg	r24
    2f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3e:	08 95       	ret

00002f40 <__udivmodsi4>:
    2f40:	a1 e2       	ldi	r26, 0x21	; 33
    2f42:	1a 2e       	mov	r1, r26
    2f44:	aa 1b       	sub	r26, r26
    2f46:	bb 1b       	sub	r27, r27
    2f48:	fd 01       	movw	r30, r26
    2f4a:	0d c0       	rjmp	.+26     	; 0x2f66 <__udivmodsi4_ep>

00002f4c <__udivmodsi4_loop>:
    2f4c:	aa 1f       	adc	r26, r26
    2f4e:	bb 1f       	adc	r27, r27
    2f50:	ee 1f       	adc	r30, r30
    2f52:	ff 1f       	adc	r31, r31
    2f54:	a2 17       	cp	r26, r18
    2f56:	b3 07       	cpc	r27, r19
    2f58:	e4 07       	cpc	r30, r20
    2f5a:	f5 07       	cpc	r31, r21
    2f5c:	20 f0       	brcs	.+8      	; 0x2f66 <__udivmodsi4_ep>
    2f5e:	a2 1b       	sub	r26, r18
    2f60:	b3 0b       	sbc	r27, r19
    2f62:	e4 0b       	sbc	r30, r20
    2f64:	f5 0b       	sbc	r31, r21

00002f66 <__udivmodsi4_ep>:
    2f66:	66 1f       	adc	r22, r22
    2f68:	77 1f       	adc	r23, r23
    2f6a:	88 1f       	adc	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	1a 94       	dec	r1
    2f70:	69 f7       	brne	.-38     	; 0x2f4c <__udivmodsi4_loop>
    2f72:	60 95       	com	r22
    2f74:	70 95       	com	r23
    2f76:	80 95       	com	r24
    2f78:	90 95       	com	r25
    2f7a:	9b 01       	movw	r18, r22
    2f7c:	ac 01       	movw	r20, r24
    2f7e:	bd 01       	movw	r22, r26
    2f80:	cf 01       	movw	r24, r30
    2f82:	08 95       	ret

00002f84 <__udivmodhi4>:
    2f84:	aa 1b       	sub	r26, r26
    2f86:	bb 1b       	sub	r27, r27
    2f88:	51 e1       	ldi	r21, 0x11	; 17
    2f8a:	07 c0       	rjmp	.+14     	; 0x2f9a <__udivmodhi4_ep>

00002f8c <__udivmodhi4_loop>:
    2f8c:	aa 1f       	adc	r26, r26
    2f8e:	bb 1f       	adc	r27, r27
    2f90:	a6 17       	cp	r26, r22
    2f92:	b7 07       	cpc	r27, r23
    2f94:	10 f0       	brcs	.+4      	; 0x2f9a <__udivmodhi4_ep>
    2f96:	a6 1b       	sub	r26, r22
    2f98:	b7 0b       	sbc	r27, r23

00002f9a <__udivmodhi4_ep>:
    2f9a:	88 1f       	adc	r24, r24
    2f9c:	99 1f       	adc	r25, r25
    2f9e:	5a 95       	dec	r21
    2fa0:	a9 f7       	brne	.-22     	; 0x2f8c <__udivmodhi4_loop>
    2fa2:	80 95       	com	r24
    2fa4:	90 95       	com	r25
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	08 95       	ret

00002fac <__prologue_saves__>:
    2fac:	2f 92       	push	r2
    2fae:	3f 92       	push	r3
    2fb0:	4f 92       	push	r4
    2fb2:	5f 92       	push	r5
    2fb4:	6f 92       	push	r6
    2fb6:	7f 92       	push	r7
    2fb8:	8f 92       	push	r8
    2fba:	9f 92       	push	r9
    2fbc:	af 92       	push	r10
    2fbe:	bf 92       	push	r11
    2fc0:	cf 92       	push	r12
    2fc2:	df 92       	push	r13
    2fc4:	ef 92       	push	r14
    2fc6:	ff 92       	push	r15
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	ca 1b       	sub	r28, r26
    2fd6:	db 0b       	sbc	r29, r27
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	09 94       	ijmp

00002fe4 <__epilogue_restores__>:
    2fe4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fe6:	39 88       	ldd	r3, Y+17	; 0x11
    2fe8:	48 88       	ldd	r4, Y+16	; 0x10
    2fea:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fec:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fee:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ff0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ff2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ff4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ff6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ff8:	c8 84       	ldd	r12, Y+8	; 0x08
    2ffa:	df 80       	ldd	r13, Y+7	; 0x07
    2ffc:	ee 80       	ldd	r14, Y+6	; 0x06
    2ffe:	fd 80       	ldd	r15, Y+5	; 0x05
    3000:	0c 81       	ldd	r16, Y+4	; 0x04
    3002:	1b 81       	ldd	r17, Y+3	; 0x03
    3004:	aa 81       	ldd	r26, Y+2	; 0x02
    3006:	b9 81       	ldd	r27, Y+1	; 0x01
    3008:	ce 0f       	add	r28, r30
    300a:	d1 1d       	adc	r29, r1
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	ed 01       	movw	r28, r26
    3018:	08 95       	ret

0000301a <_exit>:
    301a:	f8 94       	cli

0000301c <__stop_program>:
    301c:	ff cf       	rjmp	.-2      	; 0x301c <__stop_program>
