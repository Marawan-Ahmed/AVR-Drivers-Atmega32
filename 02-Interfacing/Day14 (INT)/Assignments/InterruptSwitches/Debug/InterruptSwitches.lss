
InterruptSwitches.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000337a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000337a  0000340e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008a  0080008a  00003438  2**0
                  ALLOC
  3 .stab         000029dc  00000000  00000000  00003438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000128e  00000000  00000000  00005e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000070a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007202  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007391  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000093d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b45c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c12c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 13 	call	0x2622	; 0x2622 <main>
      8a:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <INT_voidEnable>:
#include <avr/interrupt.h>
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "INT.h"

void INT_voidEnable(u8 Copy_u8INTIndex, u8 Copy_u8INTSense){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2a 97       	sbiw	r28, 0x0a	; 10
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex) {
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	3a 87       	std	Y+10, r19	; 0x0a
     cbe:	29 87       	std	Y+9, r18	; 0x09
     cc0:	89 85       	ldd	r24, Y+9	; 0x09
     cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <INT_voidEnable+0x2e>
     cca:	6d c0       	rjmp	.+218    	; 0xda6 <INT_voidEnable+0x108>
     ccc:	29 85       	ldd	r18, Y+9	; 0x09
     cce:	3a 85       	ldd	r19, Y+10	; 0x0a
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <INT_voidEnable+0x3a>
     cd6:	c9 c0       	rjmp	.+402    	; 0xe6a <INT_voidEnable+0x1cc>
     cd8:	89 85       	ldd	r24, Y+9	; 0x09
     cda:	9a 85       	ldd	r25, Y+10	; 0x0a
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	09 f0       	breq	.+2      	; 0xce2 <INT_voidEnable+0x44>
     ce0:	e9 c0       	rjmp	.+466    	; 0xeb4 <INT_voidEnable+0x216>
		case INT_INT0:
			switch (Copy_u8INTSense) {
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	38 87       	std	Y+8, r19	; 0x08
     cea:	2f 83       	std	Y+7, r18	; 0x07
     cec:	8f 81       	ldd	r24, Y+7	; 0x07
     cee:	98 85       	ldd	r25, Y+8	; 0x08
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	21 f1       	breq	.+72     	; 0xd3e <INT_voidEnable+0xa0>
     cf6:	2f 81       	ldd	r18, Y+7	; 0x07
     cf8:	38 85       	ldd	r19, Y+8	; 0x08
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	31 05       	cpc	r19, r1
     cfe:	2c f4       	brge	.+10     	; 0xd0a <INT_voidEnable+0x6c>
     d00:	8f 81       	ldd	r24, Y+7	; 0x07
     d02:	98 85       	ldd	r25, Y+8	; 0x08
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	61 f0       	breq	.+24     	; 0xd20 <INT_voidEnable+0x82>
     d08:	46 c0       	rjmp	.+140    	; 0xd96 <INT_voidEnable+0xf8>
     d0a:	2f 81       	ldd	r18, Y+7	; 0x07
     d0c:	38 85       	ldd	r19, Y+8	; 0x08
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	21 f1       	breq	.+72     	; 0xd5c <INT_voidEnable+0xbe>
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	91 05       	cpc	r25, r1
     d1c:	71 f1       	breq	.+92     	; 0xd7a <INT_voidEnable+0xdc>
     d1e:	3b c0       	rjmp	.+118    	; 0xd96 <INT_voidEnable+0xf8>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC00);
     d20:	a5 e5       	ldi	r26, 0x55	; 85
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e5 e5       	ldi	r30, 0x55	; 85
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8e 7f       	andi	r24, 0xFE	; 254
     d2c:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
     d2e:	a5 e5       	ldi	r26, 0x55	; 85
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e5       	ldi	r30, 0x55	; 85
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	82 60       	ori	r24, 0x02	; 2
     d3a:	8c 93       	st	X, r24
     d3c:	2c c0       	rjmp	.+88     	; 0xd96 <INT_voidEnable+0xf8>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
     d3e:	a5 e5       	ldi	r26, 0x55	; 85
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e5 e5       	ldi	r30, 0x55	; 85
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC01);
     d4c:	a5 e5       	ldi	r26, 0x55	; 85
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e5       	ldi	r30, 0x55	; 85
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	8c 93       	st	X, r24
     d5a:	1d c0       	rjmp	.+58     	; 0xd96 <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC00);
     d5c:	a5 e5       	ldi	r26, 0x55	; 85
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e5 e5       	ldi	r30, 0x55	; 85
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
     d6a:	a5 e5       	ldi	r26, 0x55	; 85
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e5       	ldi	r30, 0x55	; 85
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8d 7f       	andi	r24, 0xFD	; 253
     d76:	8c 93       	st	X, r24
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <INT_voidEnable+0xf8>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC00);
     d7a:	a5 e5       	ldi	r26, 0x55	; 85
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e5 e5       	ldi	r30, 0x55	; 85
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8e 7f       	andi	r24, 0xFE	; 254
     d86:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC01);
     d88:	a5 e5       	ldi	r26, 0x55	; 85
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e5 e5       	ldi	r30, 0x55	; 85
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8d 7f       	andi	r24, 0xFD	; 253
     d94:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT0);
     d96:	ab e5       	ldi	r26, 0x5B	; 91
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e5       	ldi	r30, 0x5B	; 91
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 64       	ori	r24, 0x40	; 64
     da2:	8c 93       	st	X, r24
     da4:	87 c0       	rjmp	.+270    	; 0xeb4 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			switch (Copy_u8INTSense) {
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3e 83       	std	Y+6, r19	; 0x06
     dae:	2d 83       	std	Y+5, r18	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	21 f1       	breq	.+72     	; 0xe02 <INT_voidEnable+0x164>
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <INT_voidEnable+0x130>
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	61 f0       	breq	.+24     	; 0xde4 <INT_voidEnable+0x146>
     dcc:	46 c0       	rjmp	.+140    	; 0xe5a <INT_voidEnable+0x1bc>
     dce:	2d 81       	ldd	r18, Y+5	; 0x05
     dd0:	3e 81       	ldd	r19, Y+6	; 0x06
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	21 f1       	breq	.+72     	; 0xe20 <INT_voidEnable+0x182>
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	71 f1       	breq	.+92     	; 0xe3e <INT_voidEnable+0x1a0>
     de2:	3b c0       	rjmp	.+118    	; 0xe5a <INT_voidEnable+0x1bc>
				case INT_SENSE_FALLING_EDGE:
					MCUCR = CLR_BIT(MCUCR, ISC10);
     de4:	a5 e5       	ldi	r26, 0x55	; 85
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e5 e5       	ldi	r30, 0x55	; 85
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
     df2:	a5 e5       	ldi	r26, 0x55	; 85
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e5 e5       	ldi	r30, 0x55	; 85
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	8c 93       	st	X, r24
     e00:	2c c0       	rjmp	.+88     	; 0xe5a <INT_voidEnable+0x1bc>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
     e02:	a5 e5       	ldi	r26, 0x55	; 85
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e5 e5       	ldi	r30, 0x55	; 85
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	84 60       	ori	r24, 0x04	; 4
     e0e:	8c 93       	st	X, r24
					MCUCR = SET_BIT(MCUCR, ISC11);
     e10:	a5 e5       	ldi	r26, 0x55	; 85
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e5 e5       	ldi	r30, 0x55	; 85
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 60       	ori	r24, 0x08	; 8
     e1c:	8c 93       	st	X, r24
     e1e:	1d c0       	rjmp	.+58     	; 0xe5a <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_ANY_CHANGE:
					MCUCR = SET_BIT(MCUCR, ISC10);
     e20:	a5 e5       	ldi	r26, 0x55	; 85
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e5 e5       	ldi	r30, 0x55	; 85
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
     e2e:	a5 e5       	ldi	r26, 0x55	; 85
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e5 e5       	ldi	r30, 0x55	; 85
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	8c 93       	st	X, r24
     e3c:	0e c0       	rjmp	.+28     	; 0xe5a <INT_voidEnable+0x1bc>
					break;

				case INT_SENSE_LOW_LEVEL:
					MCUCR = CLR_BIT(MCUCR, ISC10);
     e3e:	a5 e5       	ldi	r26, 0x55	; 85
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e5       	ldi	r30, 0x55	; 85
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8b 7f       	andi	r24, 0xFB	; 251
     e4a:	8c 93       	st	X, r24
					MCUCR = CLR_BIT(MCUCR, ISC11);
     e4c:	a5 e5       	ldi	r26, 0x55	; 85
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e5 e5       	ldi	r30, 0x55	; 85
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	87 7f       	andi	r24, 0xF7	; 247
     e58:	8c 93       	st	X, r24
					break;
			}
			GICR = SET_BIT(GICR, INT1);
     e5a:	ab e5       	ldi	r26, 0x5B	; 91
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	eb e5       	ldi	r30, 0x5B	; 91
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 68       	ori	r24, 0x80	; 128
     e66:	8c 93       	st	X, r24
     e68:	25 c0       	rjmp	.+74     	; 0xeb4 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			switch (Copy_u8INTSense) {
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	3c 83       	std	Y+4, r19	; 0x04
     e72:	2b 83       	std	Y+3, r18	; 0x03
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	31 f0       	breq	.+12     	; 0xe88 <INT_voidEnable+0x1ea>
     e7c:	2b 81       	ldd	r18, Y+3	; 0x03
     e7e:	3c 81       	ldd	r19, Y+4	; 0x04
     e80:	21 30       	cpi	r18, 0x01	; 1
     e82:	31 05       	cpc	r19, r1
     e84:	49 f0       	breq	.+18     	; 0xe98 <INT_voidEnable+0x1fa>
     e86:	0f c0       	rjmp	.+30     	; 0xea6 <INT_voidEnable+0x208>
				case INT_SENSE_FALLING_EDGE:
					MCUCSR = CLR_BIT(MCUCSR, ISC2);
     e88:	a4 e5       	ldi	r26, 0x54	; 84
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e4 e5       	ldi	r30, 0x54	; 84
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7b       	andi	r24, 0xBF	; 191
     e94:	8c 93       	st	X, r24
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <INT_voidEnable+0x208>
					break;
				case INT_SENSE_RISING_EDGE:
					MCUCSR = SET_BIT(MCUCSR, ISC2);
     e98:	a4 e5       	ldi	r26, 0x54	; 84
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e4 e5       	ldi	r30, 0x54	; 84
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	8c 93       	st	X, r24
					break;

			}
			GICR = SET_BIT(GICR, INT2);
     ea6:	ab e5       	ldi	r26, 0x5B	; 91
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	eb e5       	ldi	r30, 0x5B	; 91
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 62       	ori	r24, 0x20	; 32
     eb2:	8c 93       	st	X, r24
			break;
	}
}
     eb4:	2a 96       	adiw	r28, 0x0a	; 10
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <INT_voidDisable>:
void INT_voidDisable(u8 Copy_u8INTIndex){
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <INT_voidDisable+0x6>
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex) {
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3b 83       	std	Y+3, r19	; 0x03
     edc:	2a 83       	std	Y+2, r18	; 0x02
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	89 f0       	breq	.+34     	; 0xf0a <INT_voidDisable+0x44>
     ee8:	2a 81       	ldd	r18, Y+2	; 0x02
     eea:	3b 81       	ldd	r19, Y+3	; 0x03
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	a1 f0       	breq	.+40     	; 0xf1a <INT_voidDisable+0x54>
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	b9 f4       	brne	.+46     	; 0xf28 <INT_voidDisable+0x62>
		case INT_INT0:
			GICR = CLR_BIT(GICR, INT0);
     efa:	ab e5       	ldi	r26, 0x5B	; 91
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e5       	ldi	r30, 0x5B	; 91
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 7b       	andi	r24, 0xBF	; 191
     f06:	8c 93       	st	X, r24
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <INT_voidDisable+0x62>
			break;

		case INT_INT1:
			GICR = CLR_BIT(GICR, INT1);
     f0a:	ab e5       	ldi	r26, 0x5B	; 91
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e5       	ldi	r30, 0x5B	; 91
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8f 77       	andi	r24, 0x7F	; 127
     f16:	8c 93       	st	X, r24
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <INT_voidDisable+0x62>
			break;

		case INT_INT2:
			GICR = CLR_BIT(GICR, INT2);
     f1a:	ab e5       	ldi	r26, 0x5B	; 91
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	eb e5       	ldi	r30, 0x5B	; 91
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7d       	andi	r24, 0xDF	; 223
     f26:	8c 93       	st	X, r24
			break;
	}
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <DIO_voidSetPinDirection>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	29 97       	sbiw	r28, 0x09	; 9
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	6a 83       	std	Y+2, r22	; 0x02
     f4c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	08 f0       	brcs	.+2      	; 0xf56 <DIO_voidSetPinDirection+0x22>
     f54:	ac c1       	rjmp	.+856    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
		if (Copy_u8Direction == DIO_PIN_OUTPUT){
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <DIO_voidSetPinDirection+0x2a>
     f5c:	6f c0       	rjmp	.+222    	; 0x103c <DIO_voidSetPinDirection+0x108>
			switch(Copy_u8Port){
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	39 87       	std	Y+9, r19	; 0x09
     f66:	28 87       	std	Y+8, r18	; 0x08
     f68:	88 85       	ldd	r24, Y+8	; 0x08
     f6a:	99 85       	ldd	r25, Y+9	; 0x09
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	49 f1       	breq	.+82     	; 0xfc4 <DIO_voidSetPinDirection+0x90>
     f72:	28 85       	ldd	r18, Y+8	; 0x08
     f74:	39 85       	ldd	r19, Y+9	; 0x09
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	2c f4       	brge	.+10     	; 0xf86 <DIO_voidSetPinDirection+0x52>
     f7c:	88 85       	ldd	r24, Y+8	; 0x08
     f7e:	99 85       	ldd	r25, Y+9	; 0x09
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	61 f0       	breq	.+24     	; 0xf9c <DIO_voidSetPinDirection+0x68>
     f84:	94 c1       	rjmp	.+808    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
     f86:	28 85       	ldd	r18, Y+8	; 0x08
     f88:	39 85       	ldd	r19, Y+9	; 0x09
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	71 f1       	breq	.+92     	; 0xfec <DIO_voidSetPinDirection+0xb8>
     f90:	88 85       	ldd	r24, Y+8	; 0x08
     f92:	99 85       	ldd	r25, Y+9	; 0x09
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	e9 f1       	breq	.+122    	; 0x1014 <DIO_voidSetPinDirection+0xe0>
     f9a:	89 c1       	rjmp	.+786    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = SET_BIT(DDRA,Copy_u8Pin); break;
     f9c:	aa e3       	ldi	r26, 0x3A	; 58
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ea e3       	ldi	r30, 0x3A	; 58
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_voidSetPinDirection+0x86>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_voidSetPinDirection+0x82>
     fbe:	84 2b       	or	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	75 c1       	rjmp	.+746    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = SET_BIT(DDRB,Copy_u8Pin); break;
     fc4:	a7 e3       	ldi	r26, 0x37	; 55
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e7 e3       	ldi	r30, 0x37	; 55
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_voidSetPinDirection+0xae>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_voidSetPinDirection+0xaa>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	61 c1       	rjmp	.+706    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = SET_BIT(DDRC,Copy_u8Pin); break;
     fec:	a4 e3       	ldi	r26, 0x34	; 52
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e4 e3       	ldi	r30, 0x34	; 52
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_voidSetPinDirection+0xd6>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_voidSetPinDirection+0xd2>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	4d c1       	rjmp	.+666    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = SET_BIT(DDRD,Copy_u8Pin); break;
    1014:	a1 e3       	ldi	r26, 0x31	; 49
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e1 e3       	ldi	r30, 0x31	; 49
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_voidSetPinDirection+0xfe>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_voidSetPinDirection+0xfa>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	39 c1       	rjmp	.+626    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT){
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	88 23       	and	r24, r24
    1040:	09 f0       	breq	.+2      	; 0x1044 <DIO_voidSetPinDirection+0x110>
    1042:	74 c0       	rjmp	.+232    	; 0x112c <DIO_voidSetPinDirection+0x1f8>
			switch(Copy_u8Port){
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	3f 83       	std	Y+7, r19	; 0x07
    104c:	2e 83       	std	Y+6, r18	; 0x06
    104e:	8e 81       	ldd	r24, Y+6	; 0x06
    1050:	9f 81       	ldd	r25, Y+7	; 0x07
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	59 f1       	breq	.+86     	; 0x10ae <DIO_voidSetPinDirection+0x17a>
    1058:	2e 81       	ldd	r18, Y+6	; 0x06
    105a:	3f 81       	ldd	r19, Y+7	; 0x07
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	2c f4       	brge	.+10     	; 0x106c <DIO_voidSetPinDirection+0x138>
    1062:	8e 81       	ldd	r24, Y+6	; 0x06
    1064:	9f 81       	ldd	r25, Y+7	; 0x07
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	69 f0       	breq	.+26     	; 0x1084 <DIO_voidSetPinDirection+0x150>
    106a:	21 c1       	rjmp	.+578    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
    106c:	2e 81       	ldd	r18, Y+6	; 0x06
    106e:	3f 81       	ldd	r19, Y+7	; 0x07
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	89 f1       	breq	.+98     	; 0x10d8 <DIO_voidSetPinDirection+0x1a4>
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 05       	cpc	r25, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <DIO_voidSetPinDirection+0x14e>
    1080:	40 c0       	rjmp	.+128    	; 0x1102 <DIO_voidSetPinDirection+0x1ce>
    1082:	15 c1       	rjmp	.+554    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); break;
    1084:	aa e3       	ldi	r26, 0x3A	; 58
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e3       	ldi	r30, 0x3A	; 58
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_voidSetPinDirection+0x16e>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_voidSetPinDirection+0x16a>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	00 c1       	rjmp	.+512    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); break;
    10ae:	a7 e3       	ldi	r26, 0x37	; 55
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e7 e3       	ldi	r30, 0x37	; 55
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_voidSetPinDirection+0x198>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_voidSetPinDirection+0x194>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	eb c0       	rjmp	.+470    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); break;
    10d8:	a4 e3       	ldi	r26, 0x34	; 52
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e4 e3       	ldi	r30, 0x34	; 52
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_voidSetPinDirection+0x1c2>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_voidSetPinDirection+0x1be>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	d6 c0       	rjmp	.+428    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); break;
    1102:	a1 e3       	ldi	r26, 0x31	; 49
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e1 e3       	ldi	r30, 0x31	; 49
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_voidSetPinDirection+0x1ec>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_voidSetPinDirection+0x1e8>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	c1 c0       	rjmp	.+386    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				default:	return;	/*do nothing*/
			}			
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT_PULLUP){
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	09 f0       	breq	.+2      	; 0x1134 <DIO_voidSetPinDirection+0x200>
    1132:	bd c0       	rjmp	.+378    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
			switch(Copy_u8Port){
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <DIO_voidSetPinDirection+0x216>
    1148:	3e c0       	rjmp	.+124    	; 0x11c6 <DIO_voidSetPinDirection+0x292>
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <DIO_voidSetPinDirection+0x22a>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	71 f0       	breq	.+28     	; 0x1178 <DIO_voidSetPinDirection+0x244>
    115c:	a8 c0       	rjmp	.+336    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	09 f4       	brne	.+2      	; 0x116a <DIO_voidSetPinDirection+0x236>
    1168:	55 c0       	rjmp	.+170    	; 0x1214 <DIO_voidSetPinDirection+0x2e0>
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	91 05       	cpc	r25, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <DIO_voidSetPinDirection+0x242>
    1174:	76 c0       	rjmp	.+236    	; 0x1262 <DIO_voidSetPinDirection+0x32e>
    1176:	9b c0       	rjmp	.+310    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTA: DDRA = CLR_BIT(DDRA,Copy_u8Pin); PORTA = SET_BIT(PORTA,Copy_u8Pin);break;
    1178:	aa e3       	ldi	r26, 0x3A	; 58
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ea e3       	ldi	r30, 0x3A	; 58
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_voidSetPinDirection+0x260>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	2a 95       	dec	r18
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_voidSetPinDirection+0x25c>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	ab e3       	ldi	r26, 0x3B	; 59
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e3       	ldi	r30, 0x3B	; 59
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_voidSetPinDirection+0x288>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_voidSetPinDirection+0x284>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	74 c0       	rjmp	.+232    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTB: DDRB = CLR_BIT(DDRB,Copy_u8Pin); PORTB = SET_BIT(PORTB,Copy_u8Pin);break;
    11c6:	a7 e3       	ldi	r26, 0x37	; 55
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e7 e3       	ldi	r30, 0x37	; 55
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_voidSetPinDirection+0x2ae>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	2a 95       	dec	r18
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_voidSetPinDirection+0x2aa>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	a8 e3       	ldi	r26, 0x38	; 56
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_voidSetPinDirection+0x2d6>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_voidSetPinDirection+0x2d2>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	4d c0       	rjmp	.+154    	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTC: DDRC = CLR_BIT(DDRC,Copy_u8Pin); PORTC = SET_BIT(PORTC,Copy_u8Pin);break;
    1214:	a4 e3       	ldi	r26, 0x34	; 52
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e4 e3       	ldi	r30, 0x34	; 52
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_voidSetPinDirection+0x2fc>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	2a 95       	dec	r18
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_voidSetPinDirection+0x2f8>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	a5 e3       	ldi	r26, 0x35	; 53
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_voidSetPinDirection+0x324>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_voidSetPinDirection+0x320>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	26 c0       	rjmp	.+76     	; 0x12ae <DIO_voidSetPinDirection+0x37a>
				case DIO_PORTD: DDRD = CLR_BIT(DDRD,Copy_u8Pin); PORTD = SET_BIT(PORTD,Copy_u8Pin);break;
    1262:	a1 e3       	ldi	r26, 0x31	; 49
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e1 e3       	ldi	r30, 0x31	; 49
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_voidSetPinDirection+0x34a>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	2a 95       	dec	r18
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_voidSetPinDirection+0x346>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	a2 e3       	ldi	r26, 0x32	; 50
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_voidSetPinDirection+0x372>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_voidSetPinDirection+0x36e>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
		
	}
	else{
		/*do nothing*/
	}
}
    12ae:	29 96       	adiw	r28, 0x09	; 9
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	27 97       	sbiw	r28, 0x07	; 7
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	6a 83       	std	Y+2, r22	; 0x02
    12d8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin < 8){
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <DIO_voidSetPinValue+0x22>
    12e0:	ea c0       	rjmp	.+468    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
		if (Copy_u8Value == DIO_HIGH){
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <DIO_voidSetPinValue+0x2a>
    12e8:	6f c0       	rjmp	.+222    	; 0x13c8 <DIO_voidSetPinValue+0x108>
			switch(Copy_u8Port){
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3f 83       	std	Y+7, r19	; 0x07
    12f2:	2e 83       	std	Y+6, r18	; 0x06
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	9f 81       	ldd	r25, Y+7	; 0x07
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	49 f1       	breq	.+82     	; 0x1350 <DIO_voidSetPinValue+0x90>
    12fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1300:	3f 81       	ldd	r19, Y+7	; 0x07
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <DIO_voidSetPinValue+0x52>
    1308:	8e 81       	ldd	r24, Y+6	; 0x06
    130a:	9f 81       	ldd	r25, Y+7	; 0x07
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	61 f0       	breq	.+24     	; 0x1328 <DIO_voidSetPinValue+0x68>
    1310:	d2 c0       	rjmp	.+420    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
    1312:	2e 81       	ldd	r18, Y+6	; 0x06
    1314:	3f 81       	ldd	r19, Y+7	; 0x07
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	71 f1       	breq	.+92     	; 0x1378 <DIO_voidSetPinValue+0xb8>
    131c:	8e 81       	ldd	r24, Y+6	; 0x06
    131e:	9f 81       	ldd	r25, Y+7	; 0x07
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	e9 f1       	breq	.+122    	; 0x13a0 <DIO_voidSetPinValue+0xe0>
    1326:	c7 c0       	rjmp	.+398    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = SET_BIT(PORTA,Copy_u8Pin); break;
    1328:	ab e3       	ldi	r26, 0x3B	; 59
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_voidSetPinValue+0x86>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_voidSetPinValue+0x82>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	b3 c0       	rjmp	.+358    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = SET_BIT(PORTB,Copy_u8Pin); break;
    1350:	a8 e3       	ldi	r26, 0x38	; 56
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_voidSetPinValue+0xae>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_voidSetPinValue+0xaa>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	9f c0       	rjmp	.+318    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = SET_BIT(PORTC,Copy_u8Pin); break;
    1378:	a5 e3       	ldi	r26, 0x35	; 53
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e3       	ldi	r30, 0x35	; 53
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_voidSetPinValue+0xd6>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_voidSetPinValue+0xd2>
    139a:	84 2b       	or	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	8b c0       	rjmp	.+278    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = SET_BIT(PORTD,Copy_u8Pin); break;
    13a0:	a2 e3       	ldi	r26, 0x32	; 50
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e2 e3       	ldi	r30, 0x32	; 50
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_voidSetPinValue+0xfe>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_voidSetPinValue+0xfa>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	77 c0       	rjmp	.+238    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				default:	return;/*do nothing*/
			}
		}
		else if (Copy_u8Value == DIO_LOW){
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 23       	and	r24, r24
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <DIO_voidSetPinValue+0x110>
    13ce:	73 c0       	rjmp	.+230    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
			switch(Copy_u8Port){
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	59 f1       	breq	.+86     	; 0x143a <DIO_voidSetPinValue+0x17a>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_voidSetPinValue+0x138>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f0       	breq	.+26     	; 0x1410 <DIO_voidSetPinValue+0x150>
    13f6:	5f c0       	rjmp	.+190    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	89 f1       	breq	.+98     	; 0x1464 <DIO_voidSetPinValue+0x1a4>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <DIO_voidSetPinValue+0x14e>
    140c:	40 c0       	rjmp	.+128    	; 0x148e <DIO_voidSetPinValue+0x1ce>
    140e:	53 c0       	rjmp	.+166    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTA: PORTA = CLR_BIT(PORTA,Copy_u8Pin); break;
    1410:	ab e3       	ldi	r26, 0x3B	; 59
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e3       	ldi	r30, 0x3B	; 59
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_voidSetPinValue+0x16e>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_voidSetPinValue+0x16a>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	3e c0       	rjmp	.+124    	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB: PORTB = CLR_BIT(PORTB,Copy_u8Pin); break;
    143a:	a8 e3       	ldi	r26, 0x38	; 56
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e8 e3       	ldi	r30, 0x38	; 56
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_voidSetPinValue+0x198>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_voidSetPinValue+0x194>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	29 c0       	rjmp	.+82     	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC: PORTC = CLR_BIT(PORTC,Copy_u8Pin); break;
    1464:	a5 e3       	ldi	r26, 0x35	; 53
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e5 e3       	ldi	r30, 0x35	; 53
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_voidSetPinValue+0x1c2>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_voidSetPinValue+0x1be>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD: PORTD = CLR_BIT(PORTD,Copy_u8Pin); break;
    148e:	a2 e3       	ldi	r26, 0x32	; 50
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e2 e3       	ldi	r30, 0x32	; 50
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_voidSetPinValue+0x1ec>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_voidSetPinValue+0x1e8>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}	
}
    14b6:	27 96       	adiw	r28, 0x07	; 7
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <DIO_voidTogglePinValue+0x6>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_voidTogglePinValue+0x8>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <DIO_voidTogglePinValue+0x18>
    14de:	6e c0       	rjmp	.+220    	; 0x15bc <DIO_voidTogglePinValue+0xf4>
			switch(Copy_u8Port){
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3c 83       	std	Y+4, r19	; 0x04
    14e8:	2b 83       	std	Y+3, r18	; 0x03
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	49 f1       	breq	.+82     	; 0x1546 <DIO_voidTogglePinValue+0x7e>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <DIO_voidTogglePinValue+0x40>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <DIO_voidTogglePinValue+0x56>
    1506:	5a c0       	rjmp	.+180    	; 0x15bc <DIO_voidTogglePinValue+0xf4>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	71 f1       	breq	.+92     	; 0x156e <DIO_voidTogglePinValue+0xa6>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	e9 f1       	breq	.+122    	; 0x1596 <DIO_voidTogglePinValue+0xce>
    151c:	4f c0       	rjmp	.+158    	; 0x15bc <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTA: PORTA = TGL_BIT(PORTA,Copy_u8Pin); break;
    151e:	ab e3       	ldi	r26, 0x3B	; 59
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e3       	ldi	r30, 0x3B	; 59
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_voidTogglePinValue+0x74>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_voidTogglePinValue+0x70>
    1540:	84 27       	eor	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	3b c0       	rjmp	.+118    	; 0x15bc <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTB: PORTB = TGL_BIT(PORTB,Copy_u8Pin); break;
    1546:	a8 e3       	ldi	r26, 0x38	; 56
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_voidTogglePinValue+0x9c>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_voidTogglePinValue+0x98>
    1568:	84 27       	eor	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	27 c0       	rjmp	.+78     	; 0x15bc <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTC: PORTC = TGL_BIT(PORTC,Copy_u8Pin); break;
    156e:	a5 e3       	ldi	r26, 0x35	; 53
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e3       	ldi	r30, 0x35	; 53
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_voidTogglePinValue+0xc4>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_voidTogglePinValue+0xc0>
    1590:	84 27       	eor	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	13 c0       	rjmp	.+38     	; 0x15bc <DIO_voidTogglePinValue+0xf4>
				case DIO_PORTD: PORTD = TGL_BIT(PORTD,Copy_u8Pin); break;
    1596:	a2 e3       	ldi	r26, 0x32	; 50
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e2 e3       	ldi	r30, 0x32	; 50
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_voidTogglePinValue+0xec>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_voidTogglePinValue+0xe8>
    15b8:	84 27       	eor	r24, r20
    15ba:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
		return;
	}
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin){
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <DIO_u8GetPinValue+0x6>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_u8GetPinValue+0x8>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_u8GetPinValue+0xa>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin < 8){
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	88 30       	cpi	r24, 0x08	; 8
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <DIO_u8GetPinValue+0x1a>
    15e2:	6f c0       	rjmp	.+222    	; 0x16c2 <DIO_u8GetPinValue+0xf8>
		switch(Copy_u8Port){
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3d 83       	std	Y+5, r19	; 0x05
    15ec:	2c 83       	std	Y+4, r18	; 0x04
    15ee:	4c 81       	ldd	r20, Y+4	; 0x04
    15f0:	5d 81       	ldd	r21, Y+5	; 0x05
    15f2:	41 30       	cpi	r20, 0x01	; 1
    15f4:	51 05       	cpc	r21, r1
    15f6:	49 f1       	breq	.+82     	; 0x164a <DIO_u8GetPinValue+0x80>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	91 05       	cpc	r25, r1
    1600:	34 f4       	brge	.+12     	; 0x160e <DIO_u8GetPinValue+0x44>
    1602:	2c 81       	ldd	r18, Y+4	; 0x04
    1604:	3d 81       	ldd	r19, Y+5	; 0x05
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	61 f0       	breq	.+24     	; 0x1624 <DIO_u8GetPinValue+0x5a>
    160c:	57 c0       	rjmp	.+174    	; 0x16bc <DIO_u8GetPinValue+0xf2>
    160e:	4c 81       	ldd	r20, Y+4	; 0x04
    1610:	5d 81       	ldd	r21, Y+5	; 0x05
    1612:	42 30       	cpi	r20, 0x02	; 2
    1614:	51 05       	cpc	r21, r1
    1616:	61 f1       	breq	.+88     	; 0x1670 <DIO_u8GetPinValue+0xa6>
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	d1 f1       	breq	.+116    	; 0x1696 <DIO_u8GetPinValue+0xcc>
    1622:	4c c0       	rjmp	.+152    	; 0x16bc <DIO_u8GetPinValue+0xf2>
			case DIO_PORTA: return GET_BIT(PINA,Copy_u8Pin); 
    1624:	e9 e3       	ldi	r30, 0x39	; 57
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_u8GetPinValue+0x72>
    1638:	55 95       	asr	r21
    163a:	47 95       	ror	r20
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_u8GetPinValue+0x6e>
    1640:	ca 01       	movw	r24, r20
    1642:	58 2f       	mov	r21, r24
    1644:	51 70       	andi	r21, 0x01	; 1
    1646:	5b 83       	std	Y+3, r21	; 0x03
    1648:	3d c0       	rjmp	.+122    	; 0x16c4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTB: return GET_BIT(PINB,Copy_u8Pin);
    164a:	e6 e3       	ldi	r30, 0x36	; 54
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a9 01       	movw	r20, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8GetPinValue+0x98>
    165e:	55 95       	asr	r21
    1660:	47 95       	ror	r20
    1662:	8a 95       	dec	r24
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8GetPinValue+0x94>
    1666:	ca 01       	movw	r24, r20
    1668:	58 2f       	mov	r21, r24
    166a:	51 70       	andi	r21, 0x01	; 1
    166c:	5b 83       	std	Y+3, r21	; 0x03
    166e:	2a c0       	rjmp	.+84     	; 0x16c4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTC: return GET_BIT(PINC,Copy_u8Pin); 
    1670:	e3 e3       	ldi	r30, 0x33	; 51
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_u8GetPinValue+0xbe>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_u8GetPinValue+0xba>
    168c:	ca 01       	movw	r24, r20
    168e:	58 2f       	mov	r21, r24
    1690:	51 70       	andi	r21, 0x01	; 1
    1692:	5b 83       	std	Y+3, r21	; 0x03
    1694:	17 c0       	rjmp	.+46     	; 0x16c4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTD: return GET_BIT(PIND,Copy_u8Pin); 
    1696:	e0 e3       	ldi	r30, 0x30	; 48
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a9 01       	movw	r20, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_u8GetPinValue+0xe4>
    16aa:	55 95       	asr	r21
    16ac:	47 95       	ror	r20
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_u8GetPinValue+0xe0>
    16b2:	ca 01       	movw	r24, r20
    16b4:	58 2f       	mov	r21, r24
    16b6:	51 70       	andi	r21, 0x01	; 1
    16b8:	5b 83       	std	Y+3, r21	; 0x03
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <DIO_u8GetPinValue+0xfa>
			default       :	return 0xff;              /*as a wrong entry*/						
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <DIO_u8GetPinValue+0xfa>
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_u8GetPinValue+0xfe>
		}
	}
	else{
		/*do nothing*/
	}	
}
    16c4:	9b 81       	ldd	r25, Y+3	; 0x03
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ca:	26 96       	adiw	r28, 0x06	; 6
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port, u8 Copy_u8DirValue){
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <DIO_voidSetPortDirection+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <DIO_voidSetPortDirection+0x8>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3c 83       	std	Y+4, r19	; 0x04
    16f4:	2b 83       	std	Y+3, r18	; 0x03
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	d1 f0       	breq	.+52     	; 0x1734 <DIO_voidSetPortDirection+0x58>
    1700:	2b 81       	ldd	r18, Y+3	; 0x03
    1702:	3c 81       	ldd	r19, Y+4	; 0x04
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	2c f4       	brge	.+10     	; 0x1714 <DIO_voidSetPortDirection+0x38>
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	61 f0       	breq	.+24     	; 0x172a <DIO_voidSetPortDirection+0x4e>
    1712:	1e c0       	rjmp	.+60     	; 0x1750 <DIO_voidSetPortDirection+0x74>
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	3c 81       	ldd	r19, Y+4	; 0x04
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	81 f0       	breq	.+32     	; 0x173e <DIO_voidSetPortDirection+0x62>
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	81 f0       	breq	.+32     	; 0x1748 <DIO_voidSetPortDirection+0x6c>
    1728:	13 c0       	rjmp	.+38     	; 0x1750 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTA: DDRA = Copy_u8DirValue; break;
    172a:	ea e3       	ldi	r30, 0x3A	; 58
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	80 83       	st	Z, r24
    1732:	0e c0       	rjmp	.+28     	; 0x1750 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB: DDRB = Copy_u8DirValue; break;
    1734:	e7 e3       	ldi	r30, 0x37	; 55
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 83       	st	Z, r24
    173c:	09 c0       	rjmp	.+18     	; 0x1750 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC: DDRC = Copy_u8DirValue; break;
    173e:	e4 e3       	ldi	r30, 0x34	; 52
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 83       	st	Z, r24
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD: DDRD = Copy_u8DirValue; break;
    1748:	e1 e3       	ldi	r30, 0x31	; 49
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <DIO_voidSetPortValue+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <DIO_voidSetPortValue+0x8>
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3c 83       	std	Y+4, r19	; 0x04
    1776:	2b 83       	std	Y+3, r18	; 0x03
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	d1 f0       	breq	.+52     	; 0x17b6 <DIO_voidSetPortValue+0x58>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	2c f4       	brge	.+10     	; 0x1796 <DIO_voidSetPortValue+0x38>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	61 f0       	breq	.+24     	; 0x17ac <DIO_voidSetPortValue+0x4e>
    1794:	1e c0       	rjmp	.+60     	; 0x17d2 <DIO_voidSetPortValue+0x74>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	81 f0       	breq	.+32     	; 0x17c0 <DIO_voidSetPortValue+0x62>
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	83 30       	cpi	r24, 0x03	; 3
    17a6:	91 05       	cpc	r25, r1
    17a8:	81 f0       	breq	.+32     	; 0x17ca <DIO_voidSetPortValue+0x6c>
    17aa:	13 c0       	rjmp	.+38     	; 0x17d2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTA: PORTA = Copy_u8Value; break;
    17ac:	eb e3       	ldi	r30, 0x3B	; 59
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	80 83       	st	Z, r24
    17b4:	0e c0       	rjmp	.+28     	; 0x17d2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB: PORTB = Copy_u8Value; break;
    17b6:	e8 e3       	ldi	r30, 0x38	; 56
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	80 83       	st	Z, r24
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC: PORTC = Copy_u8Value; break;
    17c0:	e5 e3       	ldi	r30, 0x35	; 53
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	80 83       	st	Z, r24
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD: PORTD = Copy_u8Value; break;
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	80 83       	st	Z, r24
		default:	return;/*do nothing*/
	}	
		
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <SSD_voidInitSingleDigit>:
#include "../../MCAL/DIO/DIO.h"
#include "../../HAL/SSD/SSD.h"

u8 SSD_mappingArray[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void SSD_voidInitSingleDigit(u8 Copy_u8Port){
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection (Copy_u8Port, DIO_PORT_OUTPUT);
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	6f ef       	ldi	r22, 0xFF	; 255
    17f0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_voidSetPortDirection>
}
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <SSD_voidInitDoubleDigit>:

void SSD_voidInitDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU){
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <SSD_voidInitDoubleDigit+0x6>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortDirection (Copy_u8PortL, DIO_PORT_OUTPUT);
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	6f ef       	ldi	r22, 0xFF	; 255
    180e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection (Copy_u8PortU, DIO_PORT_OUTPUT);
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	6f ef       	ldi	r22, 0xFF	; 255
    1816:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_voidSetPortDirection>
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <SSD_voidWriteSingleDigit>:

void SSD_voidWriteSingleDigit(u8 Copy_u8Port, u8 Copy_u8Value){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <SSD_voidWriteSingleDigit+0x6>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue (Copy_u8Port, SSD_mappingArray[Copy_u8Value]);
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	e8 59       	subi	r30, 0x98	; 152
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	90 81       	ld	r25, Z
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	69 2f       	mov	r22, r25
    1844:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
//	DIO_voidSetPortValue (Copy_u8Port, 0xff);
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <SSD_voidWriteDoubleDigit>:

void SSD_voidWriteDoubleDigit(u8 Copy_u8PortL, u8 Copy_u8PortU, u8 Copy_u8Value){
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <SSD_voidWriteDoubleDigit+0x6>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	6a 83       	std	Y+2, r22	; 0x02
    1862:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPortValue (Copy_u8PortL, SSD_mappingArray[Copy_u8Value%10]);
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9a e0       	ldi	r25, 0x0A	; 10
    1868:	69 2f       	mov	r22, r25
    186a:	0e 94 56 19 	call	0x32ac	; 0x32ac <__udivmodqi4>
    186e:	89 2f       	mov	r24, r25
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	fc 01       	movw	r30, r24
    1876:	e8 59       	subi	r30, 0x98	; 152
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	90 81       	ld	r25, Z
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	69 2f       	mov	r22, r25
    1880:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
	DIO_voidSetPortValue (Copy_u8PortU, SSD_mappingArray[Copy_u8Value/10]);
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9a e0       	ldi	r25, 0x0A	; 10
    1888:	69 2f       	mov	r22, r25
    188a:	0e 94 56 19 	call	0x32ac	; 0x32ac <__udivmodqi4>
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	fc 01       	movw	r30, r24
    1894:	e8 59       	subi	r30, 0x98	; 152
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	90 81       	ld	r25, Z
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	69 2f       	mov	r22, r25
    189e:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <LCD_voidInit>:
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"
#include <util/delay.h>

void LCD_voidInit (void){
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	cc 54       	subi	r28, 0x4C	; 76
    18bc:	d0 40       	sbci	r29, 0x00	; 0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection (LCD_DATA_PORT, DIO_PORT_OUTPUT);
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	6f ef       	ldi	r22, 0xFF	; 255
    18cc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_PIN_OUTPUT);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_PIN_OUTPUT);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_PIN_OUTPUT);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_voidSetPinDirection>
    18ee:	fe 01       	movw	r30, r28
    18f0:	e7 5b       	subi	r30, 0xB7	; 183
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	ac e0       	ldi	r26, 0x0C	; 12
    18fa:	b2 e4       	ldi	r27, 0x42	; 66
    18fc:	80 83       	st	Z, r24
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	a2 83       	std	Z+2, r26	; 0x02
    1902:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	8e 01       	movw	r16, r28
    1906:	0b 5b       	subi	r16, 0xBB	; 187
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	fe 01       	movw	r30, r28
    190c:	e7 5b       	subi	r30, 0xB7	; 183
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a ef       	ldi	r20, 0xFA	; 250
    191e:	54 e4       	ldi	r21, 0x44	; 68
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	f8 01       	movw	r30, r16
    192a:	80 83       	st	Z, r24
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	a2 83       	std	Z+2, r26	; 0x02
    1930:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1932:	fe 01       	movw	r30, r28
    1934:	eb 5b       	subi	r30, 0xBB	; 187
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	44 f4       	brge	.+16     	; 0x1960 <LCD_voidInit+0xb2>
		__ticks = 1;
    1950:	fe 01       	movw	r30, r28
    1952:	ed 5b       	subi	r30, 0xBD	; 189
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
    195e:	64 c0       	rjmp	.+200    	; 0x1a28 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1960:	fe 01       	movw	r30, r28
    1962:	eb 5b       	subi	r30, 0xBB	; 187
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    197a:	18 16       	cp	r1, r24
    197c:	0c f0       	brlt	.+2      	; 0x1980 <LCD_voidInit+0xd2>
    197e:	43 c0       	rjmp	.+134    	; 0x1a06 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	fe 01       	movw	r30, r28
    1982:	e7 5b       	subi	r30, 0xB7	; 183
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	93 81       	ldd	r25, Z+3	; 0x03
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e2       	ldi	r20, 0x20	; 32
    1994:	51 e4       	ldi	r21, 0x41	; 65
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8e 01       	movw	r16, r28
    19a0:	0d 5b       	subi	r16, 0xBD	; 189
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	f8 01       	movw	r30, r16
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	1f c0       	rjmp	.+62     	; 0x19f6 <LCD_voidInit+0x148>
    19b8:	fe 01       	movw	r30, r28
    19ba:	ef 5b       	subi	r30, 0xBF	; 191
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	88 ec       	ldi	r24, 0xC8	; 200
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c6:	fe 01       	movw	r30, r28
    19c8:	ef 5b       	subi	r30, 0xBF	; 191
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_voidInit+0x122>
    19d4:	fe 01       	movw	r30, r28
    19d6:	ef 5b       	subi	r30, 0xBF	; 191
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	de 01       	movw	r26, r28
    19e0:	ad 5b       	subi	r26, 0xBD	; 189
    19e2:	bf 4f       	sbci	r27, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	ed 5b       	subi	r30, 0xBD	; 189
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	11 96       	adiw	r26, 0x01	; 1
    19f2:	9c 93       	st	X, r25
    19f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f6:	fe 01       	movw	r30, r28
    19f8:	ed 5b       	subi	r30, 0xBD	; 189
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	d1 f6       	brne	.-76     	; 0x19b8 <LCD_voidInit+0x10a>
    1a04:	24 c0       	rjmp	.+72     	; 0x1a4e <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	8e 01       	movw	r16, r28
    1a08:	0d 5b       	subi	r16, 0xBD	; 189
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	eb 5b       	subi	r30, 0xBB	; 187
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	f8 01       	movw	r30, r16
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	80 83       	st	Z, r24
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ed 5b       	subi	r30, 0xBD	; 189
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	fe 01       	movw	r30, r28
    1a34:	ff 96       	adiw	r30, 0x3f	; 63
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ff 96       	adiw	r30, 0x3f	; 63
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_voidInit+0x194>
    1a46:	fe 01       	movw	r30, r28
    1a48:	ff 96       	adiw	r30, 0x3f	; 63
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24

	_delay_ms(35);

	LCD_voidSendCommand (LCD_CONTROL_FUNCTION_SET);
    1a4e:	88 e3       	ldi	r24, 0x38	; 56
    1a50:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendCommand>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a8 e4       	ldi	r26, 0x48	; 72
    1a5a:	b2 e4       	ldi	r27, 0x42	; 66
    1a5c:	8b af       	std	Y+59, r24	; 0x3b
    1a5e:	9c af       	std	Y+60, r25	; 0x3c
    1a60:	ad af       	std	Y+61, r26	; 0x3d
    1a62:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a64:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a66:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a6c:	2b ea       	ldi	r18, 0xAB	; 171
    1a6e:	3a ea       	ldi	r19, 0xAA	; 170
    1a70:	4a e2       	ldi	r20, 0x2A	; 42
    1a72:	50 e4       	ldi	r21, 0x40	; 64
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8f ab       	std	Y+55, r24	; 0x37
    1a7e:	98 af       	std	Y+56, r25	; 0x38
    1a80:	a9 af       	std	Y+57, r26	; 0x39
    1a82:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a84:	6f a9       	ldd	r22, Y+55	; 0x37
    1a86:	78 ad       	ldd	r23, Y+56	; 0x38
    1a88:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5f e3       	ldi	r21, 0x3F	; 63
    1a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	1c f4       	brge	.+6      	; 0x1aa2 <LCD_voidInit+0x1f4>
		__ticks = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	8e ab       	std	Y+54, r24	; 0x36
    1aa0:	91 c0       	rjmp	.+290    	; 0x1bc4 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    1aa2:	6f a9       	ldd	r22, Y+55	; 0x37
    1aa4:	78 ad       	ldd	r23, Y+56	; 0x38
    1aa6:	89 ad       	ldd	r24, Y+57	; 0x39
    1aa8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	53 e4       	ldi	r21, 0x43	; 67
    1ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	0c f0       	brlt	.+2      	; 0x1abc <LCD_voidInit+0x20e>
    1aba:	7b c0       	rjmp	.+246    	; 0x1bb2 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1abc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1abe:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ac0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4a e7       	ldi	r20, 0x7A	; 122
    1aca:	54 e4       	ldi	r21, 0x44	; 68
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	8a ab       	std	Y+50, r24	; 0x32
    1ad6:	9b ab       	std	Y+51, r25	; 0x33
    1ad8:	ac ab       	std	Y+52, r26	; 0x34
    1ada:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6a a9       	ldd	r22, Y+50	; 0x32
    1ade:	7b a9       	ldd	r23, Y+51	; 0x33
    1ae0:	8c a9       	ldd	r24, Y+52	; 0x34
    1ae2:	9d a9       	ldd	r25, Y+53	; 0x35
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8e a7       	std	Y+46, r24	; 0x2e
    1af6:	9f a7       	std	Y+47, r25	; 0x2f
    1af8:	a8 ab       	std	Y+48, r26	; 0x30
    1afa:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1afc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1afe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b00:	88 a9       	ldd	r24, Y+48	; 0x30
    1b02:	99 a9       	ldd	r25, Y+49	; 0x31
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <LCD_voidInit+0x270>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9d a7       	std	Y+45, r25	; 0x2d
    1b1a:	8c a7       	std	Y+44, r24	; 0x2c
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    1b1e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b20:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b22:	88 a9       	ldd	r24, Y+48	; 0x30
    1b24:	99 a9       	ldd	r25, Y+49	; 0x31
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6a a9       	ldd	r22, Y+50	; 0x32
    1b38:	7b a9       	ldd	r23, Y+51	; 0x33
    1b3a:	8c a9       	ldd	r24, Y+52	; 0x34
    1b3c:	9d a9       	ldd	r25, Y+53	; 0x35
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9d a7       	std	Y+45, r25	; 0x2d
    1b5c:	8c a7       	std	Y+44, r24	; 0x2c
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_voidInit+0x2d0>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9b a7       	std	Y+43, r25	; 0x2b
    1b66:	8a a7       	std	Y+42, r24	; 0x2a
    1b68:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b6a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_voidInit+0x2be>
    1b70:	9b a7       	std	Y+43, r25	; 0x2b
    1b72:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b76:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9d a7       	std	Y+45, r25	; 0x2d
    1b7c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b80:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_voidInit+0x2b2>
    1b86:	24 c0       	rjmp	.+72     	; 0x1bd0 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b8a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b8c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b8e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9d a7       	std	Y+45, r25	; 0x2d
    1b9a:	8c a7       	std	Y+44, r24	; 0x2c
    1b9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b9e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ba0:	99 a7       	std	Y+41, r25	; 0x29
    1ba2:	88 a7       	std	Y+40, r24	; 0x28
    1ba4:	88 a5       	ldd	r24, Y+40	; 0x28
    1ba6:	99 a5       	ldd	r25, Y+41	; 0x29
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_voidInit+0x2fa>
    1bac:	99 a7       	std	Y+41, r25	; 0x29
    1bae:	88 a7       	std	Y+40, r24	; 0x28
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bb2:	6f a9       	ldd	r22, Y+55	; 0x37
    1bb4:	78 ad       	ldd	r23, Y+56	; 0x38
    1bb6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8e ab       	std	Y+54, r24	; 0x36
    1bc4:	8e a9       	ldd	r24, Y+54	; 0x36
    1bc6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bc8:	8f a1       	ldd	r24, Y+39	; 0x27
    1bca:	8a 95       	dec	r24
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_voidInit+0x31c>
    1bce:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_DISPLAY_ONOFF);
    1bd0:	8f e0       	ldi	r24, 0x0F	; 15
    1bd2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendCommand>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a8 e4       	ldi	r26, 0x48	; 72
    1bdc:	b2 e4       	ldi	r27, 0x42	; 66
    1bde:	8b a3       	std	Y+35, r24	; 0x23
    1be0:	9c a3       	std	Y+36, r25	; 0x24
    1be2:	ad a3       	std	Y+37, r26	; 0x25
    1be4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	2b ea       	ldi	r18, 0xAB	; 171
    1bf0:	3a ea       	ldi	r19, 0xAA	; 170
    1bf2:	4a e2       	ldi	r20, 0x2A	; 42
    1bf4:	50 e4       	ldi	r21, 0x40	; 64
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1c00:	98 a3       	std	Y+32, r25	; 0x20
    1c02:	a9 a3       	std	Y+33, r26	; 0x21
    1c04:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c06:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c08:	78 a1       	ldd	r23, Y+32	; 0x20
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	1c f4       	brge	.+6      	; 0x1c24 <LCD_voidInit+0x376>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	8e 8f       	std	Y+30, r24	; 0x1e
    1c22:	91 c0       	rjmp	.+290    	; 0x1d46 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    1c24:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c26:	78 a1       	ldd	r23, Y+32	; 0x20
    1c28:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	53 e4       	ldi	r21, 0x43	; 67
    1c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	0c f0       	brlt	.+2      	; 0x1c3e <LCD_voidInit+0x390>
    1c3c:	7b c0       	rjmp	.+246    	; 0x1d34 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c40:	7c a1       	ldd	r23, Y+36	; 0x24
    1c42:	8d a1       	ldd	r24, Y+37	; 0x25
    1c44:	9e a1       	ldd	r25, Y+38	; 0x26
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a e7       	ldi	r20, 0x7A	; 122
    1c4c:	54 e4       	ldi	r21, 0x44	; 68
    1c4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	8a 8f       	std	Y+26, r24	; 0x1a
    1c58:	9b 8f       	std	Y+27, r25	; 0x1b
    1c5a:	ac 8f       	std	Y+28, r26	; 0x1c
    1c5c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c60:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a ef       	ldi	r20, 0xFA	; 250
    1c6c:	54 e4       	ldi	r21, 0x44	; 68
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8e 8b       	std	Y+22, r24	; 0x16
    1c78:	9f 8b       	std	Y+23, r25	; 0x17
    1c7a:	a8 8f       	std	Y+24, r26	; 0x18
    1c7c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c7e:	6e 89       	ldd	r22, Y+22	; 0x16
    1c80:	7f 89       	ldd	r23, Y+23	; 0x17
    1c82:	88 8d       	ldd	r24, Y+24	; 0x18
    1c84:	99 8d       	ldd	r25, Y+25	; 0x19
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <LCD_voidInit+0x3f2>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9d 8b       	std	Y+21, r25	; 0x15
    1c9c:	8c 8b       	std	Y+20, r24	; 0x14
    1c9e:	3f c0       	rjmp	.+126    	; 0x1d1e <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    1ca0:	6e 89       	ldd	r22, Y+22	; 0x16
    1ca2:	7f 89       	ldd	r23, Y+23	; 0x17
    1ca4:	88 8d       	ldd	r24, Y+24	; 0x18
    1ca6:	99 8d       	ldd	r25, Y+25	; 0x19
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	4c f5       	brge	.+82     	; 0x1d0a <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cba:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9d 8b       	std	Y+21, r25	; 0x15
    1cde:	8c 8b       	std	Y+20, r24	; 0x14
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <LCD_voidInit+0x452>
    1ce2:	88 ec       	ldi	r24, 0xC8	; 200
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9b 8b       	std	Y+19, r25	; 0x13
    1ce8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cea:	8a 89       	ldd	r24, Y+18	; 0x12
    1cec:	9b 89       	ldd	r25, Y+19	; 0x13
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_voidInit+0x440>
    1cf2:	9b 8b       	std	Y+19, r25	; 0x13
    1cf4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf6:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf8:	9d 89       	ldd	r25, Y+21	; 0x15
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	9d 8b       	std	Y+21, r25	; 0x15
    1cfe:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d00:	8c 89       	ldd	r24, Y+20	; 0x14
    1d02:	9d 89       	ldd	r25, Y+21	; 0x15
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f7       	brne	.-38     	; 0x1ce2 <LCD_voidInit+0x434>
    1d08:	24 c0       	rjmp	.+72     	; 0x1d52 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0a:	6e 89       	ldd	r22, Y+22	; 0x16
    1d0c:	7f 89       	ldd	r23, Y+23	; 0x17
    1d0e:	88 8d       	ldd	r24, Y+24	; 0x18
    1d10:	99 8d       	ldd	r25, Y+25	; 0x19
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9d 8b       	std	Y+21, r25	; 0x15
    1d1c:	8c 8b       	std	Y+20, r24	; 0x14
    1d1e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d20:	9d 89       	ldd	r25, Y+21	; 0x15
    1d22:	99 8b       	std	Y+17, r25	; 0x11
    1d24:	88 8b       	std	Y+16, r24	; 0x10
    1d26:	88 89       	ldd	r24, Y+16	; 0x10
    1d28:	99 89       	ldd	r25, Y+17	; 0x11
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_voidInit+0x47c>
    1d2e:	99 8b       	std	Y+17, r25	; 0x11
    1d30:	88 8b       	std	Y+16, r24	; 0x10
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d34:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d36:	78 a1       	ldd	r23, Y+32	; 0x20
    1d38:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8e 8f       	std	Y+30, r24	; 0x1e
    1d46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d48:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4c:	8a 95       	dec	r24
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_voidInit+0x49e>
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);

	LCD_voidSendCommand (LCD_CONTROL_CLEAR);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendCommand>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b0 e4       	ldi	r27, 0x40	; 64
    1d60:	8b 87       	std	Y+11, r24	; 0x0b
    1d62:	9c 87       	std	Y+12, r25	; 0x0c
    1d64:	ad 87       	std	Y+13, r26	; 0x0d
    1d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	4a ef       	ldi	r20, 0xFA	; 250
    1d76:	54 e4       	ldi	r21, 0x44	; 68
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8f 83       	std	Y+7, r24	; 0x07
    1d82:	98 87       	std	Y+8, r25	; 0x08
    1d84:	a9 87       	std	Y+9, r26	; 0x09
    1d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d88:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8a:	78 85       	ldd	r23, Y+8	; 0x08
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <LCD_voidInit+0x4fc>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	3f c0       	rjmp	.+126    	; 0x1e28 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	3f ef       	ldi	r19, 0xFF	; 255
    1db6:	4f e7       	ldi	r20, 0x7F	; 127
    1db8:	57 e4       	ldi	r21, 0x47	; 71
    1dba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dbe:	18 16       	cp	r1, r24
    1dc0:	4c f5       	brge	.+82     	; 0x1e14 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <LCD_voidInit+0x55c>
    1dec:	88 ec       	ldi	r24, 0xC8	; 200
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_voidInit+0x54a>
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	69 f7       	brne	.-38     	; 0x1dec <LCD_voidInit+0x53e>
    1e12:	14 c0       	rjmp	.+40     	; 0x1e3c <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_voidInit+0x586>
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e3c:	c4 5b       	subi	r28, 0xB4	; 180
    1e3e:	df 4f       	sbci	r29, 0xFF	; 255
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	08 95       	ret

00001e54 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Copy_u8Command){
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	69 97       	sbiw	r28, 0x19	; 25
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_LOW);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Command);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	69 8d       	ldd	r22, Y+25	; 0x19
    1e82:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	62 e0       	ldi	r22, 0x02	; 2
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e8       	ldi	r26, 0x80	; 128
    1e96:	bf e3       	ldi	r27, 0x3F	; 63
    1e98:	8d 8b       	std	Y+21, r24	; 0x15
    1e9a:	9e 8b       	std	Y+22, r25	; 0x16
    1e9c:	af 8b       	std	Y+23, r26	; 0x17
    1e9e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	2b ea       	ldi	r18, 0xAB	; 171
    1eaa:	3a ea       	ldi	r19, 0xAA	; 170
    1eac:	4a e2       	ldi	r20, 0x2A	; 42
    1eae:	50 e4       	ldi	r21, 0x40	; 64
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	89 8b       	std	Y+17, r24	; 0x11
    1eba:	9a 8b       	std	Y+18, r25	; 0x12
    1ebc:	ab 8b       	std	Y+19, r26	; 0x13
    1ebe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ec0:	69 89       	ldd	r22, Y+17	; 0x11
    1ec2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	1c f4       	brge	.+6      	; 0x1ede <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	88 8b       	std	Y+16, r24	; 0x10
    1edc:	91 c0       	rjmp	.+290    	; 0x2000 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1ede:	69 89       	ldd	r22, Y+17	; 0x11
    1ee0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ee2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	53 e4       	ldi	r21, 0x43	; 67
    1eee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	0c f0       	brlt	.+2      	; 0x1ef8 <LCD_voidSendCommand+0xa4>
    1ef6:	7b c0       	rjmp	.+246    	; 0x1fee <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    1efa:	7e 89       	ldd	r23, Y+22	; 0x16
    1efc:	8f 89       	ldd	r24, Y+23	; 0x17
    1efe:	98 8d       	ldd	r25, Y+24	; 0x18
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a e7       	ldi	r20, 0x7A	; 122
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8c 87       	std	Y+12, r24	; 0x0c
    1f12:	9d 87       	std	Y+13, r25	; 0x0d
    1f14:	ae 87       	std	Y+14, r26	; 0x0e
    1f16:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a ef       	ldi	r20, 0xFA	; 250
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	88 87       	std	Y+8, r24	; 0x08
    1f32:	99 87       	std	Y+9, r25	; 0x09
    1f34:	aa 87       	std	Y+10, r26	; 0x0a
    1f36:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f38:	68 85       	ldd	r22, Y+8	; 0x08
    1f3a:	79 85       	ldd	r23, Y+9	; 0x09
    1f3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <LCD_voidSendCommand+0x106>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9f 83       	std	Y+7, r25	; 0x07
    1f56:	8e 83       	std	Y+6, r24	; 0x06
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1f5a:	68 85       	ldd	r22, Y+8	; 0x08
    1f5c:	79 85       	ldd	r23, Y+9	; 0x09
    1f5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9f 83       	std	Y+7, r25	; 0x07
    1f98:	8e 83       	std	Y+6, r24	; 0x06
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <LCD_voidSendCommand+0x166>
    1f9c:	88 ec       	ldi	r24, 0xC8	; 200
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9d 83       	std	Y+5, r25	; 0x05
    1fa2:	8c 83       	std	Y+4, r24	; 0x04
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_voidSendCommand+0x154>
    1fac:	9d 83       	std	Y+5, r25	; 0x05
    1fae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9f 83       	std	Y+7, r25	; 0x07
    1fb8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <LCD_voidSendCommand+0x148>
    1fc2:	24 c0       	rjmp	.+72     	; 0x200c <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	68 85       	ldd	r22, Y+8	; 0x08
    1fc6:	79 85       	ldd	r23, Y+9	; 0x09
    1fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9f 83       	std	Y+7, r25	; 0x07
    1fd6:	8e 83       	std	Y+6, r24	; 0x06
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	9f 81       	ldd	r25, Y+7	; 0x07
    1fdc:	9b 83       	std	Y+3, r25	; 0x03
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_voidSendCommand+0x190>
    1fe8:	9b 83       	std	Y+3, r25	; 0x03
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	0f c0       	rjmp	.+30     	; 0x200c <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fee:	69 89       	ldd	r22, Y+17	; 0x11
    1ff0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	88 8b       	std	Y+16, r24	; 0x10
    2000:	88 89       	ldd	r24, Y+16	; 0x10
    2002:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	8a 95       	dec	r24
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_voidSendCommand+0x1b2>
    200a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	62 e0       	ldi	r22, 0x02	; 2
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>

}
    2016:	69 96       	adiw	r28, 0x19	; 25
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_u8Char){
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	69 97       	sbiw	r28, 0x19	; 25
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RS, DIO_HIGH);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_RW, DIO_LOW);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, Copy_u8Char);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	69 8d       	ldd	r22, Y+25	; 0x19
    2056:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_HIGH);
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	62 e0       	ldi	r22, 0x02	; 2
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	a0 e8       	ldi	r26, 0x80	; 128
    206a:	bf e3       	ldi	r27, 0x3F	; 63
    206c:	8d 8b       	std	Y+21, r24	; 0x15
    206e:	9e 8b       	std	Y+22, r25	; 0x16
    2070:	af 8b       	std	Y+23, r26	; 0x17
    2072:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	2b ea       	ldi	r18, 0xAB	; 171
    207e:	3a ea       	ldi	r19, 0xAA	; 170
    2080:	4a e2       	ldi	r20, 0x2A	; 42
    2082:	50 e4       	ldi	r21, 0x40	; 64
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	89 8b       	std	Y+17, r24	; 0x11
    208e:	9a 8b       	std	Y+18, r25	; 0x12
    2090:	ab 8b       	std	Y+19, r26	; 0x13
    2092:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2094:	69 89       	ldd	r22, Y+17	; 0x11
    2096:	7a 89       	ldd	r23, Y+18	; 0x12
    2098:	8b 89       	ldd	r24, Y+19	; 0x13
    209a:	9c 89       	ldd	r25, Y+20	; 0x14
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e8       	ldi	r20, 0x80	; 128
    20a2:	5f e3       	ldi	r21, 0x3F	; 63
    20a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	1c f4       	brge	.+6      	; 0x20b2 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	88 8b       	std	Y+16, r24	; 0x10
    20b0:	91 c0       	rjmp	.+290    	; 0x21d4 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    20b2:	69 89       	ldd	r22, Y+17	; 0x11
    20b4:	7a 89       	ldd	r23, Y+18	; 0x12
    20b6:	8b 89       	ldd	r24, Y+19	; 0x13
    20b8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	53 e4       	ldi	r21, 0x43	; 67
    20c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	0c f0       	brlt	.+2      	; 0x20cc <LCD_voidSendChar+0xa4>
    20ca:	7b c0       	rjmp	.+246    	; 0x21c2 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    20cc:	6d 89       	ldd	r22, Y+21	; 0x15
    20ce:	7e 89       	ldd	r23, Y+22	; 0x16
    20d0:	8f 89       	ldd	r24, Y+23	; 0x17
    20d2:	98 8d       	ldd	r25, Y+24	; 0x18
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	54 e4       	ldi	r21, 0x44	; 68
    20dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8c 87       	std	Y+12, r24	; 0x0c
    20e6:	9d 87       	std	Y+13, r25	; 0x0d
    20e8:	ae 87       	std	Y+14, r26	; 0x0e
    20ea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    20f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a ef       	ldi	r20, 0xFA	; 250
    20fa:	54 e4       	ldi	r21, 0x44	; 68
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	88 87       	std	Y+8, r24	; 0x08
    2106:	99 87       	std	Y+9, r25	; 0x09
    2108:	aa 87       	std	Y+10, r26	; 0x0a
    210a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    210c:	68 85       	ldd	r22, Y+8	; 0x08
    210e:	79 85       	ldd	r23, Y+9	; 0x09
    2110:	8a 85       	ldd	r24, Y+10	; 0x0a
    2112:	9b 85       	ldd	r25, Y+11	; 0x0b
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <LCD_voidSendChar+0x106>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9f 83       	std	Y+7, r25	; 0x07
    212a:	8e 83       	std	Y+6, r24	; 0x06
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    212e:	68 85       	ldd	r22, Y+8	; 0x08
    2130:	79 85       	ldd	r23, Y+9	; 0x09
    2132:	8a 85       	ldd	r24, Y+10	; 0x0a
    2134:	9b 85       	ldd	r25, Y+11	; 0x0b
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6c 85       	ldd	r22, Y+12	; 0x0c
    2148:	7d 85       	ldd	r23, Y+13	; 0x0d
    214a:	8e 85       	ldd	r24, Y+14	; 0x0e
    214c:	9f 85       	ldd	r25, Y+15	; 0x0f
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9f 83       	std	Y+7, r25	; 0x07
    216c:	8e 83       	std	Y+6, r24	; 0x06
    216e:	0f c0       	rjmp	.+30     	; 0x218e <LCD_voidSendChar+0x166>
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9d 83       	std	Y+5, r25	; 0x05
    2176:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	9d 81       	ldd	r25, Y+5	; 0x05
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_voidSendChar+0x154>
    2180:	9d 83       	std	Y+5, r25	; 0x05
    2182:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8e 81       	ldd	r24, Y+6	; 0x06
    2186:	9f 81       	ldd	r25, Y+7	; 0x07
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9f 83       	std	Y+7, r25	; 0x07
    218c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8e 81       	ldd	r24, Y+6	; 0x06
    2190:	9f 81       	ldd	r25, Y+7	; 0x07
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <LCD_voidSendChar+0x148>
    2196:	24 c0       	rjmp	.+72     	; 0x21e0 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	68 85       	ldd	r22, Y+8	; 0x08
    219a:	79 85       	ldd	r23, Y+9	; 0x09
    219c:	8a 85       	ldd	r24, Y+10	; 0x0a
    219e:	9b 85       	ldd	r25, Y+11	; 0x0b
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9f 83       	std	Y+7, r25	; 0x07
    21aa:	8e 83       	std	Y+6, r24	; 0x06
    21ac:	8e 81       	ldd	r24, Y+6	; 0x06
    21ae:	9f 81       	ldd	r25, Y+7	; 0x07
    21b0:	9b 83       	std	Y+3, r25	; 0x03
    21b2:	8a 83       	std	Y+2, r24	; 0x02
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_voidSendChar+0x190>
    21bc:	9b 83       	std	Y+3, r25	; 0x03
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21c2:	69 89       	ldd	r22, Y+17	; 0x11
    21c4:	7a 89       	ldd	r23, Y+18	; 0x12
    21c6:	8b 89       	ldd	r24, Y+19	; 0x13
    21c8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	88 8b       	std	Y+16, r24	; 0x10
    21d4:	88 89       	ldd	r24, Y+16	; 0x10
    21d6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	8a 95       	dec	r24
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_voidSendChar+0x1b2>
    21de:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	62 e0       	ldi	r22, 0x02	; 2
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>
}
    21ea:	69 96       	adiw	r28, 0x19	; 25
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_u8String){
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <LCD_voidSendString+0x6>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	0a c0       	rjmp	.+20     	; 0x2220 <LCD_voidSendString+0x24>
	while(*Copy_u8String != '\0'){
		LCD_voidSendChar (*Copy_u8String);
    220c:	e9 81       	ldd	r30, Y+1	; 0x01
    220e:	fa 81       	ldd	r31, Y+2	; 0x02
    2210:	80 81       	ld	r24, Z
    2212:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidSendChar>
		Copy_u8String ++;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue (LCD_CONTROL_PORT, LCD_CONTROL_E, DIO_LOW);
}

void LCD_voidSendString (u8 *Copy_u8String){
	while(*Copy_u8String != '\0'){
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	80 81       	ld	r24, Z
    2226:	88 23       	and	r24, r24
    2228:	89 f7       	brne	.-30     	; 0x220c <LCD_voidSendString+0x10>
		LCD_voidSendChar (*Copy_u8String);
		Copy_u8String ++;
	}
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <LCD_voidSendNumber>:

void LCD_voidSendNumber (u32 Copy_u8Num){
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	65 97       	sbiw	r28, 0x15	; 21
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	6a 8b       	std	Y+18, r22	; 0x12
    224a:	7b 8b       	std	Y+19, r23	; 0x13
    224c:	8c 8b       	std	Y+20, r24	; 0x14
    224e:	9d 8b       	std	Y+21, r25	; 0x15
	u8 str[10];
    u8 i, rem, len = 0;
    2250:	1d 82       	std	Y+5, r1	; 0x05

    u32 n = Copy_u8Num;
    2252:	8a 89       	ldd	r24, Y+18	; 0x12
    2254:	9b 89       	ldd	r25, Y+19	; 0x13
    2256:	ac 89       	ldd	r26, Y+20	; 0x14
    2258:	bd 89       	ldd	r27, Y+21	; 0x15
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	ab 83       	std	Y+3, r26	; 0x03
    2260:	bc 83       	std	Y+4, r27	; 0x04
    2262:	15 c0       	rjmp	.+42     	; 0x228e <LCD_voidSendNumber+0x5a>
    while (n != 0)
    {
        len++;
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	8f 5f       	subi	r24, 0xFF	; 255
    2268:	8d 83       	std	Y+5, r24	; 0x05
        n /= 10;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	ab 81       	ldd	r26, Y+3	; 0x03
    2270:	bc 81       	ldd	r27, Y+4	; 0x04
    2272:	2a e0       	ldi	r18, 0x0A	; 10
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__udivmodsi4>
    2282:	da 01       	movw	r26, r20
    2284:	c9 01       	movw	r24, r18
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	ab 83       	std	Y+3, r26	; 0x03
    228c:	bc 83       	std	Y+4, r27	; 0x04
void LCD_voidSendNumber (u32 Copy_u8Num){
	u8 str[10];
    u8 i, rem, len = 0;

    u32 n = Copy_u8Num;
    while (n != 0)
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	ab 81       	ldd	r26, Y+3	; 0x03
    2294:	bc 81       	ldd	r27, Y+4	; 0x04
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	a1 05       	cpc	r26, r1
    229a:	b1 05       	cpc	r27, r1
    229c:	19 f7       	brne	.-58     	; 0x2264 <LCD_voidSendNumber+0x30>
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    229e:	1f 82       	std	Y+7, r1	; 0x07
    22a0:	37 c0       	rjmp	.+110    	; 0x2310 <LCD_voidSendNumber+0xdc>
    {
        rem = Copy_u8Num % 10;
    22a2:	8a 89       	ldd	r24, Y+18	; 0x12
    22a4:	9b 89       	ldd	r25, Y+19	; 0x13
    22a6:	ac 89       	ldd	r26, Y+20	; 0x14
    22a8:	bd 89       	ldd	r27, Y+21	; 0x15
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__udivmodsi4>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	8e 83       	std	Y+6, r24	; 0x06
        Copy_u8Num = Copy_u8Num / 10;
    22c0:	8a 89       	ldd	r24, Y+18	; 0x12
    22c2:	9b 89       	ldd	r25, Y+19	; 0x13
    22c4:	ac 89       	ldd	r26, Y+20	; 0x14
    22c6:	bd 89       	ldd	r27, Y+21	; 0x15
    22c8:	2a e0       	ldi	r18, 0x0A	; 10
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__udivmodsi4>
    22d8:	da 01       	movw	r26, r20
    22da:	c9 01       	movw	r24, r18
    22dc:	8a 8b       	std	Y+18, r24	; 0x12
    22de:	9b 8b       	std	Y+19, r25	; 0x13
    22e0:	ac 8b       	std	Y+20, r26	; 0x14
    22e2:	bd 8b       	std	Y+21, r27	; 0x15
        str[len - (i + 1)] = rem + '0';
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	8f 81       	ldd	r24, Y+7	; 0x07
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	80 95       	com	r24
    22f2:	90 95       	com	r25
    22f4:	28 0f       	add	r18, r24
    22f6:	39 1f       	adc	r19, r25
    22f8:	8e 81       	ldd	r24, Y+6	; 0x06
    22fa:	48 2f       	mov	r20, r24
    22fc:	40 5d       	subi	r20, 0xD0	; 208
    22fe:	ce 01       	movw	r24, r28
    2300:	08 96       	adiw	r24, 0x08	; 8
    2302:	fc 01       	movw	r30, r24
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	40 83       	st	Z, r20
    {
        len++;
        n /= 10;
    }

    for (i = 0; i < len; i++)
    230a:	8f 81       	ldd	r24, Y+7	; 0x07
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8f 83       	std	Y+7, r24	; 0x07
    2310:	9f 81       	ldd	r25, Y+7	; 0x07
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	98 17       	cp	r25, r24
    2316:	28 f2       	brcs	.-118    	; 0x22a2 <LCD_voidSendNumber+0x6e>
    {
        rem = Copy_u8Num % 10;
        Copy_u8Num = Copy_u8Num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	ce 01       	movw	r24, r28
    2320:	08 96       	adiw	r24, 0x08	; 8
    2322:	fc 01       	movw	r30, r24
    2324:	e2 0f       	add	r30, r18
    2326:	f3 1f       	adc	r31, r19
    2328:	10 82       	st	Z, r1

    LCD_voidSendString (str);
    232a:	ce 01       	movw	r24, r28
    232c:	08 96       	adiw	r24, 0x08	; 8
    232e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_voidSendString>
}
    2332:	65 96       	adiw	r28, 0x15	; 21
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <LCD_voidSetLocation>:

void LCD_voidSetLocation (u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	00 d0       	rcall	.+0      	; 0x234a <LCD_voidSetLocation+0x6>
    234a:	00 d0       	rcall	.+0      	; 0x234c <LCD_voidSetLocation+0x8>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8LineNum){
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	3c 83       	std	Y+4, r19	; 0x04
    235c:	2b 83       	std	Y+3, r18	; 0x03
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	91 05       	cpc	r25, r1
    2366:	31 f0       	breq	.+12     	; 0x2374 <LCD_voidSetLocation+0x30>
    2368:	2b 81       	ldd	r18, Y+3	; 0x03
    236a:	3c 81       	ldd	r19, Y+4	; 0x04
    236c:	22 30       	cpi	r18, 0x02	; 2
    236e:	31 05       	cpc	r19, r1
    2370:	31 f0       	breq	.+12     	; 0x237e <LCD_voidSetLocation+0x3a>
    2372:	09 c0       	rjmp	.+18     	; 0x2386 <LCD_voidSetLocation+0x42>
		case LCD_LINE_1: LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	80 58       	subi	r24, 0x80	; 128
    2378:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendCommand>
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <LCD_voidSetLocation+0x42>

		case LCD_LINE_2: LCD_voidSendCommand(0xc0 + Copy_u8CharNum); break;
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	80 54       	subi	r24, 0x40	; 64
    2382:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendCommand>

		default: return;
	}
}
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <LCD_voidDrawSpecialChar>:

void LCD_voidDrawSpecialChar (u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <LCD_voidDrawSpecialChar+0x6>
    239a:	00 d0       	rcall	.+0      	; 0x239c <LCD_voidDrawSpecialChar+0x8>
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	8a 83       	std	Y+2, r24	; 0x02
    23a2:	7c 83       	std	Y+4, r23	; 0x04
    23a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 i;

	if(Copy_u8CharIndex < 8){
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	88 30       	cpi	r24, 0x08	; 8
    23aa:	f8 f4       	brcc	.+62     	; 0x23ea <LCD_voidDrawSpecialChar+0x56>
		LCD_voidSendCommand (0x40 + (Copy_u8CharIndex*8));
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	08 96       	adiw	r24, 0x08	; 8
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendCommand>
		for(i=0;i<8;i++) LCD_voidSendChar(*(Copy_u8SpecialChar+i));
    23c4:	19 82       	std	Y+1, r1	; 0x01
    23c6:	0e c0       	rjmp	.+28     	; 0x23e4 <LCD_voidDrawSpecialChar+0x50>
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	fc 01       	movw	r30, r24
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	80 81       	ld	r24, Z
    23da:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidSendChar>
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	88 30       	cpi	r24, 0x08	; 8
    23e8:	78 f3       	brcs	.-34     	; 0x23c8 <LCD_voidDrawSpecialChar+0x34>
	}
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar (u8 Copy_u8CharIndex){
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	0f 92       	push	r0
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendChar (Copy_u8CharIndex);
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidSendChar>
}
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <KPD_voidInit>:

u8 KPD_Au8Keys[4][4] = KPD_KEYS;
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	0f 92       	push	r0
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    241c:	19 82       	std	Y+1, r1	; 0x01
    241e:	1b c0       	rjmp	.+54     	; 0x2456 <KPD_voidInit+0x44>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	fc 01       	movw	r30, r24
    2428:	ee 57       	subi	r30, 0x7E	; 126
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	90 81       	ld	r25, Z
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	69 2f       	mov	r22, r25
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	fc 01       	movw	r30, r24
    2440:	ea 57       	subi	r30, 0x7A	; 122
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	90 81       	ld	r25, Z
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	69 2f       	mov	r22, r25
    244a:	42 e0       	ldi	r20, 0x02	; 2
    244c:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_voidSetPinDirection>
u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void){
	u8 Local_u8Count;
	for(Local_u8Count = 0; Local_u8Count < 4; Local_u8Count++){
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	10 f3       	brcs	.-60     	; 0x2420 <KPD_voidInit+0xe>
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_PIN_OUTPUT);
		DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count], DIO_PIN_INPUT_PULLUP);
	}
}
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	61 97       	sbiw	r28, 0x11	; 17
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;
    2478:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    247a:	19 8a       	std	Y+17, r1	; 0x11
    247c:	c4 c0       	rjmp	.+392    	; 0x2606 <KPD_u8GetPressedKey+0x1a2>
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    247e:	89 89       	ldd	r24, Y+17	; 0x11
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	fc 01       	movw	r30, r24
    2486:	ee 57       	subi	r30, 0x7E	; 126
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	90 81       	ld	r25, Z
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	69 2f       	mov	r22, r25
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    2496:	18 8a       	std	Y+16, r1	; 0x10
    2498:	a3 c0       	rjmp	.+326    	; 0x25e0 <KPD_u8GetPressedKey+0x17c>

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    249a:	88 89       	ldd	r24, Y+16	; 0x10
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	fc 01       	movw	r30, r24
    24a2:	ea 57       	subi	r30, 0x7A	; 122
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	90 81       	ld	r25, Z
    24a8:	82 e0       	ldi	r24, 0x02	; 2
    24aa:	69 2f       	mov	r22, r25
    24ac:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <DIO_u8GetPinValue>
    24b0:	88 23       	and	r24, r24
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <KPD_u8GetPressedKey+0x52>
    24b4:	92 c0       	rjmp	.+292    	; 0x25da <KPD_u8GetPressedKey+0x176>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	a8 ec       	ldi	r26, 0xC8	; 200
    24bc:	b1 e4       	ldi	r27, 0x41	; 65
    24be:	8b 87       	std	Y+11, r24	; 0x0b
    24c0:	9c 87       	std	Y+12, r25	; 0x0c
    24c2:	ad 87       	std	Y+13, r26	; 0x0d
    24c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    24cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	4a ef       	ldi	r20, 0xFA	; 250
    24d4:	54 e4       	ldi	r21, 0x44	; 68
    24d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	8f 83       	std	Y+7, r24	; 0x07
    24e0:	98 87       	std	Y+8, r25	; 0x08
    24e2:	a9 87       	std	Y+9, r26	; 0x09
    24e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e6:	6f 81       	ldd	r22, Y+7	; 0x07
    24e8:	78 85       	ldd	r23, Y+8	; 0x08
    24ea:	89 85       	ldd	r24, Y+9	; 0x09
    24ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e8       	ldi	r20, 0x80	; 128
    24f4:	5f e3       	ldi	r21, 0x3F	; 63
    24f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24fa:	88 23       	and	r24, r24
    24fc:	2c f4       	brge	.+10     	; 0x2508 <KPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	3f c0       	rjmp	.+126    	; 0x2586 <KPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    2508:	6f 81       	ldd	r22, Y+7	; 0x07
    250a:	78 85       	ldd	r23, Y+8	; 0x08
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	4c f5       	brge	.+82     	; 0x2572 <KPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2520:	6b 85       	ldd	r22, Y+11	; 0x0b
    2522:	7c 85       	ldd	r23, Y+12	; 0x0c
    2524:	8d 85       	ldd	r24, Y+13	; 0x0d
    2526:	9e 85       	ldd	r25, Y+14	; 0x0e
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e2       	ldi	r20, 0x20	; 32
    252e:	51 e4       	ldi	r21, 0x41	; 65
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
    2548:	0f c0       	rjmp	.+30     	; 0x2568 <KPD_u8GetPressedKey+0x104>
    254a:	88 ec       	ldi	r24, 0xC8	; 200
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9c 83       	std	Y+4, r25	; 0x04
    2550:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9c 81       	ldd	r25, Y+4	; 0x04
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <KPD_u8GetPressedKey+0xf2>
    255a:	9c 83       	std	Y+4, r25	; 0x04
    255c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	69 f7       	brne	.-38     	; 0x254a <KPD_u8GetPressedKey+0xe6>
    2570:	27 c0       	rjmp	.+78     	; 0x25c0 <KPD_u8GetPressedKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2572:	6f 81       	ldd	r22, Y+7	; 0x07
    2574:	78 85       	ldd	r23, Y+8	; 0x08
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	8d 81       	ldd	r24, Y+5	; 0x05
    2588:	9e 81       	ldd	r25, Y+6	; 0x06
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <KPD_u8GetPressedKey+0x12e>
    2596:	9a 83       	std	Y+2, r25	; 0x02
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	12 c0       	rjmp	.+36     	; 0x25c0 <KPD_u8GetPressedKey+0x15c>
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	48 2f       	mov	r20, r24
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	88 89       	ldd	r24, Y+16	; 0x10
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	ca 01       	movw	r24, r20
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	82 0f       	add	r24, r18
    25b4:	93 1f       	adc	r25, r19
    25b6:	fc 01       	movw	r30, r24
    25b8:	ee 58       	subi	r30, 0x8E	; 142
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	8f 87       	std	Y+15, r24	; 0x0f

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){

			if(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
				_delay_ms(25);
				while(DIO_u8GetPinValue (KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]) == DIO_LOW){
    25c0:	88 89       	ldd	r24, Y+16	; 0x10
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	fc 01       	movw	r30, r24
    25c8:	ea 57       	subi	r30, 0x7A	; 122
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	90 81       	ld	r25, Z
    25ce:	82 e0       	ldi	r24, 0x02	; 2
    25d0:	69 2f       	mov	r22, r25
    25d2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <DIO_u8GetPinValue>
    25d6:	88 23       	and	r24, r24
    25d8:	09 f3       	breq	.-62     	; 0x259c <KPD_u8GetPressedKey+0x138>
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for(Local_u8ColCount = 0; Local_u8ColCount < 4; Local_u8ColCount++){
    25da:	88 89       	ldd	r24, Y+16	; 0x10
    25dc:	8f 5f       	subi	r24, 0xFF	; 255
    25de:	88 8b       	std	Y+16, r24	; 0x10
    25e0:	88 89       	ldd	r24, Y+16	; 0x10
    25e2:	84 30       	cpi	r24, 0x04	; 4
    25e4:	08 f4       	brcc	.+2      	; 0x25e8 <KPD_u8GetPressedKey+0x184>
    25e6:	59 cf       	rjmp	.-334    	; 0x249a <KPD_u8GetPressedKey+0x36>
					Local_u8ReturnValue =  KPD_Au8Keys [Local_u8RowCount][Local_u8ColCount];
				}
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    25e8:	89 89       	ldd	r24, Y+17	; 0x11
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	fc 01       	movw	r30, r24
    25f0:	ee 57       	subi	r30, 0x7E	; 126
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	90 81       	ld	r25, Z
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	69 2f       	mov	r22, r25
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPinValue>
}

u8 KPD_u8GetPressedKey(void){
	u8 Local_u8RowCount, Local_u8ColCount, Local_u8ReturnValue = KPD_NO_KEY;

	for(Local_u8RowCount = 0; Local_u8RowCount < 4; Local_u8RowCount++){
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	89 8b       	std	Y+17, r24	; 0x11
    2606:	89 89       	ldd	r24, Y+17	; 0x11
    2608:	84 30       	cpi	r24, 0x04	; 4
    260a:	08 f4       	brcc	.+2      	; 0x260e <KPD_u8GetPressedKey+0x1aa>
    260c:	38 cf       	rjmp	.-400    	; 0x247e <KPD_u8GetPressedKey+0x1a>
			}

		}
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
	}
	return Local_u8ReturnValue;
    260e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2610:	61 96       	adiw	r28, 0x11	; 17
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <main>:
void diverge (void);
void ping_pong (void);
void snake (void);
void coverge_diverge (void);

int main(){
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <main+0x6>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT_PULLUP);
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	62 e0       	ldi	r22, 0x02	; 2
    2630:	42 e0       	ldi	r20, 0x02	; 2
    2632:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_voidSetPinDirection>
//	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN3, DIO_PIN_INPUT_PULLUP);
	DIO_voidSetPortDirection (LEDS_PORT, DIO_PORT_OUTPUT);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	6f ef       	ldi	r22, 0xFF	; 255
    263a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_voidSetPortDirection>

	sei(); /*set global interrupt*/ // SET_BIT(SREG, I);
    263e:	78 94       	sei

	INT_voidEnable(INT_INT0, INT_SENSE_FALLING_EDGE);
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	0e 94 4f 06 	call	0xc9e	; 0xc9e <INT_voidEnable>
//	INT_voidEnable(INT_INT1, INT_SENSE_ANY_CHANGE);

	while(1){
		switch(mode){
    2648:	80 91 8b 00 	lds	r24, 0x008B
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	3a 83       	std	Y+2, r19	; 0x02
    2652:	29 83       	std	Y+1, r18	; 0x01
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	83 30       	cpi	r24, 0x03	; 3
    265a:	91 05       	cpc	r25, r1
    265c:	91 f1       	breq	.+100    	; 0x26c2 <main+0xa0>
    265e:	29 81       	ldd	r18, Y+1	; 0x01
    2660:	3a 81       	ldd	r19, Y+2	; 0x02
    2662:	24 30       	cpi	r18, 0x04	; 4
    2664:	31 05       	cpc	r19, r1
    2666:	7c f4       	brge	.+30     	; 0x2686 <main+0x64>
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	81 30       	cpi	r24, 0x01	; 1
    266e:	91 05       	cpc	r25, r1
    2670:	11 f1       	breq	.+68     	; 0x26b6 <main+0x94>
    2672:	29 81       	ldd	r18, Y+1	; 0x01
    2674:	3a 81       	ldd	r19, Y+2	; 0x02
    2676:	22 30       	cpi	r18, 0x02	; 2
    2678:	31 05       	cpc	r19, r1
    267a:	04 f5       	brge	.+64     	; 0x26bc <main+0x9a>
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	b1 f0       	breq	.+44     	; 0x26b0 <main+0x8e>
    2684:	2d c0       	rjmp	.+90     	; 0x26e0 <main+0xbe>
    2686:	29 81       	ldd	r18, Y+1	; 0x01
    2688:	3a 81       	ldd	r19, Y+2	; 0x02
    268a:	25 30       	cpi	r18, 0x05	; 5
    268c:	31 05       	cpc	r19, r1
    268e:	f9 f0       	breq	.+62     	; 0x26ce <main+0xac>
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	85 30       	cpi	r24, 0x05	; 5
    2696:	91 05       	cpc	r25, r1
    2698:	bc f0       	brlt	.+46     	; 0x26c8 <main+0xa6>
    269a:	29 81       	ldd	r18, Y+1	; 0x01
    269c:	3a 81       	ldd	r19, Y+2	; 0x02
    269e:	26 30       	cpi	r18, 0x06	; 6
    26a0:	31 05       	cpc	r19, r1
    26a2:	c1 f0       	breq	.+48     	; 0x26d4 <main+0xb2>
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	87 30       	cpi	r24, 0x07	; 7
    26aa:	91 05       	cpc	r25, r1
    26ac:	b1 f0       	breq	.+44     	; 0x26da <main+0xb8>
    26ae:	18 c0       	rjmp	.+48     	; 0x26e0 <main+0xbe>
			case LEDS_MODE_FLASH: flashing(); break;
    26b0:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <flashing>
    26b4:	c9 cf       	rjmp	.-110    	; 0x2648 <main+0x26>
			case LEDS_MODE_SHIFT_LEFT: shift_left(); break;
    26b6:	0e 94 82 14 	call	0x2904	; 0x2904 <shift_left>
    26ba:	c6 cf       	rjmp	.-116    	; 0x2648 <main+0x26>
			case LEDS_MODE_SHIFT_RIGHT: shift_right(); break;
    26bc:	0e 94 24 15 	call	0x2a48	; 0x2a48 <shift_right>
    26c0:	c3 cf       	rjmp	.-122    	; 0x2648 <main+0x26>
			case LEDS_MODE_COVERGE: coverge(); break;
    26c2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <coverge>
    26c6:	c0 cf       	rjmp	.-128    	; 0x2648 <main+0x26>
			case LEDS_MODE_DIVERGE: diverge(); break;
    26c8:	0e 94 76 16 	call	0x2cec	; 0x2cec <diverge>
    26cc:	bd cf       	rjmp	.-134    	; 0x2648 <main+0x26>
			case LEDS_MODE_PING_PONG: ping_pong(); break;
    26ce:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <ping_pong>
    26d2:	ba cf       	rjmp	.-140    	; 0x2648 <main+0x26>
			case LEDS_MODE_SNAKE: snake(); break;
    26d4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <snake>
    26d8:	b7 cf       	rjmp	.-146    	; 0x2648 <main+0x26>
			case LEDS_MODE_COVERGE_DIVERGE: coverge_diverge(); break;
    26da:	0e 94 82 18 	call	0x3104	; 0x3104 <coverge_diverge>
    26de:	b4 cf       	rjmp	.-152    	; 0x2648 <main+0x26>
			default: flashing();  shift_right(); shift_right(); flashing(); shift_left(); shift_left();
    26e0:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <flashing>
    26e4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <shift_right>
    26e8:	0e 94 24 15 	call	0x2a48	; 0x2a48 <shift_right>
    26ec:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <flashing>
    26f0:	0e 94 82 14 	call	0x2904	; 0x2904 <shift_left>
    26f4:	0e 94 82 14 	call	0x2904	; 0x2904 <shift_left>
    26f8:	a7 cf       	rjmp	.-178    	; 0x2648 <main+0x26>

000026fa <__vector_1>:
		}
	}
}


ISR(INT0_vect){
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	2f 93       	push	r18
    2706:	3f 93       	push	r19
    2708:	8f 93       	push	r24
    270a:	9f 93       	push	r25
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <__vector_1+0x18>
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	switch(mode){
    2716:	80 91 8b 00 	lds	r24, 0x008B
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	3a 83       	std	Y+2, r19	; 0x02
    2720:	29 83       	std	Y+1, r18	; 0x01
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	91 05       	cpc	r25, r1
    272a:	a9 f1       	breq	.+106    	; 0x2796 <__vector_1+0x9c>
    272c:	29 81       	ldd	r18, Y+1	; 0x01
    272e:	3a 81       	ldd	r19, Y+2	; 0x02
    2730:	24 30       	cpi	r18, 0x04	; 4
    2732:	31 05       	cpc	r19, r1
    2734:	7c f4       	brge	.+30     	; 0x2754 <__vector_1+0x5a>
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	9a 81       	ldd	r25, Y+2	; 0x02
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	91 05       	cpc	r25, r1
    273e:	19 f1       	breq	.+70     	; 0x2786 <__vector_1+0x8c>
    2740:	29 81       	ldd	r18, Y+1	; 0x01
    2742:	3a 81       	ldd	r19, Y+2	; 0x02
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	14 f5       	brge	.+68     	; 0x278e <__vector_1+0x94>
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	b1 f0       	breq	.+44     	; 0x277e <__vector_1+0x84>
    2752:	33 c0       	rjmp	.+102    	; 0x27ba <__vector_1+0xc0>
    2754:	29 81       	ldd	r18, Y+1	; 0x01
    2756:	3a 81       	ldd	r19, Y+2	; 0x02
    2758:	25 30       	cpi	r18, 0x05	; 5
    275a:	31 05       	cpc	r19, r1
    275c:	21 f1       	breq	.+72     	; 0x27a6 <__vector_1+0xac>
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	85 30       	cpi	r24, 0x05	; 5
    2764:	91 05       	cpc	r25, r1
    2766:	dc f0       	brlt	.+54     	; 0x279e <__vector_1+0xa4>
    2768:	29 81       	ldd	r18, Y+1	; 0x01
    276a:	3a 81       	ldd	r19, Y+2	; 0x02
    276c:	26 30       	cpi	r18, 0x06	; 6
    276e:	31 05       	cpc	r19, r1
    2770:	f1 f0       	breq	.+60     	; 0x27ae <__vector_1+0xb4>
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	87 30       	cpi	r24, 0x07	; 7
    2778:	91 05       	cpc	r25, r1
    277a:	e9 f0       	breq	.+58     	; 0x27b6 <__vector_1+0xbc>
    277c:	1e c0       	rjmp	.+60     	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_FLASH: mode = LEDS_MODE_SHIFT_LEFT; break;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 8b 00 	sts	0x008B, r24
    2784:	1a c0       	rjmp	.+52     	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_SHIFT_LEFT: mode = LEDS_MODE_SHIFT_RIGHT; break;
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	80 93 8b 00 	sts	0x008B, r24
    278c:	16 c0       	rjmp	.+44     	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_SHIFT_RIGHT: mode = LEDS_MODE_COVERGE; break;
    278e:	83 e0       	ldi	r24, 0x03	; 3
    2790:	80 93 8b 00 	sts	0x008B, r24
    2794:	12 c0       	rjmp	.+36     	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_COVERGE: mode = LEDS_MODE_DIVERGE; break;
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	80 93 8b 00 	sts	0x008B, r24
    279c:	0e c0       	rjmp	.+28     	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_DIVERGE: mode = LEDS_MODE_PING_PONG; break;
    279e:	85 e0       	ldi	r24, 0x05	; 5
    27a0:	80 93 8b 00 	sts	0x008B, r24
    27a4:	0a c0       	rjmp	.+20     	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_PING_PONG: mode = LEDS_MODE_SNAKE; break;
    27a6:	86 e0       	ldi	r24, 0x06	; 6
    27a8:	80 93 8b 00 	sts	0x008B, r24
    27ac:	06 c0       	rjmp	.+12     	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_SNAKE: mode = LEDS_MODE_COVERGE_DIVERGE; break;
    27ae:	87 e0       	ldi	r24, 0x07	; 7
    27b0:	80 93 8b 00 	sts	0x008B, r24
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <__vector_1+0xc0>
		case LEDS_MODE_COVERGE_DIVERGE: mode = LEDS_MODE_FLASH; break;
    27b6:	10 92 8b 00 	sts	0x008B, r1
	}
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	3f 91       	pop	r19
    27c8:	2f 91       	pop	r18
    27ca:	0f 90       	pop	r0
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	0f 90       	pop	r0
    27d0:	1f 90       	pop	r1
    27d2:	18 95       	reti

000027d4 <flashing>:
//	DIO_voidTogglePinValue(DIO_PORTB, DIO_PIN5);
//}



void flashing (void){
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	2e 97       	sbiw	r28, 0x0e	; 14
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_FLASH) pattern = 0x00;
    27e8:	80 91 8b 00 	lds	r24, 0x008B
    27ec:	88 23       	and	r24, r24
    27ee:	11 f0       	breq	.+4      	; 0x27f4 <flashing+0x20>
    27f0:	10 92 8a 00 	sts	0x008A, r1
	mode = LEDS_MODE_FLASH;
    27f4:	10 92 8b 00 	sts	0x008B, r1

	pattern = ~pattern;
    27f8:	80 91 8a 00 	lds	r24, 0x008A
    27fc:	80 95       	com	r24
    27fe:	80 93 8a 00 	sts	0x008A, r24
	DIO_voidSetPortValue (LEDS_PORT, pattern);
    2802:	90 91 8a 00 	lds	r25, 0x008A
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	69 2f       	mov	r22, r25
    280a:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	aa ef       	ldi	r26, 0xFA	; 250
    2814:	b3 e4       	ldi	r27, 0x43	; 67
    2816:	8b 87       	std	Y+11, r24	; 0x0b
    2818:	9c 87       	std	Y+12, r25	; 0x0c
    281a:	ad 87       	std	Y+13, r26	; 0x0d
    281c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2820:	7c 85       	ldd	r23, Y+12	; 0x0c
    2822:	8d 85       	ldd	r24, Y+13	; 0x0d
    2824:	9e 85       	ldd	r25, Y+14	; 0x0e
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a ef       	ldi	r20, 0xFA	; 250
    282c:	54 e4       	ldi	r21, 0x44	; 68
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	8f 83       	std	Y+7, r24	; 0x07
    2838:	98 87       	std	Y+8, r25	; 0x08
    283a:	a9 87       	std	Y+9, r26	; 0x09
    283c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    283e:	6f 81       	ldd	r22, Y+7	; 0x07
    2840:	78 85       	ldd	r23, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	9a 85       	ldd	r25, Y+10	; 0x0a
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2852:	88 23       	and	r24, r24
    2854:	2c f4       	brge	.+10     	; 0x2860 <flashing+0x8c>
		__ticks = 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	3f c0       	rjmp	.+126    	; 0x28de <flashing+0x10a>
	else if (__tmp > 65535)
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	3f ef       	ldi	r19, 0xFF	; 255
    286c:	4f e7       	ldi	r20, 0x7F	; 127
    286e:	57 e4       	ldi	r21, 0x47	; 71
    2870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2874:	18 16       	cp	r1, r24
    2876:	4c f5       	brge	.+82     	; 0x28ca <flashing+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	6b 85       	ldd	r22, Y+11	; 0x0b
    287a:	7c 85       	ldd	r23, Y+12	; 0x0c
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <flashing+0xec>
    28a2:	88 ec       	ldi	r24, 0xC8	; 200
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <flashing+0xda>
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <flashing+0xce>
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <flashing+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <flashing+0x116>
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);
}
    28f2:	2e 96       	adiw	r28, 0x0e	; 14
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <shift_left>:

void shift_left (void){
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	2e 97       	sbiw	r28, 0x0e	; 14
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_SHIFT_LEFT) pattern = 0x01;
    2918:	80 91 8b 00 	lds	r24, 0x008B
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	19 f0       	breq	.+6      	; 0x2926 <shift_left+0x22>
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	80 93 8a 00 	sts	0x008A, r24
	mode = LEDS_MODE_SHIFT_LEFT;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	80 93 8b 00 	sts	0x008B, r24

	if (pattern == 0x80){
    292c:	80 91 8a 00 	lds	r24, 0x008A
    2930:	80 38       	cpi	r24, 0x80	; 128
    2932:	21 f4       	brne	.+8      	; 0x293c <shift_left+0x38>
		pattern = 0x01;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	80 93 8a 00 	sts	0x008A, r24
    293a:	05 c0       	rjmp	.+10     	; 0x2946 <shift_left+0x42>
	}
	else{
		pattern = pattern<<1;
    293c:	80 91 8a 00 	lds	r24, 0x008A
    2940:	88 0f       	add	r24, r24
    2942:	80 93 8a 00 	sts	0x008A, r24
	}

	DIO_voidSetPortValue (LEDS_PORT, pattern);
    2946:	90 91 8a 00 	lds	r25, 0x008A
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	69 2f       	mov	r22, r25
    294e:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	aa e7       	ldi	r26, 0x7A	; 122
    2958:	b3 e4       	ldi	r27, 0x43	; 67
    295a:	8b 87       	std	Y+11, r24	; 0x0b
    295c:	9c 87       	std	Y+12, r25	; 0x0c
    295e:	ad 87       	std	Y+13, r26	; 0x0d
    2960:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	6b 85       	ldd	r22, Y+11	; 0x0b
    2964:	7c 85       	ldd	r23, Y+12	; 0x0c
    2966:	8d 85       	ldd	r24, Y+13	; 0x0d
    2968:	9e 85       	ldd	r25, Y+14	; 0x0e
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a ef       	ldi	r20, 0xFA	; 250
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8f 83       	std	Y+7, r24	; 0x07
    297c:	98 87       	std	Y+8, r25	; 0x08
    297e:	a9 87       	std	Y+9, r26	; 0x09
    2980:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <shift_left+0xa0>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <shift_left+0x11e>
	else if (__tmp > 65535)
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <shift_left+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29be:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <shift_left+0x100>
    29e6:	88 ec       	ldi	r24, 0xC8	; 200
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9c 83       	std	Y+4, r25	; 0x04
    29ec:	8b 83       	std	Y+3, r24	; 0x03
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	9c 81       	ldd	r25, Y+4	; 0x04
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <shift_left+0xee>
    29f6:	9c 83       	std	Y+4, r25	; 0x04
    29f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <shift_left+0xe2>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <shift_left+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a10:	78 85       	ldd	r23, Y+8	; 0x08
    2a12:	89 85       	ldd	r24, Y+9	; 0x09
    2a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	9a 83       	std	Y+2, r25	; 0x02
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <shift_left+0x12a>
    2a32:	9a 83       	std	Y+2, r25	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(250);
}
    2a36:	2e 96       	adiw	r28, 0x0e	; 14
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <shift_right>:

void shift_right (void){
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	2e 97       	sbiw	r28, 0x0e	; 14
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_SHIFT_RIGHT) pattern = 0x80;
    2a5c:	80 91 8b 00 	lds	r24, 0x008B
    2a60:	82 30       	cpi	r24, 0x02	; 2
    2a62:	19 f0       	breq	.+6      	; 0x2a6a <shift_right+0x22>
    2a64:	80 e8       	ldi	r24, 0x80	; 128
    2a66:	80 93 8a 00 	sts	0x008A, r24
	mode = LEDS_MODE_SHIFT_RIGHT;
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	80 93 8b 00 	sts	0x008B, r24

	if (pattern == 0x01){
    2a70:	80 91 8a 00 	lds	r24, 0x008A
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	21 f4       	brne	.+8      	; 0x2a80 <shift_right+0x38>
		pattern = 0x80;
    2a78:	80 e8       	ldi	r24, 0x80	; 128
    2a7a:	80 93 8a 00 	sts	0x008A, r24
    2a7e:	05 c0       	rjmp	.+10     	; 0x2a8a <shift_right+0x42>
	}
	else{
		pattern = pattern>>1;
    2a80:	80 91 8a 00 	lds	r24, 0x008A
    2a84:	86 95       	lsr	r24
    2a86:	80 93 8a 00 	sts	0x008A, r24
	}

	DIO_voidSetPortValue (LEDS_PORT, pattern);
    2a8a:	90 91 8a 00 	lds	r25, 0x008A
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	69 2f       	mov	r22, r25
    2a92:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	aa e7       	ldi	r26, 0x7A	; 122
    2a9c:	b3 e4       	ldi	r27, 0x43	; 67
    2a9e:	8b 87       	std	Y+11, r24	; 0x0b
    2aa0:	9c 87       	std	Y+12, r25	; 0x0c
    2aa2:	ad 87       	std	Y+13, r26	; 0x0d
    2aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8f 83       	std	Y+7, r24	; 0x07
    2ac0:	98 87       	std	Y+8, r25	; 0x08
    2ac2:	a9 87       	std	Y+9, r26	; 0x09
    2ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	5f e3       	ldi	r21, 0x3F	; 63
    2ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ada:	88 23       	and	r24, r24
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <shift_right+0xa0>
		__ticks = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <shift_right+0x11e>
	else if (__tmp > 65535)
    2ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aea:	78 85       	ldd	r23, Y+8	; 0x08
    2aec:	89 85       	ldd	r24, Y+9	; 0x09
    2aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	4c f5       	brge	.+82     	; 0x2b52 <shift_right+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	51 e4       	ldi	r21, 0x41	; 65
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <shift_right+0x100>
    2b2a:	88 ec       	ldi	r24, 0xC8	; 200
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9c 83       	std	Y+4, r25	; 0x04
    2b30:	8b 83       	std	Y+3, r24	; 0x03
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <shift_right+0xee>
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <shift_right+0xe2>
    2b50:	14 c0       	rjmp	.+40     	; 0x2b7a <shift_right+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	6f 81       	ldd	r22, Y+7	; 0x07
    2b54:	78 85       	ldd	r23, Y+8	; 0x08
    2b56:	89 85       	ldd	r24, Y+9	; 0x09
    2b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9e 83       	std	Y+6, r25	; 0x06
    2b64:	8d 83       	std	Y+5, r24	; 0x05
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <shift_right+0x12a>
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(250);
}
    2b7a:	2e 96       	adiw	r28, 0x0e	; 14
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <coverge>:

void coverge (void){
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	60 97       	sbiw	r28, 0x10	; 16
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_COVERGE) pattern = 0x81;
    2ba0:	80 91 8b 00 	lds	r24, 0x008B
    2ba4:	83 30       	cpi	r24, 0x03	; 3
    2ba6:	19 f0       	breq	.+6      	; 0x2bae <coverge+0x22>
    2ba8:	81 e8       	ldi	r24, 0x81	; 129
    2baa:	80 93 8a 00 	sts	0x008A, r24
	mode = LEDS_MODE_COVERGE;
    2bae:	83 e0       	ldi	r24, 0x03	; 3
    2bb0:	80 93 8b 00 	sts	0x008B, r24

	if (pattern == 0x18){
    2bb4:	80 91 8a 00 	lds	r24, 0x008A
    2bb8:	88 31       	cpi	r24, 0x18	; 24
    2bba:	21 f4       	brne	.+8      	; 0x2bc4 <coverge+0x38>
		pattern = 0x81;
    2bbc:	81 e8       	ldi	r24, 0x81	; 129
    2bbe:	80 93 8a 00 	sts	0x008A, r24
    2bc2:	13 c0       	rjmp	.+38     	; 0x2bea <coverge+0x5e>
	}
	else{
		u8 u_temp, l_temp;
		u_temp = (pattern & 0xf0) >> 1;
    2bc4:	80 91 8a 00 	lds	r24, 0x008A
    2bc8:	88 2f       	mov	r24, r24
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	80 7f       	andi	r24, 0xF0	; 240
    2bce:	90 70       	andi	r25, 0x00	; 0
    2bd0:	95 95       	asr	r25
    2bd2:	87 95       	ror	r24
    2bd4:	88 8b       	std	Y+16, r24	; 0x10
		l_temp = (pattern & 0x0f) << 1;
    2bd6:	80 91 8a 00 	lds	r24, 0x008A
    2bda:	8f 70       	andi	r24, 0x0F	; 15
    2bdc:	88 0f       	add	r24, r24
    2bde:	8f 87       	std	Y+15, r24	; 0x0f

		pattern = u_temp + l_temp;
    2be0:	98 89       	ldd	r25, Y+16	; 0x10
    2be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be4:	89 0f       	add	r24, r25
    2be6:	80 93 8a 00 	sts	0x008A, r24
	}

	DIO_voidSetPortValue (LEDS_PORT, pattern);
    2bea:	90 91 8a 00 	lds	r25, 0x008A
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	69 2f       	mov	r22, r25
    2bf2:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a6 e9       	ldi	r26, 0x96	; 150
    2bfc:	b3 e4       	ldi	r27, 0x43	; 67
    2bfe:	8b 87       	std	Y+11, r24	; 0x0b
    2c00:	9c 87       	std	Y+12, r25	; 0x0c
    2c02:	ad 87       	std	Y+13, r26	; 0x0d
    2c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	4a ef       	ldi	r20, 0xFA	; 250
    2c14:	54 e4       	ldi	r21, 0x44	; 68
    2c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8f 83       	std	Y+7, r24	; 0x07
    2c20:	98 87       	std	Y+8, r25	; 0x08
    2c22:	a9 87       	std	Y+9, r26	; 0x09
    2c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c26:	6f 81       	ldd	r22, Y+7	; 0x07
    2c28:	78 85       	ldd	r23, Y+8	; 0x08
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <coverge+0xbc>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	3f c0       	rjmp	.+126    	; 0x2cc6 <coverge+0x13a>
	else if (__tmp > 65535)
    2c48:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4a:	78 85       	ldd	r23, Y+8	; 0x08
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	3f ef       	ldi	r19, 0xFF	; 255
    2c54:	4f e7       	ldi	r20, 0x7F	; 127
    2c56:	57 e4       	ldi	r21, 0x47	; 71
    2c58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5c:	18 16       	cp	r1, r24
    2c5e:	4c f5       	brge	.+82     	; 0x2cb2 <coverge+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e2       	ldi	r20, 0x20	; 32
    2c6e:	51 e4       	ldi	r21, 0x41	; 65
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <coverge+0x11c>
    2c8a:	88 ec       	ldi	r24, 0xC8	; 200
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <coverge+0x10a>
    2c9a:	9c 83       	std	Y+4, r25	; 0x04
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	69 f7       	brne	.-38     	; 0x2c8a <coverge+0xfe>
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <coverge+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <coverge+0x146>
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(300);
}
    2cda:	60 96       	adiw	r28, 0x10	; 16
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <diverge>:

void diverge (void){
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	60 97       	sbiw	r28, 0x10	; 16
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_DIVERGE) pattern = 0x18;
    2d00:	80 91 8b 00 	lds	r24, 0x008B
    2d04:	84 30       	cpi	r24, 0x04	; 4
    2d06:	19 f0       	breq	.+6      	; 0x2d0e <diverge+0x22>
    2d08:	88 e1       	ldi	r24, 0x18	; 24
    2d0a:	80 93 8a 00 	sts	0x008A, r24
	mode = LEDS_MODE_DIVERGE;
    2d0e:	84 e0       	ldi	r24, 0x04	; 4
    2d10:	80 93 8b 00 	sts	0x008B, r24

	if (pattern == 0x81){
    2d14:	80 91 8a 00 	lds	r24, 0x008A
    2d18:	81 38       	cpi	r24, 0x81	; 129
    2d1a:	21 f4       	brne	.+8      	; 0x2d24 <diverge+0x38>
		pattern = 0x18;
    2d1c:	88 e1       	ldi	r24, 0x18	; 24
    2d1e:	80 93 8a 00 	sts	0x008A, r24
    2d22:	13 c0       	rjmp	.+38     	; 0x2d4a <diverge+0x5e>
	}
	else{
		u8 u_temp, l_temp;
		u_temp = (pattern & 0xf0) << 1;
    2d24:	80 91 8a 00 	lds	r24, 0x008A
    2d28:	80 7f       	andi	r24, 0xF0	; 240
    2d2a:	88 0f       	add	r24, r24
    2d2c:	88 8b       	std	Y+16, r24	; 0x10
		l_temp = (pattern & 0x0f) >> 1;
    2d2e:	80 91 8a 00 	lds	r24, 0x008A
    2d32:	88 2f       	mov	r24, r24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	8f 70       	andi	r24, 0x0F	; 15
    2d38:	90 70       	andi	r25, 0x00	; 0
    2d3a:	95 95       	asr	r25
    2d3c:	87 95       	ror	r24
    2d3e:	8f 87       	std	Y+15, r24	; 0x0f

		pattern = u_temp + l_temp;
    2d40:	98 89       	ldd	r25, Y+16	; 0x10
    2d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d44:	89 0f       	add	r24, r25
    2d46:	80 93 8a 00 	sts	0x008A, r24
	}

	DIO_voidSetPortValue (LEDS_PORT, pattern);
    2d4a:	90 91 8a 00 	lds	r25, 0x008A
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	69 2f       	mov	r22, r25
    2d52:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	a6 e9       	ldi	r26, 0x96	; 150
    2d5c:	b3 e4       	ldi	r27, 0x43	; 67
    2d5e:	8b 87       	std	Y+11, r24	; 0x0b
    2d60:	9c 87       	std	Y+12, r25	; 0x0c
    2d62:	ad 87       	std	Y+13, r26	; 0x0d
    2d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	4a ef       	ldi	r20, 0xFA	; 250
    2d74:	54 e4       	ldi	r21, 0x44	; 68
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8f 83       	std	Y+7, r24	; 0x07
    2d80:	98 87       	std	Y+8, r25	; 0x08
    2d82:	a9 87       	std	Y+9, r26	; 0x09
    2d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d86:	6f 81       	ldd	r22, Y+7	; 0x07
    2d88:	78 85       	ldd	r23, Y+8	; 0x08
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e8       	ldi	r20, 0x80	; 128
    2d94:	5f e3       	ldi	r21, 0x3F	; 63
    2d96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	2c f4       	brge	.+10     	; 0x2da8 <diverge+0xbc>
		__ticks = 1;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	3f c0       	rjmp	.+126    	; 0x2e26 <diverge+0x13a>
	else if (__tmp > 65535)
    2da8:	6f 81       	ldd	r22, Y+7	; 0x07
    2daa:	78 85       	ldd	r23, Y+8	; 0x08
    2dac:	89 85       	ldd	r24, Y+9	; 0x09
    2dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	3f ef       	ldi	r19, 0xFF	; 255
    2db4:	4f e7       	ldi	r20, 0x7F	; 127
    2db6:	57 e4       	ldi	r21, 0x47	; 71
    2db8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dbc:	18 16       	cp	r1, r24
    2dbe:	4c f5       	brge	.+82     	; 0x2e12 <diverge+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e2       	ldi	r20, 0x20	; 32
    2dce:	51 e4       	ldi	r21, 0x41	; 65
    2dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	0f c0       	rjmp	.+30     	; 0x2e08 <diverge+0x11c>
    2dea:	88 ec       	ldi	r24, 0xC8	; 200
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <diverge+0x10a>
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2e00:	9e 81       	ldd	r25, Y+6	; 0x06
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	69 f7       	brne	.-38     	; 0x2dea <diverge+0xfe>
    2e10:	14 c0       	rjmp	.+40     	; 0x2e3a <diverge+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e12:	6f 81       	ldd	r22, Y+7	; 0x07
    2e14:	78 85       	ldd	r23, Y+8	; 0x08
    2e16:	89 85       	ldd	r24, Y+9	; 0x09
    2e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <diverge+0x146>
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(300);
}
    2e3a:	60 96       	adiw	r28, 0x10	; 16
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <ping_pong>:

void ping_pong (void){
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	2e 97       	sbiw	r28, 0x0e	; 14
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_PING_PONG) {pattern = 0x80; ping_direction = LEDS_MODE_PING_PONG_RIGHT;}
    2e60:	80 91 8b 00 	lds	r24, 0x008B
    2e64:	85 30       	cpi	r24, 0x05	; 5
    2e66:	29 f0       	breq	.+10     	; 0x2e72 <ping_pong+0x26>
    2e68:	80 e8       	ldi	r24, 0x80	; 128
    2e6a:	80 93 8a 00 	sts	0x008A, r24
    2e6e:	10 92 8c 00 	sts	0x008C, r1
	mode = LEDS_MODE_PING_PONG;
    2e72:	85 e0       	ldi	r24, 0x05	; 5
    2e74:	80 93 8b 00 	sts	0x008B, r24

	if (ping_direction == LEDS_MODE_PING_PONG_RIGHT){
    2e78:	80 91 8c 00 	lds	r24, 0x008C
    2e7c:	88 23       	and	r24, r24
    2e7e:	31 f4       	brne	.+12     	; 0x2e8c <ping_pong+0x40>
		pattern = pattern>>1;
    2e80:	80 91 8a 00 	lds	r24, 0x008A
    2e84:	86 95       	lsr	r24
    2e86:	80 93 8a 00 	sts	0x008A, r24
    2e8a:	09 c0       	rjmp	.+18     	; 0x2e9e <ping_pong+0x52>
	}
	else if (ping_direction == LEDS_MODE_PING_PONG_LEFT){
    2e8c:	80 91 8c 00 	lds	r24, 0x008C
    2e90:	81 30       	cpi	r24, 0x01	; 1
    2e92:	29 f4       	brne	.+10     	; 0x2e9e <ping_pong+0x52>
		pattern = pattern<<1;
    2e94:	80 91 8a 00 	lds	r24, 0x008A
    2e98:	88 0f       	add	r24, r24
    2e9a:	80 93 8a 00 	sts	0x008A, r24
	}

	if (pattern == 0x01){
    2e9e:	80 91 8a 00 	lds	r24, 0x008A
    2ea2:	81 30       	cpi	r24, 0x01	; 1
    2ea4:	21 f4       	brne	.+8      	; 0x2eae <ping_pong+0x62>
		ping_direction = LEDS_MODE_PING_PONG_LEFT;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	80 93 8c 00 	sts	0x008C, r24
    2eac:	06 c0       	rjmp	.+12     	; 0x2eba <ping_pong+0x6e>
	}
	else if (pattern == 0x80){
    2eae:	80 91 8a 00 	lds	r24, 0x008A
    2eb2:	80 38       	cpi	r24, 0x80	; 128
    2eb4:	11 f4       	brne	.+4      	; 0x2eba <ping_pong+0x6e>
		ping_direction = LEDS_MODE_PING_PONG_RIGHT;
    2eb6:	10 92 8c 00 	sts	0x008C, r1
	}

	DIO_voidSetPortValue (LEDS_PORT, pattern);
    2eba:	90 91 8a 00 	lds	r25, 0x008A
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	69 2f       	mov	r22, r25
    2ec2:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	aa e7       	ldi	r26, 0x7A	; 122
    2ecc:	b3 e4       	ldi	r27, 0x43	; 67
    2ece:	8b 87       	std	Y+11, r24	; 0x0b
    2ed0:	9c 87       	std	Y+12, r25	; 0x0c
    2ed2:	ad 87       	std	Y+13, r26	; 0x0d
    2ed4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	4a ef       	ldi	r20, 0xFA	; 250
    2ee4:	54 e4       	ldi	r21, 0x44	; 68
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	8f 83       	std	Y+7, r24	; 0x07
    2ef0:	98 87       	std	Y+8, r25	; 0x08
    2ef2:	a9 87       	std	Y+9, r26	; 0x09
    2ef4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef8:	78 85       	ldd	r23, Y+8	; 0x08
    2efa:	89 85       	ldd	r24, Y+9	; 0x09
    2efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	40 e8       	ldi	r20, 0x80	; 128
    2f04:	5f e3       	ldi	r21, 0x3F	; 63
    2f06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f0a:	88 23       	and	r24, r24
    2f0c:	2c f4       	brge	.+10     	; 0x2f18 <ping_pong+0xcc>
		__ticks = 1;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9e 83       	std	Y+6, r25	; 0x06
    2f14:	8d 83       	std	Y+5, r24	; 0x05
    2f16:	3f c0       	rjmp	.+126    	; 0x2f96 <ping_pong+0x14a>
	else if (__tmp > 65535)
    2f18:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1a:	78 85       	ldd	r23, Y+8	; 0x08
    2f1c:	89 85       	ldd	r24, Y+9	; 0x09
    2f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	3f ef       	ldi	r19, 0xFF	; 255
    2f24:	4f e7       	ldi	r20, 0x7F	; 127
    2f26:	57 e4       	ldi	r21, 0x47	; 71
    2f28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f2c:	18 16       	cp	r1, r24
    2f2e:	4c f5       	brge	.+82     	; 0x2f82 <ping_pong+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e2       	ldi	r20, 0x20	; 32
    2f3e:	51 e4       	ldi	r21, 0x41	; 65
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	0f c0       	rjmp	.+30     	; 0x2f78 <ping_pong+0x12c>
    2f5a:	88 ec       	ldi	r24, 0xC8	; 200
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <ping_pong+0x11a>
    2f6a:	9c 83       	std	Y+4, r25	; 0x04
    2f6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f70:	9e 81       	ldd	r25, Y+6	; 0x06
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	9e 83       	std	Y+6, r25	; 0x06
    2f76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	69 f7       	brne	.-38     	; 0x2f5a <ping_pong+0x10e>
    2f80:	14 c0       	rjmp	.+40     	; 0x2faa <ping_pong+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	f1 f7       	brne	.-4      	; 0x2fa2 <ping_pong+0x156>
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(250);
}
    2faa:	2e 96       	adiw	r28, 0x0e	; 14
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <snake>:

void snake (void){
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	2e 97       	sbiw	r28, 0x0e	; 14
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_SNAKE) pattern = 0x00;
    2fd0:	80 91 8b 00 	lds	r24, 0x008B
    2fd4:	86 30       	cpi	r24, 0x06	; 6
    2fd6:	11 f0       	breq	.+4      	; 0x2fdc <snake+0x20>
    2fd8:	10 92 8a 00 	sts	0x008A, r1
	mode = LEDS_MODE_SNAKE;
    2fdc:	86 e0       	ldi	r24, 0x06	; 6
    2fde:	80 93 8b 00 	sts	0x008B, r24

	if (pattern == 0xff){
    2fe2:	80 91 8a 00 	lds	r24, 0x008A
    2fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe8:	19 f4       	brne	.+6      	; 0x2ff0 <snake+0x34>
		pattern = 0x00;
    2fea:	10 92 8a 00 	sts	0x008A, r1
    2fee:	09 c0       	rjmp	.+18     	; 0x3002 <snake+0x46>
	}
	else{
		pattern = pattern<<1 | 0x01;
    2ff0:	80 91 8a 00 	lds	r24, 0x008A
    2ff4:	88 2f       	mov	r24, r24
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	81 60       	ori	r24, 0x01	; 1
    2ffe:	80 93 8a 00 	sts	0x008A, r24
	}

	DIO_voidSetPortValue (LEDS_PORT, pattern);
    3002:	90 91 8a 00 	lds	r25, 0x008A
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	69 2f       	mov	r22, r25
    300a:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a6 e9       	ldi	r26, 0x96	; 150
    3014:	b3 e4       	ldi	r27, 0x43	; 67
    3016:	8b 87       	std	Y+11, r24	; 0x0b
    3018:	9c 87       	std	Y+12, r25	; 0x0c
    301a:	ad 87       	std	Y+13, r26	; 0x0d
    301c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3020:	7c 85       	ldd	r23, Y+12	; 0x0c
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a ef       	ldi	r20, 0xFA	; 250
    302c:	54 e4       	ldi	r21, 0x44	; 68
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	8f 83       	std	Y+7, r24	; 0x07
    3038:	98 87       	std	Y+8, r25	; 0x08
    303a:	a9 87       	std	Y+9, r26	; 0x09
    303c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303e:	6f 81       	ldd	r22, Y+7	; 0x07
    3040:	78 85       	ldd	r23, Y+8	; 0x08
    3042:	89 85       	ldd	r24, Y+9	; 0x09
    3044:	9a 85       	ldd	r25, Y+10	; 0x0a
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <snake+0xa4>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	3f c0       	rjmp	.+126    	; 0x30de <snake+0x122>
	else if (__tmp > 65535)
    3060:	6f 81       	ldd	r22, Y+7	; 0x07
    3062:	78 85       	ldd	r23, Y+8	; 0x08
    3064:	89 85       	ldd	r24, Y+9	; 0x09
    3066:	9a 85       	ldd	r25, Y+10	; 0x0a
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <snake+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	6b 85       	ldd	r22, Y+11	; 0x0b
    307a:	7c 85       	ldd	r23, Y+12	; 0x0c
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <snake+0x104>
    30a2:	88 ec       	ldi	r24, 0xC8	; 200
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <snake+0xf2>
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <snake+0xe6>
    30c8:	14 c0       	rjmp	.+40     	; 0x30f2 <snake+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <snake+0x12e>
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(300);
}
    30f2:	2e 96       	adiw	r28, 0x0e	; 14
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <coverge_diverge>:

void coverge_diverge (void){
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	62 97       	sbiw	r28, 0x12	; 18
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
	if (mode != LEDS_MODE_COVERGE_DIVERGE){ pattern = 0x81; condiv_direction = LEDS_MODE_COVERGE_DIVERGE_COVERGE;}
    3118:	80 91 8b 00 	lds	r24, 0x008B
    311c:	87 30       	cpi	r24, 0x07	; 7
    311e:	29 f0       	breq	.+10     	; 0x312a <coverge_diverge+0x26>
    3120:	81 e8       	ldi	r24, 0x81	; 129
    3122:	80 93 8a 00 	sts	0x008A, r24
    3126:	10 92 8d 00 	sts	0x008D, r1
	mode = LEDS_MODE_COVERGE_DIVERGE;
    312a:	87 e0       	ldi	r24, 0x07	; 7
    312c:	80 93 8b 00 	sts	0x008B, r24

	if (condiv_direction == LEDS_MODE_COVERGE_DIVERGE_COVERGE){
    3130:	80 91 8d 00 	lds	r24, 0x008D
    3134:	88 23       	and	r24, r24
    3136:	a1 f4       	brne	.+40     	; 0x3160 <coverge_diverge+0x5c>
		u8 u_temp, l_temp;
		u_temp = (pattern & 0xf0) >> 1;
    3138:	80 91 8a 00 	lds	r24, 0x008A
    313c:	88 2f       	mov	r24, r24
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	80 7f       	andi	r24, 0xF0	; 240
    3142:	90 70       	andi	r25, 0x00	; 0
    3144:	95 95       	asr	r25
    3146:	87 95       	ror	r24
    3148:	8a 8b       	std	Y+18, r24	; 0x12
		l_temp = (pattern & 0x0f) << 1;
    314a:	80 91 8a 00 	lds	r24, 0x008A
    314e:	8f 70       	andi	r24, 0x0F	; 15
    3150:	88 0f       	add	r24, r24
    3152:	89 8b       	std	Y+17, r24	; 0x11

		pattern = u_temp + l_temp;
    3154:	9a 89       	ldd	r25, Y+18	; 0x12
    3156:	89 89       	ldd	r24, Y+17	; 0x11
    3158:	89 0f       	add	r24, r25
    315a:	80 93 8a 00 	sts	0x008A, r24
    315e:	17 c0       	rjmp	.+46     	; 0x318e <coverge_diverge+0x8a>
	}
	else if (condiv_direction == LEDS_MODE_COVERGE_DIVERGE_DIVERGE){
    3160:	80 91 8d 00 	lds	r24, 0x008D
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	99 f4       	brne	.+38     	; 0x318e <coverge_diverge+0x8a>
		u8 u_temp, l_temp;
		u_temp = (pattern & 0xf0) << 1;
    3168:	80 91 8a 00 	lds	r24, 0x008A
    316c:	80 7f       	andi	r24, 0xF0	; 240
    316e:	88 0f       	add	r24, r24
    3170:	88 8b       	std	Y+16, r24	; 0x10
		l_temp = (pattern & 0x0f) >> 1;
    3172:	80 91 8a 00 	lds	r24, 0x008A
    3176:	88 2f       	mov	r24, r24
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	8f 70       	andi	r24, 0x0F	; 15
    317c:	90 70       	andi	r25, 0x00	; 0
    317e:	95 95       	asr	r25
    3180:	87 95       	ror	r24
    3182:	8f 87       	std	Y+15, r24	; 0x0f

		pattern = u_temp + l_temp;
    3184:	98 89       	ldd	r25, Y+16	; 0x10
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	89 0f       	add	r24, r25
    318a:	80 93 8a 00 	sts	0x008A, r24
	}

	if (pattern == 0x81){
    318e:	80 91 8a 00 	lds	r24, 0x008A
    3192:	81 38       	cpi	r24, 0x81	; 129
    3194:	19 f4       	brne	.+6      	; 0x319c <coverge_diverge+0x98>
		condiv_direction = LEDS_MODE_COVERGE_DIVERGE_COVERGE;
    3196:	10 92 8d 00 	sts	0x008D, r1
    319a:	07 c0       	rjmp	.+14     	; 0x31aa <coverge_diverge+0xa6>
	}
	else if (pattern == 0x18){
    319c:	80 91 8a 00 	lds	r24, 0x008A
    31a0:	88 31       	cpi	r24, 0x18	; 24
    31a2:	19 f4       	brne	.+6      	; 0x31aa <coverge_diverge+0xa6>
		condiv_direction = LEDS_MODE_COVERGE_DIVERGE_DIVERGE;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	80 93 8d 00 	sts	0x008D, r24
	}

	DIO_voidSetPortValue (LEDS_PORT, pattern);
    31aa:	90 91 8a 00 	lds	r25, 0x008A
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	69 2f       	mov	r22, r25
    31b2:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_voidSetPortValue>
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a6 e9       	ldi	r26, 0x96	; 150
    31bc:	b3 e4       	ldi	r27, 0x43	; 67
    31be:	8b 87       	std	Y+11, r24	; 0x0b
    31c0:	9c 87       	std	Y+12, r25	; 0x0c
    31c2:	ad 87       	std	Y+13, r26	; 0x0d
    31c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    31cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	4a ef       	ldi	r20, 0xFA	; 250
    31d4:	54 e4       	ldi	r21, 0x44	; 68
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	8f 83       	std	Y+7, r24	; 0x07
    31e0:	98 87       	std	Y+8, r25	; 0x08
    31e2:	a9 87       	std	Y+9, r26	; 0x09
    31e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31e6:	6f 81       	ldd	r22, Y+7	; 0x07
    31e8:	78 85       	ldd	r23, Y+8	; 0x08
    31ea:	89 85       	ldd	r24, Y+9	; 0x09
    31ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e8       	ldi	r20, 0x80	; 128
    31f4:	5f e3       	ldi	r21, 0x3F	; 63
    31f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fa:	88 23       	and	r24, r24
    31fc:	2c f4       	brge	.+10     	; 0x3208 <coverge_diverge+0x104>
		__ticks = 1;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	9e 83       	std	Y+6, r25	; 0x06
    3204:	8d 83       	std	Y+5, r24	; 0x05
    3206:	3f c0       	rjmp	.+126    	; 0x3286 <coverge_diverge+0x182>
	else if (__tmp > 65535)
    3208:	6f 81       	ldd	r22, Y+7	; 0x07
    320a:	78 85       	ldd	r23, Y+8	; 0x08
    320c:	89 85       	ldd	r24, Y+9	; 0x09
    320e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	3f ef       	ldi	r19, 0xFF	; 255
    3214:	4f e7       	ldi	r20, 0x7F	; 127
    3216:	57 e4       	ldi	r21, 0x47	; 71
    3218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321c:	18 16       	cp	r1, r24
    321e:	4c f5       	brge	.+82     	; 0x3272 <coverge_diverge+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3220:	6b 85       	ldd	r22, Y+11	; 0x0b
    3222:	7c 85       	ldd	r23, Y+12	; 0x0c
    3224:	8d 85       	ldd	r24, Y+13	; 0x0d
    3226:	9e 85       	ldd	r25, Y+14	; 0x0e
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	9e 83       	std	Y+6, r25	; 0x06
    3246:	8d 83       	std	Y+5, r24	; 0x05
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <coverge_diverge+0x164>
    324a:	88 ec       	ldi	r24, 0xC8	; 200
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9c 83       	std	Y+4, r25	; 0x04
    3250:	8b 83       	std	Y+3, r24	; 0x03
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <coverge_diverge+0x152>
    325a:	9c 83       	std	Y+4, r25	; 0x04
    325c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	8d 81       	ldd	r24, Y+5	; 0x05
    3260:	9e 81       	ldd	r25, Y+6	; 0x06
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	9e 83       	std	Y+6, r25	; 0x06
    3266:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	8d 81       	ldd	r24, Y+5	; 0x05
    326a:	9e 81       	ldd	r25, Y+6	; 0x06
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f7       	brne	.-38     	; 0x324a <coverge_diverge+0x146>
    3270:	14 c0       	rjmp	.+40     	; 0x329a <coverge_diverge+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	6f 81       	ldd	r22, Y+7	; 0x07
    3274:	78 85       	ldd	r23, Y+8	; 0x08
    3276:	89 85       	ldd	r24, Y+9	; 0x09
    3278:	9a 85       	ldd	r25, Y+10	; 0x0a
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	8d 81       	ldd	r24, Y+5	; 0x05
    3288:	9e 81       	ldd	r25, Y+6	; 0x06
    328a:	9a 83       	std	Y+2, r25	; 0x02
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <coverge_diverge+0x18e>
    3296:	9a 83       	std	Y+2, r25	; 0x02
    3298:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(300);
}
    329a:	62 96       	adiw	r28, 0x12	; 18
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	cd bf       	out	0x3d, r28	; 61
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <__udivmodqi4>:
    32ac:	99 1b       	sub	r25, r25
    32ae:	79 e0       	ldi	r23, 0x09	; 9
    32b0:	04 c0       	rjmp	.+8      	; 0x32ba <__udivmodqi4_ep>

000032b2 <__udivmodqi4_loop>:
    32b2:	99 1f       	adc	r25, r25
    32b4:	96 17       	cp	r25, r22
    32b6:	08 f0       	brcs	.+2      	; 0x32ba <__udivmodqi4_ep>
    32b8:	96 1b       	sub	r25, r22

000032ba <__udivmodqi4_ep>:
    32ba:	88 1f       	adc	r24, r24
    32bc:	7a 95       	dec	r23
    32be:	c9 f7       	brne	.-14     	; 0x32b2 <__udivmodqi4_loop>
    32c0:	80 95       	com	r24
    32c2:	08 95       	ret

000032c4 <__udivmodsi4>:
    32c4:	a1 e2       	ldi	r26, 0x21	; 33
    32c6:	1a 2e       	mov	r1, r26
    32c8:	aa 1b       	sub	r26, r26
    32ca:	bb 1b       	sub	r27, r27
    32cc:	fd 01       	movw	r30, r26
    32ce:	0d c0       	rjmp	.+26     	; 0x32ea <__udivmodsi4_ep>

000032d0 <__udivmodsi4_loop>:
    32d0:	aa 1f       	adc	r26, r26
    32d2:	bb 1f       	adc	r27, r27
    32d4:	ee 1f       	adc	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	a2 17       	cp	r26, r18
    32da:	b3 07       	cpc	r27, r19
    32dc:	e4 07       	cpc	r30, r20
    32de:	f5 07       	cpc	r31, r21
    32e0:	20 f0       	brcs	.+8      	; 0x32ea <__udivmodsi4_ep>
    32e2:	a2 1b       	sub	r26, r18
    32e4:	b3 0b       	sbc	r27, r19
    32e6:	e4 0b       	sbc	r30, r20
    32e8:	f5 0b       	sbc	r31, r21

000032ea <__udivmodsi4_ep>:
    32ea:	66 1f       	adc	r22, r22
    32ec:	77 1f       	adc	r23, r23
    32ee:	88 1f       	adc	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	1a 94       	dec	r1
    32f4:	69 f7       	brne	.-38     	; 0x32d0 <__udivmodsi4_loop>
    32f6:	60 95       	com	r22
    32f8:	70 95       	com	r23
    32fa:	80 95       	com	r24
    32fc:	90 95       	com	r25
    32fe:	9b 01       	movw	r18, r22
    3300:	ac 01       	movw	r20, r24
    3302:	bd 01       	movw	r22, r26
    3304:	cf 01       	movw	r24, r30
    3306:	08 95       	ret

00003308 <__prologue_saves__>:
    3308:	2f 92       	push	r2
    330a:	3f 92       	push	r3
    330c:	4f 92       	push	r4
    330e:	5f 92       	push	r5
    3310:	6f 92       	push	r6
    3312:	7f 92       	push	r7
    3314:	8f 92       	push	r8
    3316:	9f 92       	push	r9
    3318:	af 92       	push	r10
    331a:	bf 92       	push	r11
    331c:	cf 92       	push	r12
    331e:	df 92       	push	r13
    3320:	ef 92       	push	r14
    3322:	ff 92       	push	r15
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	ca 1b       	sub	r28, r26
    3332:	db 0b       	sbc	r29, r27
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	09 94       	ijmp

00003340 <__epilogue_restores__>:
    3340:	2a 88       	ldd	r2, Y+18	; 0x12
    3342:	39 88       	ldd	r3, Y+17	; 0x11
    3344:	48 88       	ldd	r4, Y+16	; 0x10
    3346:	5f 84       	ldd	r5, Y+15	; 0x0f
    3348:	6e 84       	ldd	r6, Y+14	; 0x0e
    334a:	7d 84       	ldd	r7, Y+13	; 0x0d
    334c:	8c 84       	ldd	r8, Y+12	; 0x0c
    334e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3350:	aa 84       	ldd	r10, Y+10	; 0x0a
    3352:	b9 84       	ldd	r11, Y+9	; 0x09
    3354:	c8 84       	ldd	r12, Y+8	; 0x08
    3356:	df 80       	ldd	r13, Y+7	; 0x07
    3358:	ee 80       	ldd	r14, Y+6	; 0x06
    335a:	fd 80       	ldd	r15, Y+5	; 0x05
    335c:	0c 81       	ldd	r16, Y+4	; 0x04
    335e:	1b 81       	ldd	r17, Y+3	; 0x03
    3360:	aa 81       	ldd	r26, Y+2	; 0x02
    3362:	b9 81       	ldd	r27, Y+1	; 0x01
    3364:	ce 0f       	add	r28, r30
    3366:	d1 1d       	adc	r29, r1
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	cd bf       	out	0x3d, r28	; 61
    3372:	ed 01       	movw	r28, r26
    3374:	08 95       	ret

00003376 <_exit>:
    3376:	f8 94       	cli

00003378 <__stop_program>:
    3378:	ff cf       	rjmp	.-2      	; 0x3378 <__stop_program>
